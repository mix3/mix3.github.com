<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
 xmlns:blogChannel="http://backend.userland.com/blogChannelModule"
>

<channel>
<title>&#x840C;&#x3048;&#x30AD;&#x30E3;&#x30E9;&#x3068;&#x306F;&#x4F55;&#x3060;&#x3063;&#x305F;&#x306E;&#x304B;</title>
<link>http://mix3.github.io</link>
<description>&#x30AE;&#x30FC;&#x30AF;&#x306B;&#x3082;&#x7D75;&#x63CF;&#x304D;&#x306B;&#x3082;&#x306A;&#x308C;&#x306A;&#x3044;&#x8005;&#x306E;&#x672B;&#x8DEF;</description>

<item>
<title>CentOS6/7 &#x3067; VPN &#x69CB;&#x7BC9;</title>
<description>
<![CDATA[
<p>今期のバントホームラン枠 <a href="http://showbyrock-anime.com/">SHOW BY ROCK!!</a> が毎週楽しみな mix3 です。</p>

<h3>CentOS6/7 で VPN 構築</h3>

<p>今までにも何回か VPN 構築に挑戦してその度に「上手くいかない」となって諦めるということを繰り返してたのですが、今回はどうにか成功したので忘れないうちにメモ。</p>

<p>openswan (for CentOS6) / libreswan (for CentOS7) (IPsec), xl2tpd(L2TP) でさくら VPS で VPN を構築した。</p>

<p>参考にしたサイト</p>

<ul>
<li><a href="https://gist.github.com/CLCL/5742738">CLCL / CentOS6-L2TP-IPsec.md - Gist</a></li>
<li><a href="http://blog.sotm.jp/2014/01/06/L2TPIPSec-VPN-Setup-for-CentOS65/">スクリプトで一発簡単！iPhone/Android/Mac/Windowsから接続可能なL2TP/IPSecなVPN環境を構築する&nbsp;-&nbsp;blog@sotm.jp</a></li>
<li><a href="http://orange.servecounterstrike.com/html/tomokaku_archives/2015/01/L2TP-IPSec-setup.html">CentOS7 PPTPを辞めてL2TP/IPSecに変更する - ともかくメモ</a></li>
<li><a href="http://qiita.com/mell3210/items/2fa2c9b616e4a2c685af">ipsec - linuxでVPNサーバ - Qiita</a></li>
<li><a href="http://techblog.clara.jp/2014/11/centos7_linux-router-by-firewalled/">CentOS7 第4回 はじめての firewalld で作る Linuxルータ &#8211; CLARA ONLINE techblog</a></li>
<li>etc...</li>
</ul>

<p>設定は <a href="http://blog.sotm.jp/2014/01/06/L2TPIPSec-VPN-Setup-for-CentOS65/">スクリプトで一発簡単！iPhone/Android/Mac/Windowsから接続可能なL2TP/IPSecなVPN環境を構築する&nbsp;-&nbsp;blog@sotm.jp</a> のスクリプトをほぼほぼそのまま使わせてもらっている。</p>

<p>以下ハマッたポイント</p>

<h3>VPNパススルー、またはIPsecパススルー</h3>

<p>今までずっと玉砕してた理由が多分これで、ブロードバンドルータのほうで NAT を突破出来るように設定しなければならず、大抵「VPN パススルー」または「IPsec パススルー」という名前で設定が用意されているので設定を有効にしないといけなかった。</p>

<p>NAT超えが出来ないとサーバに接続が到達しないのでログすら出力されず途方にくれるしかったので、今回どうにかルータで止まってるということに気付けて良かった。</p>

<h3>CentOS6 の openswan は yum で入れるとバージョンが低い</h3>

<p>openswan のバージョンによっては MacOSX でうまく接続出来ない問題があるっぽい</p>

<ul>
<li><a href="http://www.neobit.jp/archives/394">Openswan(IPSec VPN)がiPhoneから繋がらなくなった！ | 技術屋のあれやこれや</a></li>
</ul>

<p>なので、こんな感じで openswan を最新に更新してあげる必要があった。</p>

<p><code>$ wget https://download.openswan.org/openswan/openswan-latest.tar.gz -O /tmp/openswan-latest.tar.gz
$ mkdir /tmp/openswan-latest
$ tar xzf /tmp/openswan-latest.tar.gz -C /tmp/openswan-latest --strip=1
$ cd /tmp/openswan-latest
$ make programs
$ make install
</code></p>

<p>CentOS7 の libreswan ではそういう問題はないっぽい。</p>

<h3>conf の name は揃える必要がある</h3>

<p>/etc/ppp/options.xl2tpd
<code>name xl2tpd
</code></p>

<p>/etc/xl2tpd/xl2tpd.conf
<code>name = LinuxVPNserver
</code></p>

<p>/etc/ipsec.d/default.secrets</p>

<p><code>"hoge001" "xl2tpd" "hoge##123" *
"hoge002" "xl2tpd" "hoge##456" *
</code></p>

<p>これらの設定で <strong>LinuxVPNserver</strong> となってるところを <strong>xl2tpd</strong> にして名前を揃えないと接続がうまくいかなかった。（もしかしたら気のせいかもしれない）</p>

<h3>CentoOS7 のカーネル設定</h3>

<p>CentOS7 のカーネル設定は <strong>/etc/sysctl.d/*.conf</strong> にファイルを置いて設定するっぽいので <a href="http://orange.servecounterstrike.com/html/tomokaku_archives/2015/01/L2TP-IPSec-setup.html">CentOS7 PPTPを辞めてL2TP/IPSecに変更する - ともかくメモ</a> に従って</p>

<p>/etc/sysctl.d/10-sysctl_ipsec.conf
<code>net.ipv4.ip_forward = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.eth0.accept_redirects = 0
net.ipv4.conf.eth0.send_redirects = 0
net.ipv4.conf.lo.accept_redirects = 0
net.ipv4.conf.lo.send_redirects = 0
</code></p>

<p>として設定反映したあと <strong>ipsec verify</strong> するとおそらくこんな感じのが出てくる</p>

<p><code>Checking rp_filter                                   [ENABLED]
 /proc/sys/net/ipv4/conf/default/rp_filter          [ENABLED]
  rp_filter is not fully aware of IPsec and should be disabled
</code></p>

<p><strong>rp_filter</strong> もちゃんと無効にしろ ということなので、</p>

<p>/etc/sysctl.d/10-sysctl_ipsec.conf
<code>net.ipv4.ip_forward = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.eth0.accept_redirects = 0
net.ipv4.conf.eth0.send_redirects = 0
net.ipv4.conf.eth0.rp_filter = 0
net.ipv4.conf.lo.accept_redirects = 0
net.ipv4.conf.lo.send_redirects = 0
net.ipv4.conf.lo.rp_filter = 0
</code></p>

<p>として設定反映したあと <strong>ipsec verify</strong> するとなぜか変わらず ENABLED がでてくる。設定を確認するとなぜか反映されていない。</p>

<p><code>$ sysctl -a | grep -e net.ipv4.conf.*send_redirects -e net.ipv4.conf.*accept_redirects -e net.ipv4.conf.*rp_filter | grep -v arp
</code>
<code>net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.default.rp_filter = 1 &lt;= ここだけおかしい
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.eth0.accept_redirects = 0
net.ipv4.conf.eth0.rp_filter = 0
net.ipv4.conf.eth0.send_redirects = 0
net.ipv4.conf.lo.accept_redirects = 0
net.ipv4.conf.lo.rp_filter = 0
net.ipv4.conf.lo.send_redirects = 0
</code></p>

<p>上書きされてるっぽい雰囲気は感じるので、どこで何が設定されるか調べられないかとググったところ <strong>sysctl --system</strong> で見れるっぽいことが分かったので、試したところこんな感じになっており <strong>/usr/lib/sysctl.d/50-default.conf</strong> で上書きされてることが判明。</p>

<p><code>* Applying /usr/lib/sysctl.d/00-system.conf ...
net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 0
net.bridge.bridge-nf-call-arptables = 0
kernel.shmmax = 4294967295
kernel.shmall = 268435456
* Applying /etc/sysctl.d/10-sysctl_ipsec.conf
net.ipv4.ip_forward = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.lo.accept_redirects = 0
net.ipv4.conf.lo.send_redirects = 0
net.ipv4.conf.eth0.accept_redirects = 0
net.ipv4.conf.eth0.send_redirects = 0
* Applying /usr/lib/sysctl.d/50-default.conf ...
kernel.sysrq = 16
kernel.core_uses_pid = 1
net.ipv4.conf.default.rp_filter = 1 &lt;= ここで上書きされてる
net.ipv4.conf.default.accept_source_route = 0
fs.protected_hardlinks = 1
fs.protected_symlinks = 1
* Applying /etc/sysctl.d/99-sysctl.conf ...
* Applying /etc/sysctl.conf ...
</code></p>

<p>仕方ないので <strong>mv /etc/sysctl.d/10-sysctl_ipsec.conf /etc/sysctl.d/60-sysctl_ipsec.conf</strong> として上書きされるのを回避することでようやく ENABLED を除去出来た。</p>

<h3>CentOS7 では iptables ではなく firewalld</h3>

<p>CentOS7 では iptables ではなく firewalld でファイアーウォールを設定する。IPsec/L2TP で必要な設定は以下で良いかと思われる。</p>

<p><code>firewall-cmd --permanent --add-service=ipsec
firewall-cmd --permanent --add-port=1701/udp
firewall-cmd --permanent --add-port=4500/udp
firewall-cmd --permanent --add-masquerade
firewall-cmd --reload
</code></p>

<h3>CentOS7 では chkconfig, /etc/init.d/NAME COMMAND ではなく systemctl COMMAND NAME</h3>

<p>CentOS7 ではサービスの管理方法が変更されているので自動起動やサービスのスタートが以下のようになっている。</p>

<p><code>systemctl enable ipsec
systemctl enable xl2tpd
systemctl restart ipsec
systemctl restart xl2tpd
</code></p>

<h3>完成品がこちら</h3>

<p>CentOS7 の一発VPN構築スクリプト <a href="https://gist.github.com/mix3/efbaf5cb47946bff6f56">L2TP_IPSec_vpn_setup_for_centos7.sh</a></p>

<p><code>$ curl -L https://gist.githubusercontent.com/mix3/efbaf5cb47946bff6f56/raw/L2TP_IPSec_vpn_setup_for_centos7.sh | bash
</code>
or
<code>$ wget https://gist.githubusercontent.com/mix3/efbaf5cb47946bff6f56/raw/L2TP_IPSec_vpn_setup_for_centos7.sh
$ vim L2TP_IPSec_vpn_setup_for_centos7.sh
$ bash L2TP_IPSec_vpn_setup_for_centos7.sh
</code></p>

<p>とでもすると一発で構築VPNが構築出来ると思う。</p>

<h3>共有鍵ではなく公開鍵</h3>

<p>に出来たらいいなぁとか思ってるがそこまでは行けていない。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2015/05/09/20150509/</guid>
<pubDate>Sat,  9 May 2015 00:00:00 -0000</pubDate>
</item>
<item>
<title>&#x305D;&#x3046;&#x3060; docker&#x89E6;&#x308C;&#x308B;&#x74B0;&#x5883;&#x3092;&#x4F5C;&#x308D;&#x3046;</title>
<description>
<![CDATA[
<p>社内isuconで新卒にボッコボコにされたので、役立たずとして社内に居場所がなくなりそうです、mix3です。</p>

<p><a href="https://twitter.com/acidlemon">@acidlemon</a> 作 <a href="https://github.com/acidlemon/mirage">mirage</a> を「使ってテスト環境を立てまくるぜー」みたいなことが割と当たり前になりつつあって今関わってるプロジェクトもいずれはそうしたいなぁということがありまして。(CentOS6だと不都合があるっぽくてCentOS7に移行するなりそこクリアしてからだけど)</p>

<p>いざ「環境作れよ、あくしろよ」となっても困らないように練習しておこうと思い立って、持て余してるさくらvpsの一つをdocker専用にしてみた。ついでにCoreOSなんかも使ってみた。</p>

<h3>ISOのアップロードしてリモートコンソールを開く</h3>

<p>ところまでは <a href="http://qiita.com/yujiod/items/dc154120c4df2e938111">さくらのVPSにCoreOSをインストールしてDocker専用機にする - Qiita</a> を参考にした</p>

<h3>sshで繋ぐ</h3>

<p>ところは <a href="http://qiita.com/inTheRye/items/fea3c595cbc4f6f482b2">CoreOSをさくらVPSサーバに入れようとして嵌ったのでメモ - Qiita</a> を参考に /etc/systemd/network/static.network を作らずに以下を実行した</p>

<pre><code>sudo ifconfig &lt;network port&gt; &lt;ip address&gt; netmask &lt;netmask&gt;  
sudo route add default gw &lt;default gateway IP&gt;</code></pre>

<pre><code>$ sudo vi /etc/resolv.conf
nameserver &lt;DNS1&gt;</code></pre>

<h3>cloud-config</h3>

<p>も <a href="http://qiita.com/inTheRye/items/fea3c595cbc4f6f482b2">CoreOSをさくらVPSサーバに入れようとして嵌ったのでメモ - Qiita</a> を参考にした</p>

<pre><code>#cloud-config

coreos:  
  units:
    - name: static.network
      content: |
        [Match]
        Name=eth0

        [Network]
        Address=&lt;IPアドレス&gt;/&lt;サブネットマスク&gt;
        Gateway=&lt;ゲートウェイ&gt;
        DNS=&lt;DNS1&gt;
        DNS=&lt;DNS2&gt;

ssh_authorized_keys:
  - ssh-rsa ABCDABCDABCDABCDABCDABCDABCDABCDABCD...</code></pre>

<h3>CoreOS のインストールと reboot</h3>

<p>インストールは <a href="http://qiita.com/yujiod/items/dc154120c4df2e938111">さくらのVPSにCoreOSをインストールしてDocker専用機にする - Qiita</a> を参考に以下のようにした。 記事では -C alpha だけど -C stable にしておいた。</p>

<pre><code>$ sudo coreos-install -d /dev/vda -c cloud-config -C stable</code></pre>

<p>reboot は VPS の管理画面から。 sudo reboot とかすると再度 LiveCD で boot されてしまう。</p>

<h3>ログイン</h3>

<p>cloud-configの設定によって公開鍵が設定されてるはずなので、それでログイン出来るようになってるハズ。</p>

<h3>Docker 無しで mirage を動かしてみる</h3>

<p>最新の mirage を落としてくる <a href="https://github.com/acidlemon/mirage/releases/download/v0.2.0/mirage-v0.2.0-linux-amd64.zip">https://github.com/acidlemon/mirage/releases/download/v0.2.0/mirage-v0.2.0-linux-amd64.zip</a></p>

<p>解凍したら cp config_sample.yml config.yml して編集</p>

<pre><code>host:
  # web api host
  # you can use API and Web interface through this host
  # webapi: docker.dev.example.net
  webapi: mirage.sakura

  # host suffix
  # if you access to foo.dev.example.net, mirage search "foo" subdomain container
  reverse_proxy_suffix: .sakura

listen:
  # listen address
  # default is only listen from localhost
  foreign_address: 0.0.0.0

  # listen port and reverse proxy port
  http:
    # listen 8080 and transport to container's 5000 port
    - listen: 80
      target: 5000

  # not implemented
  # we recommend to use frontend http(like nginx) to SSL termination
  # HTTPS:
  #   - 443

docker:
  # if you use docker through http, specify like "http://localhost:4243"
  endpoint: unix:///var/run/docker.sock

  # if you specify this, fill the form as default value on web interface.
  # default_image: myapp:latest

storage:
  datadir: ./data
  htmldir: ./html</code></pre>

<p>で ./mirage として起動すると mirage.sakura でアクセスすると *.sakura で名前解決できるようになっていれば mirage の web interface が見える</p>

<h3>dnsmasq</h3>

<p>ドメイン持ってる場合は「*」でAレコード設定して mirage.sakura, .sakura をそれに合わせて設定すれば良いかと思う。持ってない場合は dnsmasq 使うと良い感じに名前解決が設定できるのでおすすめ。</p>

<p>brew install dnsmasq して指示に従って起動する</p>

<pre><code>$ brew install dnsmasq
$ cp /usr/local/opt/dnsmasq/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf
$ sudo cp -fv /usr/local/opt/dnsmasq/*.plist /Library/LaunchDaemons
$ sudo chown root /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
$ sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist</code></pre>

<p>設定はさっきの *.sakura であればこんな感じで良いかと思う。</p>

<pre><code>$ sudo vim /etc/resolver/sakura
nameserver 127.0.0.1</code></pre>

<pre><code>$ vim /usr/local/etc/dnsmasq.conf
address=/sakura/&lt;IP&gt;</code></pre>

<h3>Docker で mirage を起動する</h3>

<p>mirage は Dockerfile が用意されていて Docker で起動することもできるので試してみる。</p>

<p><a href="https://github.com/acidlemon/mirage/blob/master/docker/Dockerfile">Dockerfile</a> と <a href="https://github.com/acidlemon/mirage/blob/master/docker/config.yml">config.yml</a> を持ってきて config.yml を少し変更する</p>

<pre><code>host:
  # web api host
  # you can use API and Web interface through this host
  # webapi: docker.dev.example.net
  webapi: mirage.sakura

  # host suffix
  # if you access to foo.dev.example.net, mirage search "foo" subdomain container
  reverse_proxy_suffix: .sakura

listen:
  # listen address
  # default is only listen from localhost
  foreign_address: 0.0.0.0

  # listen port and reverse proxy port
  http:
    # listen 8080 and transport to container's 5000 port
    - listen: 8080
      target: 5000

  # not implemented
  # we recommend to use frontend http(like nginx) to SSL termination
  # HTTPS:
  #   - 443

docker:
  # if you use docker through http, specify like "http://localhost:4243"
  endpoint: unix:///var/run/docker.sock

  # if you specify this, fill the form as default value on web interface.
  # default_image: myapp:latest

storage:
  datadir: /mirage
  htmldir: /opt/mirage/html</code></pre>

<p>コンテナを起動するときのポートフォワードの設定に listen port を合わせておくのと storage をDocker 用のものに合わせておく。</p>

<p>あとは docker build, docker run するだけ</p>

<pre><code>$ docker build -t acidlemon/mirage:latest .
$ docker run -d --name mirage -p 80:8080 acidlemon/mirage:latest</code></pre>

<h3>あとは mirage を使うだけ</h3>

<p>予習完璧やで（完璧とは言っていない）</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2015/05/01/20150501/</guid>
<pubDate>Fri,  1 May 2015 00:00:00 -0000</pubDate>
</item>
<item>
<title>plantuml&#x306E;&#x30EA;&#x30A2;&#x30EB;&#x30BF;&#x30A4;&#x30E0;&#x30D7;&#x30EC;&#x30D3;&#x30E5;&#x30FC;</title>
<description>
<![CDATA[
<p><a href="http://plantuml.sourceforge.net/">plantuml</a> にはいつもお世話になっております。mix3です。</p>

<h3>リアルタイムプレビュー</h3>

<p>plantuml のサイトにリアルタイムプレビューはあってレスポンンスが早いので重宝するのですが</p>

<ul>
<li>広告がチラチラして邪魔</li>
<li>普通のフォームなのでインデント効かない
<ul>
<li>タブ使えない</li>
</ul></li>
<li>狭い</li>
</ul>

<p>と不満がなくもないので自前のプレビュー環境を作りたいな、とは過去に思ってやろうとしたもあるのですが、</p>

<p>plantumlのコマンドを使うとどうもフォーカスが移ってしまうらしくコンソールが前面に来るという問題があって諦めた経緯があります。</p>

<p>が、最近になってこんな記事を見つけました</p>

<p><a href="http://blog.yappo.jp/yappo/archives/000847.html">Mac + emacs + PlantUML でさくさく UML 職人</a></p>

<pre><code>JAVA_TOOL_OPTIONS="-Djava.awt.headless=true" watcher --dir ./uml/ -- 'java -jar /foo/bar/plantuml.jar ./uml/*.uml &amp;&amp; open -g -a Preview ./img/*.png'
</code></pre>

<p>どうやら JAVA_TOOL_OPTIONS="-Djava.awt.headless=true" で awt の設定を変更することでフォーカスの問題を回避出来るようです</p>

<p>ということで全然サクっとはいかなかったっけど作りました。</p>

<p><a href="https://github.com/mix3/plantumlor">plantumlor</a></p>

<h3>go-bindata-assetfs なるものがある</h3>

<p>goで静的ファイル配信をするときは <a href="http://golang.org/pkg/net/http/#FileServer">net/http/#FileServer</a> を使うと思うのですが <a href="https://github.com/jteeuwen/go-bindata">go-bindata</a> でまとめたときにどうしたらいいか、という問題があって、</p>

<p><a href="https://twitter.com/#!/fujiwara">@fujiwara</a> さんが記事にしていた <a href="http://sfujiwara.hatenablog.com/entry/2015/01/30/221553">Consul KVSをバックエンドにしたリアルタイムダッシュボード #monitoringcasual</a> では、http.Dir のところを自作していているようだったので、それを拝借しようかなと思ったのですが、</p>

<p>よくよく探してみると <a href="https://github.com/elazarl/go-bindata-assetfs">go-bindata-assetfs</a> という bindata の生成から対応しているものがあったのでそっちを使うようにしてみました。</p>

<h3>go-server-starter と manners</h3>

<p>別にいらないんだけど <a href="https://github.com/braintree/manners">manners</a> を使って graceful shutdown に対応させて <a href="https://github.com/lestrrat/go-server-starter">go-server-startar</a> を使って graceful restart も出来るようにしています。</p>

<pre><code>func serve(mux http.Handler) {
    l, _ := ss.NewListener()
    if l == nil {
        var err error
        l, err = net.Listen("tcp", fmt.Sprintf("%s:%d", host, port))
        if err != nil {
            log.Fatalf("Failed to listen to port %d", port)
        }
    }
    s := manners.NewServer()
    s.Serve(manners.NewListener(l, s), mux)
}
</code></pre>

<p>ちゃんと確認してないけど多分これでいけるはず</p>

<h3>WAF無し</h3>

<p><a href="http://nicolasmerouze.com/build-web-framework-golang/">Build You Own Web Framework In Go</a> を参考にWAF無しで作ってみました。</p>

<p>middleware のところで func を返すようにして <a href="https://github.com/justinas/alice">Alice</a> でメソッドチェインにするところとかなんかスマートな感じがして好き。</p>

<pre><code>func hogeHandler(next http.Handler) http.Handler {
    fn := func(w http.ResponseWriter, r *http.Request) {
        // before
        next.ServeHTTP(w, r)
        // after
    }
    return http.HandlerFunc(fn)
}

func hogeHandler(w http.ResponseWriter, r *http.Request) {
    // ...
}

func main() {
    commonHandlers := alice.New(hogeMiddleware)
    http.Handle("/about", commonHandlers.ThenFunc(hogeHandler))
    http.ListenAndServe(":8080", nil)
}
</code></pre>

<p>contextとか、サードパーティの routing ライブラリの組み込みとか色々参考になる。まあWAF使わない場合の話だけども。</p>

<h3>js-base64</h3>

<p>リアルタイムプビューを作る上で一番詰まったのが <a href="https://github.com/dankogai/js-base64">js-base64</a></p>

<ul>
<li>$.base64.encode(RawDeflate.deflate(Base64.utob("hoge"))
<ul>
<li>y8hPTwUA</li>
</ul></li>
<li>Base64.encode(RawDeflate.deflate(Base64.utob("hoge")))
<ul>
<li>w4vDiE9PBQA=</li>
</ul></li>
</ul>

<p>こんな感じで js-base64 を使うと encode の結果が違って「サーバで上手く解答出来ないむきーっ！！！」て半日潰してしまった。</p>

<p>結局 Base64.btoa(RawDeflate.deflate(Base64.utob("hoge"))) とすると大丈夫だった。encode と btoa って違うのん？と未だに良くわかっていません。</p>

<h3>react.js</h3>

<p>せっかくだから色々試さないと、ということで最初はjqueryでごりごりやるかなと思ったけど consul-kv-dashboard で <a href="http://facebook.github.io/react/">react.js</a> を使っているのを見て試してみました</p>

<pre><code>Content
┗ Editor
┗ Image
</code></pre>

<p>こんな感じで Component を用意</p>

<ul>
<li>Editor は onChange で textarea の入力内容を Content に通知</li>
<li>Content は1秒毎に変更をチェックして変更があったら Image を更新</li>
<li>Image は更新毎に渡された入力内容を元に rawdeflate と base64 (と / が混じるので _ にreplace) して url を生成して img タグを描画</li>
</ul>

<p>こんな感じで <a href="http://qiita.com/advent-calendar/2014/reactjs">一人React.js Advent Calendar 2014</a> の10日目あたりまでを参考にしてみた</p>

<p>コンポーネントはモデルを持っていて、どう描画したら良いかを知っているという点で wicket の View に近いなぁと感じた。もっとプレーンな html で構築出来たら最高だなぁって思った。</p>

<p>テンプレートエンジン的な考え方や、vue.js angular.js のような MVVM の感覚に慣れていると大分混乱するなぁってぐらい考え方が違ってて面白い。</p>

<p>どちらかというと angular.js よりも好みなのでもっとメジャーになるといいなぁ。</p>

<h3>ということで</h3>

<p>まとめて書き出してみるとなんか色々触った感があって楽しかった。react.js が今後どうなるか注目ですね。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2015/02/08/20150208/</guid>
<pubDate>Sun,  8 Feb 2015 00:00:00 -0000</pubDate>
</item>
<item>
<title>ORDER BY &#x3084; LIMIT &#x3092;&#x542B;&#x3080;&#x5834;&#x5408;&#x306E; select for update</title>
<description>
<![CDATA[
<p>最近 DBIC を使ってコードを書いてるけどオブジェクトの永続化の功罪について想いを馳せることが多いmix3です</p>

<pre><code>CREATE TABLE user_item (
  id           BIGINT  UNSIGNED NOT NULL AUTO_INCREMENT,
  user_id      INTEGER UNSIGNED NOT NULL DEFAULT 0,
  item_id      INTEGER UNSIGNED NOT NULL DEFAULT 0,
  is_equiped   TINYINT UNSIGNED NOT NULL DEFAULT 0,
  is_protected TINYINT UNSIGNED NOT NULL DEFAULT 0,
  INDEX idx_1 (user_id, item_id, is_protected),
  INDEX idx_2 (user_id, item_id, is_protected, is_equiped),
  INDEX idx_3 (user_id, item_id, is_protected, id),
  INDEX idx_4 (user_id, item_id, is_protected, is_equiped, id),
  PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARACTER SET utf8mb4;
</code></pre>

<p>こんなテーブルがあったとして、以下の優先順位で抽出したい</p>

<ul>
<li>is_protected = 1 は保護されているので除外</li>
<li>id 順に SELECT
<ul>
<li>ただし is_equiped = 1 は SELECT の対象だが装備してるので優先度を低く</li>
</ul></li>
</ul>

<p>このとき user_id = 1, item_id = 1 のものを 2個 SELECT する場合</p>

<pre><code>SELECT * FROM user_item
WHERE user_id = 1
AND   item_id = 1
AND   is_protected = 0
ORDER BY is_equiped, id ASC LIMIT 2;
</code></pre>

<p>多分こんなクエリになると思う　実際にINSERTして試してみる</p>

<pre><code>INSERT into user_item
  (user_id, item_id, is_equiped, is_protected)
VALUES
  (1, 1, 1, 1), -- 装備中 &amp; 保護されてる
  (1, 1, 1, 0), -- 装備中
  (1, 1, 0, 0),
  (1, 1, 0, 0),
  (1, 1, 0, 0),
  (1, 2, 0, 0);

mysql&gt; SELECT * FROM user_item WHERE user_id = 1 AND item_id = 1 AND is_protected = 0 ORDER BY is_equiped, id ASC LIMIT 2;
+----+---------+---------+------------+--------------+
| id | user_id | item_id | is_equiped | is_protected |
+----+---------+---------+------------+--------------+
|  3 |       1 |       1 |          0 |            0 |
|  4 |       1 |       1 |          0 |            0 |
+----+---------+---------+------------+--------------+
</code></pre>

<p>期待通り id:1 は除外 id:2 は優先度低いので id:3,4 が帰ってきている</p>

<h3>select for update</h3>

<p>トランザクション内で select for update するとロックしてくれる</p>

<pre><code>BEGIN;
SELECT * FROM user_item WHERE id = 1 FOR UPDATE;
</code></pre>

<p>ターミナルを二つ開いてそれぞれで上記SQLを流すと片方の SELECT が待たされる</p>

<p>ところで select for update に ORDER BY LIMIT が含まれる場合はどうなるのだろうか？</p>

<pre><code>SELECT * FROM user_item FORCE INDEX (idx_N)
WHERE user_id = 1
AND   item_id = 1
AND   is_protected = 0
ORDER BY is_equiped, id ASC LIMIT 2 FOR UPDATE;
</code></pre>

<p>したあとに</p>

<pre><code>SELECT * FROM user_item WHERE id = N FOR UPDATE;
</code></pre>

<p>を idx_1~4, id = 1 ~ 6 まで試してみた</p>

<table border="1">
    <thead>
        <tr>
            <th>

            </th>
            <th>
                id=1
            </th>
            <th>
                id=2
            </th>
            <th>
                id=3
            </th>
            <th>
                Id=4
            </th>
            <th>
                id=5
            </th>
            <th>
                id=6
            </th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>
                idx_1
            </th>
            <td>

            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>

            </td>
        </tr>
        <tr>
            <th>
                idx_2
            </th>
            <td>

            </td>
            <td>

            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>

            </td>
            <td>

            </td>
        </tr>
        <tr>
            <th>
                idx_3
            </th>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>

            </td>
        </tr>
        <tr>
            <th>
                idx_4
            </th>
            <td>

            </td>
            <td>

            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>

            </td>
            <td>

            </td>
        </tr>
    </tbody>
</table>

<p>こんな感じになった</p>

<p>ORDER BY や LIMIT などを含む select for update も index を張っていればロック範囲を最小限に抑えらえるようだ</p>

<p>ただ idx_3 は id=1 までロックされて変な index を張るとロックの範囲も変な感じになるようだ</p>

<p>idx_2 が idx_4 と同じ最小範囲のロックをしているのは id が primary key だからだろうか？</p>

<h3>結論</h3>

<p>index は大事</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2015/01/24/20150124/</guid>
<pubDate>Sat, 24 Jan 2015 00:00:00 -0000</pubDate>
</item>
<item>
<title>DBIC&#x306E;prefetch</title>
<description>
<![CDATA[
<p>洒落になっていない勢いで無能を晒して首が飛びそうになってます 皆さんいかがお過ごしでしょうか mix3 です。</p>

<p>今回は「クエリ飛びすぎなので where in して prefetch しましょう」と言われてwhere inはわかるけどprefetchはなんぞ？となったのでとりあえずサンプル書いてみました。</p>

<h3>例えば</h3>

<p><img src="https://raw.githubusercontent.com/mix3/dbic-prefetch-sample/master/docs/er.png" alt="erd" width="100%" /></p>

<ul>
<li>ユーザがいる</li>
<li>装備がある</li>
<li>ユーザは装備を複数持っている</li>
<li>ユーザはアバターを複数持っている</li>
<li>アバターは複数の装備セットを持っている</li>
<li>装備セットは頭,体,足の装備を持っている</li>
</ul>

<p>こんな感じでなんかアバターがあって着せ替えが出来る、着せ替えさせやすいようにセットが作れるようになってるみたいな。</p>

<p>で、このとき50人のユーザの現在装備している装備のidを持ってこいとなったとき愚直にやると多分こんな感じ</p>

<pre><code>subtest simple =&gt; sub {
    my @sqls = trace_sqls {
        for my $user_id ( 1 .. 50 ) {
            my $user_row = schema-&gt;resultset('User')-&gt;find($user_id);
            $user_row-&gt;current_ua;
            $user_row-&gt;current_ua-&gt;current_uae_set;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae-&gt;ae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae-&gt;ae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae-&gt;ae;
        }
    };
    pass sprintf "count: %d", scalar(@sqls);
};
</code></pre>

<p>450クエリ飛ぶ</p>

<p>where in を使ってユーザを取ってくるところを1クエリに絞ると</p>

<pre><code>subtest "where in" =&gt; sub {
    my @sqls = trace_sqls {
        my @ids = 1 .. 50;
        my $user_rs = schema-&gt;resultset('User')-&gt;search( { id =&gt; { -in =&gt; \@ids } } );
        while ( my $row = $user_rs-&gt;next ) {
            $row-&gt;current_ua;
            $row-&gt;current_ua-&gt;current_uae_set;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae-&gt;ae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae-&gt;ae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae-&gt;ae;
        }
    };
    pass sprintf "count: %d", scalar(@sqls);
};
</code></pre>

<p>401クエリ飛ぶ where in で50クエリほど減る。</p>

<p>ここでprefetchを使うと</p>

<pre><code>subtest "where in + prefetch" =&gt; sub {
    my @sqls = trace_sqls {
        my @ids = 1 .. 50;
        my $user_rs = schema-&gt;resultset('User')-&gt;search(
            { 'me.id' =&gt; { -in =&gt; \@ids } },
            { prefetch =&gt; {
                    current_ua =&gt; {
                        current_uae_set =&gt; {
                            head_uae =&gt; 'ae',
                            body_uae =&gt; 'ae',
                            leg_uae =&gt; 'ae',
                        },
                    },
                },
            }
        );
        while ( my $row = $user_rs-&gt;next ) {
            $row-&gt;current_ua;
            $row-&gt;current_ua-&gt;current_uae_set;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae-&gt;ae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae-&gt;ae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae-&gt;ae;
        }
    };
    pass sprintf "count: %d", scalar(@sqls);
};
</code></pre>

<p>1クエリになる</p>

<p><a href="https://github.com/mix3/dbic-prefetch-sample">dbic-prefetch-sample</a></p>

<p>prefetchの前にjoinというそのままのものもあるけど、joinはjoinしたテーブルの情報は返ってこないので今回のようにjoinした先のデータも必要だったらprefetchを使うと良いっぽい</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/12/21/20141221/</guid>
<pubDate>Sun, 21 Dec 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>&#x795D;&#x65E5;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x5B8C;&#x5168;&#x306B;&#x5FD8;&#x308C;&#x3066;&#x51FA;&#x793E;</title>
<description>
<![CDATA[
<p>してしまったmix3だよ!</p>

<blockquote class="twitter-tweet" lang="ja"><p>あー今日祝日やん！</p>&mdash; 衣玖さんは天子の嫁 (@mix3) <a href="https://twitter.com/mix3/status/529066233010745344">2014, 11月 3</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>そして意識高いのか社畜なのか良くわからないこと呟いたけど</p>

<blockquote class="twitter-tweet" lang="ja"><p>まあいいや オフィス開いてたらすこし仕事してこ</p>&mdash; 衣玖さんは天子の嫁 (@mix3) <a href="https://twitter.com/mix3/status/529066997594611712">2014, 11月 3</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>当然オフィスに誰も居なかったので一人で仕事とか寂しくて死ぬので速攻で帰ったよ!とんでもないクズ野郎だね!</p>

<h3>こんな悲しみ繰り返さないために</h3>

<p>切実に祝日リマインダーが必要だと感じたので以前作った<a href="http://mix3.github.io/blog/2014/06/15/20140717_01/">リマインダアプリ</a>(<a href="https://github.com/mix3/go-rocket-sample-app">github</a>)に祝日も自動で通知するみたいなの追加したいなぁとか思った</p>

<p>で、golangで祝日を取得する方法無いかなぁと適当にググったら見つからない(本当に適当にググっただけなのでちゃんと探したらあるかもしれない)ので<a href="http://d.hatena.ne.jp/fbis/20070616/1181993102">国民の祝日の名称を取得するモジュール</a>(<a href="http://coderepos.org/share/browser/lang/perl/DateTime-Holiday-Japanese">coderepos</a>)をgolangに移植したんだけど、それだけで一日潰してしまって祝日リマインダー出来ませんでした!</p>

<p>また祝日に出勤してしまうかもしれない! やばい!!!</p>

<h3>追記</h3>

<p>githubへのリンク貼ってなかったよ!おっちょこちょいだね!</p>

<p><a href="https://github.com/mix3/go-holiday">go-holiday</a></p>

<p>無駄にDriverの仕組みを入れてるので日本の祝日以外の実装も追加しやすいよ!多分ね!</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/11/03/20141103/</guid>
<pubDate>Mon,  3 Nov 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>YAPC::Asia 2014 &#x611F;&#x60F3; #yapcasia</title>
<description>
<![CDATA[
<p>YAPC童貞卒業だよ！mix3です。</p>

<p>YAPC１日目だけ参加してきました。２日目は本番化業務があったのでおとなしく自宅作業してました。</p>

<p>聞いたのは以下の通り。ライブコーディングはイベントホールで勝手にやってる奴だったので、休憩がてら途中から見てましたが非常にgdgdで楽しかった。</p>

<h3><a href="http://yapcasia.org/2014/talk/show/103a434e-ec02-11e3-bd6d-c7a06aeab6a4">Perl meets Real World 〜ハードウェアと恋に落ちるPerlの使い方〜</a></h3>

<p><a href="https://twitter.com/mackee_w">@mackee_w</a>さんによる発表</p>

<p>perlとハードウェアの話っぽいタイトルだけど、perl全く関係ないしネギ振るハズだったのに振れなくて「後でイベントホールに来てください本物のネギ振りをお見せしますよ」的な感じで終わったのが面白かった。</p>

<p>ソフトウェアに比べてハードウェアは現物が無いといけないので単純にハードルが高いのだが、Raspberry PiやらArduinoやらのおかげでその辺りのハードルが下がってきてる感じが伝わってくる内容だった。</p>

<p>あとはテストが難しいというのをどう解決してくかというのが課題のようだ。（個人的な理解だが、おそらく動かして試すしか無いからというのがあるのだと思う）</p>

<ul>
<li><a href="http://mackee.hatenablog.com/entry/2014/09/02/234152">YAPC::Asia 2014に行ってきました&amp;喋ってきました #yapcasia</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/4c7651e8-ed53-11e3-9faf-6ba36aeab6a4">完成されたシステムなどない。完成された人間もいない。あるのは成長し続ける未完成なシステムと、それを支える未完成な人間だけだ</a></h3>

<p><a href="https://twitter.com/kenjiskywalker">@kenjiskywalker</a>さんによる発表</p>

<p>「リハーサルでは20分で終わったのでゆっくり話します」と言って始めたのに結局20分で終わって、残り20分のうち10分をトークショーで乗り切るという</p>

<p>「さすがけんじさんだ、俺たちに出来ない事を平然とやってのける！そこに痺れる憧れる〜！」</p>

<p>な感じの発表だった。さすがです。</p>

<p>内容自体はなんというか、理想とされるシステムの成長の姿を追体験形式で語るみたいな感じだった。</p>

<p>根底としてイミュータブルな世界が来てて理想とされてるシステムの姿（適切に分割されて継続しやすい状態）を実現しやすくなってるから頑張りましょうということなのかなと思っている。</p>

<ul>
<li><a href="http://blog.kenjiskywalker.org/blog/2014/08/31/yapcasia2014/">#yapcasia 2014 に発表者として参加してきたこと</a></li>
<li><a href="http://blog.kenjiskywalker.org/blog/2014/08/29/yapcasia2014-cosmo/">#yapcasia 2014 でシステムとの時間の旅の話をしてきました</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/66c55626-eba9-11e3-bd6d-c7a06aeab6a4">お待たせしました。Perl で BDD を簡単に実践する最高にクールなフレームワークができました</a></h3>

<p><a href="https://twitter.com/tokuhirom">@tokuhirom</a>さんによる発表</p>

<p><a href="http://search.cpan.org/~mschwern/Test-Simple-1.005000_006/lib/Test/Builder2.pm">Test::Builder2</a>がポシャったようなので、仕方ないから<a href="http://search.cpan.org/~tokuhirom/Test-Kantan/">Test::Kantan</a>を作った！使ってね！</p>

<h3><a href="http://yapcasia.org/2014/talk/show/9e3ced48-027f-11e4-9357-07b16aeab6a4">作られては消えていく、泡のように儚いクラスタの運用話</a></h3>

<p><a href="https://twitter.com/toritori0318">@toritori0318</a>さんによる発表</p>

<p>テレビの配信でクラスタの運用をしていて、辛くなるたびに対応してきたという話。</p>

<p>Webとは違って明確にトラフィックが増えるタイミングが分かるので、クラスタ作りまくってその日のうちに消すみたいなのが当たり前に行われているらしい。知らない世界がそこには広がってるなぁと技術的なところは全く分からないので漫然とそんなふうに思いながら聞いていた。</p>

<p>本番怖い。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/toritori0318/20140831">YAPC::Asia2014 レポート #yapcasia</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/a88619fc-034a-11e4-9357-07b16aeab6a4">Git を使ったツール開発</a></h3>

<p><a href="https://twitter.com/motemen">@motemen</a>さんによる発表</p>

<p>申し訳ないけど内容覚えていない…</p>

<p>「<a href="https://github.com/motemen/git-unify">git-unify</a>を作ってくっそ便利だけど、リポジトリぶっ壊れる可能性あるので使う時は気を付けてね」というのだけ覚えてる。</p>

<ul>
<li><a href="http://motemen.hatenablog.com/entry/2014/08/29/talked-at-yapc-asia-2014">YAPC::Asia 2014 で「Git によるツール開発」というタイトルで話しました #yapcasia</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/event/show/ded623dc-1eaa-11e4-a257-34526aeab6a4">ライブコーディング 2014</a></h3>

<p><a href="https://twitter.com/songmu">@songmu</a>さんによるライブコーディング。</p>

<p><a href="https://twitter.com/moznion">@moznion</a>「進捗、どうですか？」</p>

<p><a href="https://twitter.com/songmu">@songmu</a>「進捗、ダメです」</p>

<p>とかやっててくっそ笑ってた。gdgd。楽しかった。</p>

<ul>
<li><a href="http://www.songmu.jp/riji/entry/2014-08-31-yapc.html">今年のYAPC::Asia Tokyo #yapcasia</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/75894e02-025f-11e4-9357-07b16aeab6a4">O2O/IoT/Wearable時代におけるWeb以外のネットワーク技術入門</a></h3>

<p><a href="https://twitter.com/lyokato">@lyokato</a>さんによる発表</p>

<p>ネットワークの話興味あって聞きに行ったけど、発表が物理的に早すぎたのと、内容難しすぎて全く理解出来ずに終わった。</p>

<p>Web以外の知識無さ過ぎてダメだなぁってなった。精進しないといけない。</p>

<ul>
<li><a href="http://atl.recruit-tech.co.jp/blog/2552/">O2O/IoT/Wearable時代におけるWeb以外のネットワーク技術(MQTT/BluetoothLE)について、YAPC::Asia Tokyo 2014で発表してきました</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/250b85d0-02a0-11e4-9357-07b16aeab6a4">Mojoliciousを使ったwebアプリケーション開発 実践編</a></h3>

<p><a href="https://twitter.com/torii704">@torii704</a>さんによる発表</p>

<p>ネットワークの話で頭がパーンしたので休憩がてら軽めの内容と思われるものを…、ということで聞いてみた。</p>

<p>Webアプリ開発入門みたいな感じでMojoliciousをベースにざざっと説明するような感じの発表。Containerの説明、永続化する話を後に持ってきてたせいで「この説明を真に受けたら危険では？」みたいな感じてハラハラしたり、MVCのMの説明っぽいところで「ん？」てなったりしたけど概ね「まあそんな感じよね」と頷きながら聞いていた</p>

<h3><a href="http://yapcasia.org/2014/talk/show/8f7ead9a-ebba-11e3-bd6d-c7a06aeab6a4">Java For Perl Mongers</a></h3>

<p><a href="https://twitter.com/Yappo">@Yappo</a>さんによる発表</p>

<p>型があるってのは良いこと。冗長になるが同時にそれは変な記述をさせない制限になるので余計なバグを仕込みにくい（例えば型名ミスなどのtypoとか発生しない）</p>

<p>Javaは面白みが無い普通の言語だけど型の良さをちゃんと持ってるので、LLで育ってた人はちゃんとそういうの理解してJavaをdisったほうが良いよ。</p>

<p>という感じでJava賛美っぽい話のまま終わって面白かった。Java好きな人間なので聞いてて終止うんうん頷いてた。</p>

<h3><a href="http://yapcasia.org/2014/talk/show/63144efa-0c8e-11e4-bd05-9c796aeab6a4">Lightning Talks Day 1</a></h3>

<p>印象に残ったのが<a href="https://twitter.com/maka2_donzoko">まかまか</a>さんには家族離散にならない程度にAcme大全続けていって頂きたいなぁというのと、<a href="https://twitter.com/gugod">@gugod</a>さんかな？英語で発表しててすっごい大真面目なビジュアライゼーションの話してたと思うんだけど、みんな「すげーすげー」言いまくってるなか自分全く英語が分からなくてぽかーんってして聞いてた。英語頑張ろう…ほんと…</p>

<h3>まとめ</h3>

<p>「次もあれば行きたい」と思うぐらいには楽しかった。</p>

<p>ただ部屋の移動時間が一切考慮されていないスケジューリングぽかったのと、居座り組と後は早い者勝ちみたいな感じになってたのはなんか微妙な感じなのと、「もう部屋がぱんぱんで聞けないしイベントホール行って暇潰すか」ということが少なからずあったのがちょっと残念だった。部屋を単純に大きいのにするわけにもいかないと思うので改善するのは難しいと思うけどなんとかしてほしいなと思う。</p>

<p>そして個人的に翻訳聞くレシーバが初日１機遭難してたやつ、その後救助されたのか気になっている（１機４万とか言ってたので紛失とか運営としては正直笑えない話）</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/09/03/20140903_01/</guid>
<pubDate>Wed,  3 Sep 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>rocket</title>
<description>
<![CDATA[
<p>衣玖さんが好きすぎて、最近は衣玖さんの人としてチームメンバーからは認識されているようです。（衣玖さん結婚しよ）mix3です。</p>

<h3>サンプルアプリ</h3>

<p>社内的にgolangを使って行こうか、という流れが出来ていてその流れの中で <a href="https://twitter.com/#!/acidlemon">@acidlemon</a> さん作のWAF、<a href="https://github.com/acidlemon/rocket">rocket</a>が出てきたので使い方の勉強もかねて早速それのサンプルアプリを作ってみました</p>

<h3>リマインダアプリ</h3>

<p>うちの社内IRCではお願いすると指定日時にメンションを飛ばしてくれるremember君というbotが生息してるのですが、それのメール版のようなイメージで作りました</p>

<p>指定アドレスにメールして登録、指定日時にメールが飛んでくるだけの簡単なwebアプリです</p>

<p>世の中便利なもので、<a href="http://www.cloudmailin.com/">指定アドレスにメールが来ると指定URLにPOSTしてくれるサービス</a>（つまりSMTPいらない）があったり、<a href="http://www.mailgun.com/">1日10000通までメール送信出来るサービス</a>（つまりSMTPいらない）があって、herokuとかと組み合わせることで簡単な物なら無料でメールを使ったサービスが作れてしまうようです</p>

<p>物はこちら <a href="https://github.com/mix3/go-rocket-sample-app">go-rocket-sample-app</a> <a href="http://secure-sierra-2582.herokuapp.com/">http://secure-sierra-2582.herokuapp.com/</a></p>

<h3>リマインダ登録までの流れ</h3>

<p>一応登録されたメールアドレス以外のリマインダ登録は受け付けないようにしたかったので、</p>

<ul>
<li>アドレス登録のアドレスに対して空メールすると、仮登録され本登録のURLが返信される</li>
<li>URLを踏むと本登録が完了する</li>
<li>リマインド登録のアドレスに対して、件名に日時指定、本文にリマインドの内容を書いて送ると登録される（認識する日時指定はだいたい以下の通り）
<ul>
<li>12:34</li>
<li>07-01 12:00</li>
<li>2014-07-01 23:59</li>
</ul></li>
</ul>

<p>な感じで動く様になっています　アドレス登録後はリマインド登録用のアドレスを保存しておいて使うことを想定しています</p>

<h3>ということで</h3>

<p><a href="https://github.com/acidlemon/rocket">rocket</a>のサンプルアプリでした</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/06/15/20140717_01/</guid>
<pubDate>Sun, 15 Jun 2014 18:00:00 -0000</pubDate>
</item>
<item>
<title>go&#x7248;ikachan&#x306E;github.com/mix3/go-ikusan&#x3092;&#x4F5C;&#x3063;&#x305F;&#x8A71;</title>
<description>
<![CDATA[
<blockquote class="twitter-tweet" lang="ja"><p>衣玖さん芸人に!!!俺はなるっ!!!（海賊王的なノリで</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/475532375305109504">2014, 6月 8</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>最近p5-Ikusanを作ったり、それで衣玖さんのIRCボット作ったりして衣玖さんへのロマンティックが止まらないmix3です</p>

<h3><a href="https://github.com/mix3/go-ikusan">github.com/mix3/go-ikusan</a>と<a href="https://github.com/mix3/go-irc">github.com/mix3/go-irc</a></h3>

<p>最近golangを触ってる事が多いのですが（絶賛開発中の社内アプリがgolangだけどそっちにはあんまり関わってなかったりする）</p>

<p>適当になんか作りたいなぁと思っていたところに最近衣玖さんへの愛が溢れ出してきてたので、そりゃ「go版ikachan作ろう」となるのは自然な事ですよね</p>

<p>でgoでircってどう触るんだろうとgithubを漁ったところ</p>

<ul>
<li><a href="https://github.com/thoj/go-ircevent">github.com/thoj/go-ircevent</a></li>
<li><a href="https://github.com/fluffle/goirc/tree/master">github.com/fluffle/goirc</a></li>
</ul>

<p>辺りがirc触るためのライブラリとして有名どころなのかなぁということが分かって、その辺り使って作ろうとしたのですが、</p>

<blockquote class="twitter-tweet" lang="ja"><p>go-ikusanのためにgo-irceventの中追いかけてるがエラー検知からのリコネクト処理がダメだこりゃ close(end)して各イベントチャンネルをwaitgroupで待ってるけど、socketのreadで待ってるからtimeoutするまで待ち続けてる</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476224165708451840">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" lang="ja"><p>preadってチャンネル用意してるのにどこにも使ってなくて多分これはsocketから1行読んで解釈するのと、それをcallbackに投げるのを分離するためものだと思うけど、まだ未実装ってことなのかな</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476225950380597248">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" lang="ja"><p>go-ircevent、groupwaitしてるのsocketを安全に閉じるのを保証するためだと思うけど、socketのreadで待ち続けるのもなんとも言えないなぁ</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476226654398709761">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" lang="ja"><p>Errorチャンネルをselectで待ってて、検知したらdisconnectするけどそのdisconnectの中でさらにErrorを投げてるの結構ワンダーな感じする</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476227286870392832">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>とか</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="http://t.co/jXGwN4arHz">http://t.co/jXGwN4arHz</a> がエラーハンドリングちゃんとしてそうだけど、flag要求されて非常に使いづらい</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476228862263570434">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>とかでなんか微妙に使いづらいなぁとなってしまい、じゃあいっそそっから作るかということで両方の間の子みたなの作ったりしました。<a href="https://github.com/mix3/go-irc">github.com/mix3/go-irc</a></p>

<p>出来るだけ薄くしておきたかったのと、IRCについて知識はまるでないので難しいことはしないようにしたかったので</p>

<ul>
<li>ircサーバへのリクエストが出来る</li>
<li>ircサーバからのレスポンスを受け取れる</li>
<li>ircサーバからのレスポンスを元にコールバックを呼ぶがディスパッチャみたいなことはしない</li>
<li>ircサーバからのレスポンスのtimeoutを待たずに落ちる事が出来る</li>
<li>落ちたタイミングで何かしたいこともあるだろうから、別途落ちたタイミングでコールバックを呼ぶようにする</li>
<li>flagは使わない</li>
<li>loggerはデフォルトで<a href="https://github.com/umisama/golog">github.com/umisama/golog</a>を使うけどinterfaceが定義されてるので差し替え出来るハズ</li>
</ul>

<p>ぐらいを満たすような感じで<a href="https://github.com/thoj/go-ircevent">github.com/thoj/go-ircevent</a>と<a href="https://github.com/fluffle/goirc/tree/master">github.com/fluffle/goirc</a>からコピペしたりしなかったりしました</p>

<p>たまに落ちるときにWaitしたまま帰ってこないみたいなことがある感じなので、明らかにここマズいとかあったらプルリクあると嬉しいです</p>

<p>で、これを元にgo版<a href="https://github.com/yappo/p5-App-Ikachan">ikachan</a>こと<a href="https://github.com/mix3/go-ikusan">go-ikusann</a>を作りましたとさ</p>

<p>とってもキュートな衣玖さんがお出迎えしてくれるwebインタフェースも作ってやはり衣玖さんは最高だなって思いました</p>

<blockquote class="twitter-tweet" lang="ja"><p>go-ikusanのwebインタフェース作った　衣玖さんマジかわ <a href="http://t.co/sAcXgUZJP1">pic.twitter.com/sAcXgUZJP1</a></p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/477786314641657857">2014, 6月 14</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>なおAAの画像は「衣玖 AA」で検索して見繕ったAAなので著作権的に問題あったら非常に心苦しいですが消します</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/06/15/20140615_03/</guid>
<pubDate>Sun, 15 Jun 2014 18:00:00 -0000</pubDate>
</item>
<item>
<title>&#x30D6;&#x30ED;&#x30B0;&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x3092;&#x5909;&#x3048;&#x3066;&#x307F;&#x308B;</title>
<description>
<![CDATA[
<p>テンプレートは気に入っていて変えたくないのでその辺りは出来るだけそのままを保ちつつ、レスポンシブデザインってどうやるんだろうなと思いながらいじいじしてて数ヶ月経ってしまいこのままだともう日の目を見る事が無さそうな感じしたのでえいやで更新してしまいました</p>

<p>それにともない記事のhtmlを一カ所にまとめる様に変更（記事生成後再生成でゴミが残るので面倒になった）それにともないパーマリンクが変更になるという鬼畜ぶりに我ながら身震いしたけどどうせブクマしてる人も全然いないし自分のブログだし好きにすることにした　404のカスタムhtmlでjs使って多少の誘導ぐらいは出来る様にしたいとは思ってるけどやらないかも</p>

<p>ということで気分も新たにブログたまには書いて行きたい</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/06/15/20140615_02/</guid>
<pubDate>Sun, 15 Jun 2014 17:15:00 -0000</pubDate>
</item>
</channel>
</rss>
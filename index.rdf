<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
 xmlns:blogChannel="http://backend.userland.com/blogChannelModule"
>

<channel>
<title>萌えキャラとは何だったのか</title>
<link>http://mix3.github.io</link>
<description>ギークにも絵描きにもなれない者の末路</description>

<item>
<title>phpenv+php-buildでphpをinstallしまくる</title>
<description>
<![CDATA[
<p>正確にはfpmとnginxで複数バージョンでも幸せになれる開発環境作り mix3です</p>

<p>phpenvとphp-buildは以下のサイトを見てインストールするための環境は出来てる前提のお話</p>

<p><a href="http://d.hatena.ne.jp/hnw/20130626">php-buildで複数バージョンのPHP-FPMを用意する</a></p>

<h3>tidyで怒られる</h3>

<p>homebrewで入れた場所が見れてないっぽくてこんなとき --with-tidy オプションにパス指定したいわけですが</p>

<p>php-buildでconfigureオプションを弄りたい場合は以下のファイルを弄る感じになるみたい</p>

<ul>
<li>~/.phpenv/plugins/php-build/share/php-build/default_configure_options
<ul>
<li>デフォルトのcongifureオプション設定</li>
</ul></li>
<li>~/.phpenv/plugins/php-build/share/php-build/definitions/*
<ul>
<li>バージョン別のインストール設定</li>
</ul></li>
</ul>

<p>良く見かけるのは~/.phpenv/plugins/php-build/share/php-build/default_configure_optionsを書き換えちゃうというものですが</p>

<p>オプションそんな知らないし他バージョンのインストールに影響するのとかどうなんだと思うので、だったらphp-buildが提供するdefaultを崩さない感じでやりたいなと</p>

<p>そんなときは</p>

<pre><code>configure_option    OPTION VALUE -- add
configure_option -D OPTION       -- delete
configure_option -R OPTION VALUE -- replace
</code></pre>

<p>こんな感じになってるっぽいので目的のバージョンのdefinitionsを別名でコピって configure_option -R "--with-tidy" "/usr/local" を追記すれば良いっぽかった</p>

<h3>5.5snapshot入れようとするとbisonで怒られる</h3>

<p>バージョンが古いっぽいとかな感じだったのでbrew install bisonして入れてもまだ古いと怒られてしまった</p>

<p>これもまたhomebrewで入れたのが見えてない感じでそれもそのはず /usr/local/Celler/bison/{version} に入れられた後 /usr/local/opt/bison にリンクが貼られていた</p>

<p>例のごとくMac標準と競合してトラブルのもとだからという奴で LDFLAGS:  -L/usr/local/opt/bison/lib 指定しろよ的な奴だが、</p>

<p>php-buildでLDFLAGSの指定の仕方とかわからんちんだったので、トラブルとか知るかと /usr/local 以下にリンク貼ってしまってインストール</p>

<p>brew で入れた bison 3.0 だとバージョン高すぎるようだったので <a href="http://blog.sarabande.jp/post/53780323365">homebrew で標準のバージョンよりも古い bison をインストールする</a> を見ながら 2.7 を入れると今度こそインストール完了</p>

<p>バージョンを確認したら 5.6.0-dev だった なんでやねーん</p>

<p>github の master から入れてたので <a href="http://snaps.php.net/php5.5-latest.tar.bz2">php5.5-latest</a> から直接入れてみたけどやっぱり 5.6.0-dev だった なんでやねーん</p>

<h3>ということで</h3>

<p>5.5の最新は5.6でしたというオチがついたところでちゃうねんそうやないねん</p>

<p>うちが本当にやりたかったのはAdminGeneratorって最近のどうなってるんかなって知りたかってんって</p>

<p>【追記】php5.5-latestのほうはその前のインストールでダウンロードされたものが残っていてそのまま使われてしまったのが原因ぽかった でも5.5snapshotはやっぱり5.6だった</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/10/07/20131007/</guid>
<pubDate>Mon, 07 Oct 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>自分がもしIRCボットっぽいもの作ったとしたら</title>
<description>
<![CDATA[
<p>こうなるなぁというメモ</p>

<h3>ただ世の中にはボット用のモジュールやらなんやらは既にある</h3>

<p>IRCボットとか誰もが考えるし適当に作って捨てて行くので当然そのうちフレームワークっぽいものも出てくる 例えば<a href="http://www.songmu.jp/riji/entry/2013-09-09-unazusan.html">UnazuSan</a>とか</p>

<p>こういうは用途に合っていれば良いし、正規表現だしグループで捕まえたのを後方参照出来るしで大体がカバー出来そうだけど、</p>

<p>例えば「開発環境で使ってるバッチスクリプトをオプション指定しつつ実行するをIRCからやりたい」とか糞みたいな要求には向かなそうだなぁとか思ったり</p>

<h3>無ければ作れば良いじゃない</h3>

<pre><code>#!/usr/bin/env perl

use Ikusan
  'server url',
    port       =&gt; &lt;port&gt;,
    enable_ssl =&gt; 1,
    password   =&gt; &lt;password&gt;,
    nickname   =&gt; &lt;nickname&gt;,
    channels   =&gt; { '#channel_name' =&gt; {} };

# undef_message "およよ…";

register qr/regexp?/ =&gt; sub {
    my (%opts) = @_;
    return $opts{error} ? (1, "エラー") : (0, "オッケー");
} =&gt; qw/
    error
/;

register simple =&gt; sub {
    my (%opts) = @_;
    return $opts{error} ? 1 : 0;
} =&gt; qw/
    error
/;

register "die" =&gt; sub { die "ぱっつんぱっつん" };

use LWP::UserAgent;

register pixiv =&gt; sub {
    my $ua  = LWP::UserAgent-&gt;new;
    my $res = $ua-&gt;get("http://www.pixiv.net/");
    my @url = ($res-&gt;content =~ /"(member_illust\.php.+?)"/g);
    my $ret = "http://www.pixiv.net/" . $url[int(rand(scalar(@url)))];
    return 0, $ret;
};

register qr/サタデーナイト/ =&gt; sub {
    return 0, "フィーバー!!";
};

fever;
</code></pre>

<p>こんな感じで AnySan に渡すオプションを指定しつつ use Ikusan して regsiter で sub 登録して最後に fever すれば</p>

<pre><code>mix3 &gt; iku: regex
 iku &gt; [OK] オッケー
mix3 &gt; iku: regexp
 iku &gt; [OK] オッケー
mix3 &gt; iku: regex --error
 iku &gt; [ERR] エラー
mix3 &gt; iku: regexp --error
 iku &gt; [ERR] エラー
mix3 &gt; iku: simple
 iku &gt; [OK]
mix3 &gt; iku: simple --error
 iku &gt; [ERR]
mix3 &gt; iku: die
 iku &gt; [ERR] ぱっつんぱっつん at bin/ikusan.pl line 27.
mix3 &gt; iku: pixiv
 iku &gt; [OK] http://www.pixiv.net/member_illust.php?mode=medium&amp;amp;illust_id=38896869
mix3 &gt; iku: サタデーナイト
 iku &gt; [OK] フィーバー!!
mix3 &gt; iku: ふぁ！？
 iku &gt; およよ…
</code></pre>

<p>という感じになるみたいな？ regsiter で3つ目以降の引数は配列でGetOptionsに渡すようにして、sub に渡ってくるみたいな？</p>

<p>実際には my $ret = &#8245;perl path/to/script.pl --option $opts{option}&#8245;; とかしてバッチスクリプトに右から左へオプション流すだけなのを想像してる</p>

<p><a href="https://gist.github.com/mix3/74d53023818899d49d48">gist</a></p>

<h3>熱は出る、咳は出る、鼻水は出る</h3>

<p>と悲惨な最近なので、現実逃避してたら衣玖さんボットを作りたくなったのでしたマル</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/10/05/20131005/</guid>
<pubDate>Sat, 05 Oct 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>信じて送り出したfcgiプロセスがulimitの設定によって次々と殺されて行く話</title>
<description>
<![CDATA[
<p>ではありません。</p>

<p><a href="http://lestrrat.ldblog.jp/archives/25360109.html">livedoorブログ</a>がpsgiに移行したりなんかするこのご時世になぜかmod_rewriteとfcgiを使って頑張っているmix3です。</p>

<h3>ulimitの話</h3>

<p>とある事情でapacheのinit.dにulimitを設定していて、メモリを使いすぎる、とかCPU使いすぎるとfcgiプロセスを殺してもらうようにしていたのですが、</p>

<p>「それ子(fcgi process)だけじゃなくて親(httpd)まで殺しちゃわない？」</p>

<p>と <a href="https://twitter.com/#!/fujiwara">@fujiwara</a> さんの有り難いお言葉が飛び出して大慌てでulimitを外すということが発生しました。</p>

<p>しかもgracefulだと設定変更効かないからロードバランサから外して一台ずつリスタート掛けて行かなければならず…</p>

<h3>再度設定する場合にどうするのか</h3>

<p>とある事情は変わらないのでulimitの設定を戻さないと行けないが、どうすれば良いのか思いつかないので <a href="https://twitter.com/#!/fujiwara">@fujiwara</a> さんに考えて頂いたところ、</p>

<ul>
<li>index.fcgiをindex.fcgi.plとか適当に変える</li>
<li>index.fcgiは中身shスクリプトにしてそこにulimitを書く</li>
</ul>

<p>というのはどうか？と提案を頂きまして、いけそうな感じなのでそれで行こうかなぁとなっています。 <a href="https://twitter.com/#!/fujiwara">@fujiwara</a> さんありがとうございました。</p>

<h3>ulimitの設定どうやって確認するの？</h3>

<p>と、ロードバランサから1台外してinit.d からulimitを消してリスタートしたところでふと思い聞いたところ</p>

<pre><code>cat /proc/$(cat /var/run/httpd.pid)/limits
</code></pre>

<p>「こういう感じかな」と教えていただきました。備忘録。</p>

<hr />

<p>という記事を8月中ぐらいに書いていて放置プレイしてたので改めて残しておく</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/08/30/20130830/</guid>
<pubDate>Fri, 30 Aug 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>テスト書くのって難しい</title>
<description>
<![CDATA[
<p>布都ちゃんが可愛すぎて生きるのが辛い。mix3です。</p>

<p><img src="/images/20130728/futo.png" /></p>

<h3>テスト書くのって難しい</h3>

<p>なんの意味も無い以下のような糞コードがあったとして、各subについてテストを書いたりなんかしてみるとこんな感じだろうか？</p>

<script src="https://gist.github.com/mix3/6097116.js"></script>

<p>なんでこんな糞コード書いたかというと</p>

<ul>
<li>type_a, type_b
<ul>
<li>まあ良い</li>
</ul></li>
<li>type_to_execute
<ul>
<li>type増えたらやだなぁと思うけどまあ良い</li>
</ul></li>
<li>calc_type
<ul>
<li>計算複雑になったらやだなぁと思うけどまあ良い</li>
</ul></li>
<li>execute
<ul>
<li>type_a,type_b,type_to_execute,calc_typeが総じて複雑になった時、全部と通るテスト書くの考えたくないんだけど…</li>
</ul></li>
</ul>

<p>普通にアプリ書いてると、色々複雑になった上でexecuteみたいにいくつも関数経由して結果を返すやんちゃな関数が出てきてしまうのですが、そういうののテストは正直書いていて死にたくなります。そして後で機能拡張しようとしてやっぱり死んだりする。</p>

<p>「そもそも設計が悪いよ」「それ◯◯で出来るよ」「糞コードに何を求めてるの」etc… ということなんでしょうか。テスト大事なのは分かるのですが、正しくて網羅的なテストというのはきちんとスキルを身につけてないと出来ないよなぁと思う事が多いです。「書かないよりはずっと良い」と心の中で言い訳しながら書いてますが。</p>

<p>ただ、以下のような事もあるのでやっぱりただ書くだけでもダメなんだなと思いつつ、もやもやする今日この頃です。</p>

<blockquote class="twitter-tweet"><p>リファクタリングに使えないテストのことをレガシーカバーと呼ぶ。結局リファクタリングできないんだからレガシーコードのまま。</p>&mdash; いろふ(成分無調整) (@irof) <a href="https://twitter.com/irof/statuses/346946470890573824">June 18, 2013</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/07/28/20130728/</guid>
<pubDate>Sun, 28 Jul 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>phantomjsで遊ぶ</title>
<description>
<![CDATA[
<p>うわっ…私のチーム、レベル低すぎ…？ mix3です。リードエンジニアとしてどうにかしろって話ですが、コミュ
障の自分には荷が重いです…</p>

<h3><a href="http://d.hatena.ne.jp/karasuyamatengu/20110126/1296066287">PhantomJS: 最小限なheadlessのWebKitベースのJavaScriptツール</a></h3>

<p>だそうです。正直良くわかりませんが、nodeのようにサーバーサイドで書けるイメージ。</p>

<p>$ cat hello.js</p>

<pre><code>console.log('Hello, world!');
phantom.exit();
</code></pre>

<p>$ phantomjs hello.js</p>

<pre><code>Hello, world!
</code></pre>

<p>とか</p>

<p>$ cat google_capture.js</p>

<pre><code>var page = require('webpage').create();
page.open('http://www.google.com', function (status) {
    page.render('google_capture.png');
    phantom.exit();
});
</code></pre>

<p><a href="/images/20130413/google_capture.png"><img src="/images/20130413/google_capture.png" width="200" /></a><br /></p>

<p>とか</p>

<p>$ cat hello_server.js</p>

<pre><code>var system = require('system');

if (system.args.length !== 2) {
    console.log('Usage: hello_server.js &lt;portnumber&gt;');
    phantom.exit(1);
} else {
    port = system.args[1];
    server = require('webserver').create();

    service = server.listen(port, function (request, response) {
        response.statusCode = 200;
        response.write('&lt;html&gt;&lt;body&gt;Hello, World!&lt;/body&gt;&lt;/html&gt;');
        response.close();
    });

    if (!service) {
        console.log('Error: Could not create web server listening on port ' + port);
        phantom.exit();
    }
}
</code></pre>

<p>$ phantomjs hello_server.js</p>

<p>$ curl http://localhost:2525</p>

<pre><code>&lt;html&gt;&lt;body&gt;Hello, World!&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>などなど。単純なCLIプログラムや、Webページにアクセスしてキャプチャ取ったり、サーバプログラムも書けたりします。</p>

<p>ローカルファイルも扱えるので、例えばあるディレクトリ以下の画像を並べて表示するサーバを立てつつ、それを</p>

<pre><code>page.open('http://localhost:[port]', function () {
    page.render(...);
});
</code></pre>

<p>とかするとあら不思議。コマンド一発で複数画像を１枚画像に出来たりします。</p>

<h3>なんでこんなもん触ってるかというと</h3>

<p>ソーシャルゲームに携わっていて思う事なのですが、イベント中だと特にそうですが時間で文言が変わるということは良くあることです。そしてこういうものは当然リリース前にスケジュールはきっちり決まっていて（もちろん差し込みで仕込み直すこともありますが）がっつりテストすることになります。が、開発段階でも当然自分で目視チェックすることになるのですがこれが非常に面倒くさい。なぜ面倒くさいかというとモジュールの単体テストとは違いローカルプロキシ越しにブラウザで確認したり実機で確認したりすることになり、自動テストになかなか上手く落とし込めないからです。（見た目の部分は特に変更が出易いのでそういう意味でもテストに落としづらいというのはあると思います）他のプロジェクトだと一部定型的な部分はモデルに落とし込んでテスト出来るようにしていたりするようですが、当然限界もあり。</p>

<p>ということで、今のところ画像、文言など見た目の部分をテストに落とし込むのは無理だろうなぁと思っておりますが、そうは言ってもチェックが面倒なことは面倒なのでチェックすること自体はいくらか楽にはしたい。特に時間で文言が切り替わるのを見比べられる状態にしたい。</p>

<p>ということでphantomjsでしこしこ以下のようなスクリプト書いてました</p>

<ul>
<li>指定ページを時間別にキャプチャしてpngで吐き出すスクリプト</li>
<li>フォルダ以下の*.png画像を横に並べて表示するサーバを立ててそれをキャプチャするスクリプト</li>
</ul>

<p>参考: <a href="http://d.hatena.ne.jp/hecomi/20121229/1356785834">PhantomJS でログインが必要なページでも自由自在にスクレイピング - 凹みTips</a></p>

<p>ほぼほぼキャプチャの部分は<a href="http://d.hatena.ne.jp/hecomi/20121229/1356785834">参考</a>をそのまま使わせてもらっているのですが、参考のままだと画像などがキャプチャされないことがあったので、setTimeoutを使ってキャプチャのタイミングを遅らせるなどの簡単な工夫をしています。</p>

<p>後、サーバがバイナリを出力するときは、ローカルからファイルを読み込む時に 'b' を指定するのとresponse.writeするまえにresponse.setEncoding('binary')しないといけないようなので注意が必要です。</p>

<pre><code>var image = fs.read(file_path, 'b');
response.headers = {
    'Accept-Ranges': 'bytes',
    'Content-Type': 'image/png',
    'Content-Length': image.length
};
response.setEncoding('binary');
response.write(image);
</code></pre>

<p>こうすることで横並び画像にして文言チェック出来るようになり捗りそうな気配がしています。（まだ作ったばかりで実際に活用するのはこれから）</p>

<p>ちなみに一枚画像にしてしまうのは社内gyazoにあげてディレクターなど他の方にも見てもらえるようにしたかったからですが、今にして思えば別に一枚画像にする必要はなく、画像一括アップロード出来るフォームと横並びにして表示出来る簡単なサーバアプリを書くだけで良いことに気づいたので、ここは今後やりやすい方にシフトする感じで行きたい。</p>

<p>ということでphantomjs便利なんじゃないかなというお話でした。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/04/13/20130413/</guid>
<pubDate>Sat, 13 Apr 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>おれおれWebフレームワーク - Chaco</title>
<description>
<![CDATA[
<p>これ書くタイミング間違えてる気がするけどまあいいや</p>

<p>なんとなく作ってみるなど。別に他フレームワークと差別化して使うようなものでもなく習作的な感じ。</p>

<p>*::LiteとかDancerとか使えばワンソースでお手軽にWebアプリ書けるわけですが、実際に簡単なアプリ書くとなると、Liteなんだけどなんとなく仰々しい気がしてきたり。（Liteと言っても結局各フレームワークが持つ色々な機能は提供されているのでそう感じるのかな？）</p>

<p>でもだからといって</p>

<pre><code>my $app = sub {
    my $env = shift;
    [200, ['Content-Type' =&gt; 'text/plain'] ['Hello World'] ];
};

$app;
</code></pre>

<p>とかをモリモリ書いちゃうのもどう考えたって違う。</p>

<p>ということで、Plack::*,Router::Simple(Router::Simple::Sinatraish),Text::Xslate,Data::Section::Simpleでそれっぽく書けるようなものを作ってみた。あまりにも決め打ちすぎるので、設定を渡せるようにしたりして融通効くようにしたいかな。あんまり迷惑にならなそうなところで使ってみてます。</p>

<p>「劣化<a href="https://github.com/tokuhirom/MojaMoja">MojaMoja</a>」とか「劣化<a href="https://github.com/yusukebe/Hitagi">Hitagi</a>」とか「劣化<a href="http://blog.nomadscafe.jp/2010/07/nopastesinatrawaf.html">Shirahata</a>」とか思いつつ、劣化ということすらおこがましい状態。そりゃ大半コピーアンドペーストだもの仕方ないね。</p>

<p>強いて特徴を上げるならフォワードっぽいこと出来るようにしてみた（$ENV{PATH_INFO}をlocalで書き換える力技なので問題あるとは思う）けどSinatra的ルーティングでフォワードは用途を勘違いしてる感が否めないので正直いらないと思います。マル。</p>

<p>ちなみに<a href="https://github.com/mix3/Chaco">Chaco</a>はチャコと読みます。以前実家にいた、今は亡き黒のラブラドールレトリーバーの名前です。</p>

<pre><code>use Chaco;
# ...
run;
</code></pre>

<p>で、元気に走り回るチャコの姿を思い浮かべながら書いてました。<a href="http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=4507497">以前書いた絵</a>の日付みてもう４年近くも経ってるんですね…</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/03/16/20130316/</guid>
<pubDate>Sat, 16 Mar 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>Plack::App::Directoryで画像を展開する</title>
<description>
<![CDATA[
<p>Perlのネガティブキャンペーンが流行ってる今日この頃ですが私は元気です（震え声）</p>

<p>p5-JQueryPresentationHelperなんてなかったんや</p>

<h3>Plack::App::Directoryで画像とかは展開してほしい</h3>

<p>Plack::App::Directoryでカレントディレクトリ以下を見えるようにするワンライナーをbashrcとかでエイリアスにしておくとか良くあると思います。凄く便利なのでそれはそれとして良いのですが、画像とかは出来れば展開してそのまま見えてほしいかなと思う事もあります。</p>

<p>なので、どうすれば良いかなとPlack::App::Directoryの中見てたのですが、もりもりっとtrタグを羅列してるだけっぽかったので、HTML出力を正規表現でちょちょっと弄ればそれっぽくなりそうだと思ったのでやってみました。</p>

<script src="https://gist.github.com/mix3/5109843.js"></script>

<p>ファイルを出力するときはPlack::Util::IOWithPathのオブジェクトを返してるようなので、そうでないときだけ正規表現でちょちょっと弄る感じですると良い感じに画像表示してくれました。</p>

<p>swfも見えてほしいなぁという声が聞こえてきたのでswfobject.jsで見えるようにしてみました。</p>

<script src="https://gist.github.com/mix3/5116797.js"></script>

<p>タイルで見えるともっと良いね！という声が聞こえてきましたが、Plack::App::Directoryを使う限り無理なので、それは新規で別モジュール作った方が良いなと思いました。</p>

<p>ちなみにswfobject.jsは2.2でもまだ微妙にセキュリティリスクがあるらしい <a href="http://t-ashula.hateblo.jp/entry/2012/01/11/233156">ほむらちゃほむほむ - swfobject.js がアレな話</a> ので外から見えるところで使うのは止めた方が良いかなと思います。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/03/09/20130309-2/</guid>
<pubDate>Sat, 09 Mar 2013 00:00:01 +0900</pubDate>
</item>
<item>
<title>p5-JQueryPresentationHelper作ってみた</title>
<description>
<![CDATA[
<p>やりたかったこと。</p>

<ul>
<li>use Hoge でメソッドが生えるモジュールの習作が作りたかった</li>
<li><a href="http://code.google.com/p/jquery-presentation/">jquery-presentation</a>:<a href="http://dl.dropbox.com/u/268240/googleCode/jquery-presentation/index.html">demo</a>をmarkdownで書けるようにしたかった</li>
</ul>

<p>結果、良くわからないものが中途半端に出来てしまって、でも放置してもあれなのでとりあえずgithubにアップ。</p>

<p>git clone を前提としたもっとゆるい感じで作った方が良い感じにおさまった気がしてます。</p>

<p>jquery-presentationに依存したDSLモジュールとかcpanにあげるわけもないのだし。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/03/09/20130309-1/</guid>
<pubDate>Sat, 09 Mar 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>すぐにpixivのランキングイラストを見れるGoogleChromeの拡張を作った。</title>
<description>
<![CDATA[
<p>生きていればつらいことがある。
しかし、つらいからと言って簡単に投げ出す事は出来ないということも多い。</p>

<p>みなさんもつらまってる時、よくpixivを見ると思う。
当然のごとく僕もそうである。</p>

<p>最近つらい事がよくある。
そんな時のために、pixivのランキングイラストを素早く表示する必要があった。
なので、pixivのランキングイラストをすぐ見れるGoogle Chromeの拡張を作った。</p>

<p><a href="https://github.com/mix3/chrome-pixiv-illust-daily-ranking-redirect">mix3/chrome-pixiv-illust-daily-ranking-redirect - GitHub</a></p>

<p>「だめだ。もうやってらねー」って時は、空のtabを表示すればすぐpixivのランキングイラストが見れる。最高。自分も絵描きたい。</p>

<p><a href="/images/20130214/pixiv-illust-daily-ranking-redirect.png"><img src="/images/20130214/pixiv-illust-daily-ranking-redirect.png" width="300" /></a></p>

<p>参考</p>

<ul>
<li><a href="http://blog.hisaichi5518.com/entry/2013/02/01/003820">すぐに吉高由里子を見れるGoogle Chromeの拡張作った。 - パルカワ2</a></li>
<li><a href="http://soh335.hatenablog.com/entry/2013/02/10/011039">すぐに宮崎あおいを見れるGoogle Chromeの拡張作っ>た。 - soh335 memo</a></li>
<li><a href="http://mizzy.org/blog/2013/02/11/1/">すぐにハッブル宇宙望遠鏡撮影画像を見れるGoogle Chromeの拡張作った。 - Gosuke Miyashita</a></li>
</ul>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/02/14/20130214/</guid>
<pubDate>Thu, 14 Feb 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>あけおめ</title>
<description>
<![CDATA[
<p>ことよろ。なんか本当に久しぶりに落書きしたmix3です。</p>

<script src="http://source.pixiv.net/source/embed.js" data-id="32685756_6064c2b2416178ec058c322de47db89e" data-size="medium" data-border="on" charset="utf-8"></script>

<noscript><p><a href="http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=32685756" target="_blank">あけおめ</a> by <a href="http://www.pixiv.net/member.php?id=88339" target="_blank">mix3</a> on <a href="http://www.pixiv.net/" target="_blank">pixiv</a></p></noscript>

<p>年に1回の年賀絵ぐらい継続して描きたいものですね…</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/01/06/20130106/</guid>
<pubDate>Sun, 06 Jan 2013 00:00:00 +0900</pubDate>
</item>
</channel>
</rss>
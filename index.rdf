<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
 xmlns:blogChannel="http://backend.userland.com/blogChannelModule"
>

<channel>
<title>萌えキャラ的にクリスマスはキリスト教的なイベントだから仏教的人種はスルー的な？みたいな？</title>
<link>http://mix3.github.com/</link>
<description>命名:萌えキャラピュタ</description>
<pubDate>Tue, 05 Jul 2011 10:56:01 +0900</pubDate>
<lastBuildDate>Tue, 05 Jul 2011 15:19:44 +0900</lastBuildDate>

<item>
<title>さくらVPS借りてみた</title>
<link>http://mix3.github.com/article/d0eaf97b5d1fa525640b284666ed63c7.html</link>
<description><![CDATA[# さくらVPS借りてみた

### さくらVPS借りてみた

インフラエンジニアを目指す宣言したは良いものの、自分で管理する外部に晒されている環境すら持ってないのはどうかという話があるのでまずはさくらVPSを借りてみることに請求が来る前に試用出来るようですぐに使えるのは凄いですねぇ。さくら様様です。（ちなみに一応自宅サーバ用のマシンは手元にあるのですが外部ディスプレイ手に入れてからとか考えてたら結局こっち来てから起動することはありませんでした…）

インフラやりたいと言いつつミドルウェアの知識はまったく０に近い状態なので、ミドルウェアの勉強用に使って行きたいかなと思います。

### とりあえず入れて最初にやったこと

* ユーザの設定
 * rootのパスを変更する
 * 一般ユーザを追加する(sudoで管理者の権限を得るためにグループはwheelに入れる)
 * 一般ユーザのパスを変更する
 * visudoでwheelグループがsudoで管理者権限で実行できるように変更
* SSHのログインを公開鍵に変更
 * /etc/ssh/sshd_config を修正
 * キーペアを作成してログイン
* system-config-securitylevel-tui でssh以外を閉じる
* git,perlbrew,cpanmを入れる

大体こんな感じ。SSHは以下のような感じで設定。コメントアウト外したりyes,no変えたり。

    PermitRootLogin no
    AuthorizedKeysFile      .ssh/authorized_keys
    PasswordAuthentication no
    ChallengeResponseAuthentication no

「ChallengeResponseAuthentication no」はデフォルトでnoだけれどこれがyesになってると公開鍵の認証に失敗したらパスワード認証も試すといった挙動をするので、公開鍵に限定する場合はちゃんとnoになってることをチェック。

ファイアーウォールの設定は一旦 system-config-securitylevel-tui 使ってやりましたが、細かく設定する場合は当然 iptables を使って設定しないといけないので、おいおいここは最適化していきたいです。

他にもデーモンを止める話とかもあるので以下とか参考にしつつ最適化していきたいです。

[さくらVPSを使うときに最初にやっておきたいこと(CentOS編)](http://sakura.off-soft.net/blog/sakura_vps_centos_first_setup.html)
]]></description>
</item>
<item>
<title>Markdownブログ</title>
<link>http://mix3.github.com/article/2e06a95d629f75805f2bfdd404f9c6fa.html</link>
<description><![CDATA[# Markdownブログ

### Markdownブログ

Markdownでブログが書きたかった。githubのページ公開機能なら何でも良かった。今は反省している。

[https://github.com/mix3/mix3.github.com](https://github.com/mix3/mix3.github.com)

#### 使い方

1. resource以下に.mdでMarkdownの文書を作成する。
2. script/generate.plを実行する
3. githubにコミットする
4. [こんな感じになる](http://mix3.github.com/)

#### ちなみに

pixivブログでjsを使ってごにょごにょしようとしてみたがムリっぽい。HTMLの中にMarkdownを埋め込んだり別サーバに置いてみたり色々してみたがどうにも上手く行かず。

* 別ドメインにならざるを得ずセキュリティ制限が掛かる
* JSONPだとヒアドキュメントが使えないのでキモイ
* ２重エスケープなどで上手く表示出来ない

などなど。

ということでpixivブログで割と満足している現状全く使いどころが無いMarkdownブログだけどまあいっか。
]]></description>
</item>
<item>
<title>MobaSiFを弄ってみた</title>
<link>http://mix3.github.com/article/6da22b3e8148ef357d95a79d44b8d254.html</link>
<description><![CDATA[# MobaSiFを弄ってみた

MobaSiFは機能がミニマムなので、コントローラに相当すると思われる部分にて以下の記述をします。

* アプリケーションロジックを記述
* レスポンスの値を生成＆セット

具体的に書くと以下のような感じ。

#### conf/pages.conf

    our %PAGE = (
        'test' => [0,0,0, 'Page::Sample', 'pageMain'],
    );

#### pm/Page/Sample.pm

    package Page::Sample;
    sub pageMain {
        my $func = shift;
        # レスポンスの生成
        my $html = HTMLTemplate::insert('sample/index', $rhData);
        # レスポンスヘッダに値をセット
        Response::output(¥$html);
    }

#### template/_system/sample/index.html

    <html>
    <head><title>$CON:title$</title></head>
    <body>
        test
    </body>
    </html>

普段触るフレームワークだと「レスポンスの生成」も「レスポンスヘッダへの値のセット」も自分ですることはまず無くて。テンプレートに渡す値をハッシュで用意して、テンプレート自体はクエリパスなどから自動で判断するかもしくは明示的に指定するかする場合が多い。

ということでこの辺り結構違和感が大きいのでちょっとそれっぽくなるように手を入れてみた。

#### pm/Context.pm

<script src="https://gist.github.com/1038137.js?file=Context.pm"></script>

#### pm/Page/Main.pm

<script src="https://gist.github.com/1038137.js?file=Main.pm"></script>

#### conf/pages.conf

    our %PAGE = (
            .
            .
            .
        'test'  => [0,0,0, 'Page::Sample', 'test'],
        'test1' => [0,0,0, 'Page::Sample', 'test1'],
        'test2' => [0,0,0, 'Page::Sample', 'test2'],
    );

#### pm/Page/Sample.pm

<script src="https://gist.github.com/1038137.js?file=Sample.pm"></script>

#### template/_system/sample/test.html

<script src="https://gist.github.com/1038137.js?file=test.html"></script>

### 次回はDB周りを触ってみる

commit,transactionなどをラップしているものの、サンプルコードではSQL直叩きなのでこれもDBICなどでゴリゴリモデルに落とし込むなどして使った方が良いかもしれない。
]]></description>
</item>
<item>
<title>MobaSiFを触ってみた</title>
<link>http://mix3.github.com/article/72498178ebb89e2e4d3c18efd6c1918b.html</link>
<description><![CDATA[# MobaSiFを触ってみた

### インストール

環境はCentOS5.6で極力yumで対処してみた。

* CentOS 5.6
* Apache 2.2.3 (yum install)
* fastcgi 2.4.0 (yum install)
* mod_fastcgi 2.4.2 (source install)
* mysql 5.1.57 (rpm install)
* perl 5.8.8 (yum install)

ちなみにMobaSiFのdocsに記載されている対応環境の内容は以下の通り

               要求       確認環境
    CentOS     4.x / 5.x  4.5 (i386)
    Apache     1.3.x      1.3.41
    MySQL      5.0.x      5.0.51a
    perl       5.8.x      5.8.0
    fastcgi    2.4.x      2.4.6

### 詰まった所、注意点

* MobaSiF
 * mod_fastcgiとmod_fcgidがあるがMobaSiFはmod_fastcgi
 * yumで入れたApacheのバージョンが2.2だったが、mod_fastcgiは2.0までしか対応していない。
 * パッチを当てれば2.2にmod_fastcgiを入れるられる⇒'Apache2.2＋fastcgiで Ruby on Rails'
* perl
 * FastCGIがシステム標準のperlを使うのでperlbrewを使うと混乱する。
 * 素直にシステム標準のperlを使うのが楽
* Apache
 * MobaSiFとは全然関係ないがバーチャルホストでDocumentRootの設定に変な癖がある⇒VirtualHost環境化でのPermission Denied

### MobaSiFのミニマムサ
ンプル

MobaSiFでのページとURLの対応は以下のようになる

* ルート
 * http://[domain]/
* 各ページ（アンダースコア＋ページ名）
 * http://[domain]/[_ページ名前]

### ページを追加してみる

#### conf/pages.conf

    our %PAGE = {
            .
            .
            .
        'sample' => [0,    package Page::Sample;
    
    use strict;
    use HTMLTemplate;
    use Response;
    
    sub pageMain {
        my $func = shift;
        my $rhData = {};
    
        my $html = HTMLTemplate::insert("sample/top", $rhData);
        Response::output(\$html);
    }
    
    1;0,0, 'Page::Sample', 'pageMain'],
        # http://[domain]/_sample にアクセスすると Page::SampleモジュールのpageMainの処理が走る
    };

#### pm/Page/Sample.pm

    package Page::Sample;
    
    use strict;
    use HTMLTemplate;
    use Response;
    
    sub pageMain {
        my $func = shift;
        my $rhData = {};
    
        my $html = HTMLTemplate::insert("sample/top", $rhData);
        Response::output(\$html);
    }
    
    1;

### テンプレートのコンパイル

MobaSiFでは速度を出すためにアプリで機種毎に出し分けなどの処理をしないよう最初からテンプレートを機種別に生成したりするようです。（変なバイナリデータをテンプレートに埋め込んでいたり他にも色々やってそうな感じ）

    $ perl script/tool/compile_template

#### conf/pages.confの数字の意味

    'ページ名' => [ UID_ST, USER_ST, SERV_ST, モジュール, サブルーチン ]

* UID_ST
 * 0:情報なし
 * 2:serial/uid あり
* USER_ST
 * 0:非会員でもOK
 * 1:会員（メアド未登録でもOK）
 * 2:会員（メアド登録済）
* SERV_ST (以下を足したもの)
 * 1:自主退会だと不能
 * 2:運用退会だと不能
 * 4:PENALTYだと不能
 * 8:メール不達だと不能

### まとめ

* 機能は非常にミニマム
 * 文字コードはテンプレートやコード等でsjis,utf8,eucが入り交じる
 * テンプレートの中に絵文字のバイナリを直接書く
 * ロジックの所でレスポンスにテンプレートと引数を合成したものの返り値を渡す処理を自分で書く。

⇒多分拡張して使われる事が前提と思ってよい。

* 古いのでPlackに対応していないため、動作確認までの環境構築が非常に面倒。
 * 開発段階でわざわざApacheとFastCGIを入れないといけない

⇒今時Plack対応して欲しいかも。開発段階でFastCGIがどうのとかあんまり考えたく無い。

以下で説明されている通りモダンじゃないのは確かかもしれませんね。 

[第42回PHP勉強会 MobaSiF 発表資料](http://www.slideshare.net/bobpp/42php-mobasif-1351953)
]]></description>
</item>
<item>
<title>jquery-presentationを弄ってみた</title>
<link>http://mix3.github.com/article/1f582291f61c7e0bda7e728647b42609.html</link>
<description><![CDATA[# jquery-presentationを弄ってみた

最近自分の進むべき道の事について考えたり考えなかったりしているmix3です。

### GoogleDocsも良いけれど

社内の勉強会でとある『未完』に終わったお話したのですが、そのときパワポに何を使おうか考えて普段はGoogleDocsを使ってるのですが、こんなパワポを見てHTML形式も良いなと思い、HTMLベースのパワポツールを探してみたところ以下のものが自分の琴線に触れました。
琴線に触れたもの

* jquery-presentation - jQuery based presentation framework. [DEMO]
* HTML をプレゼン形式に表示する jQuery プラグインを作ってみた [DEMO]
* 「イカワイパー」なHTMLベースのプレゼンツール「SliDegeso」を作ってみたでゲソ [DEMO]
* slippy [DEMO]

イカに凄く惹かれたのですが上手くワイパーの動作をしてくれず見送り。一番シンプルそうなjquery-presentationを今回は使ってみました。slippyも結構良い感じっぽいので次回はそれを使ってみたいと思います。

### jquery-presentationはちょっとシンプル過ぎる

jquery-presentationは実はページ送り（戻り）しか出来ない超絶シンプルなツールです。デフォルトのページ送りのエフェクトや、センター表示、ページ番号管理表示などはありますがそれだけです。「一部表示を隠して順に表示する」といったパワポの基本的な事が出来なかったりします。なのでその程度のことぐらいは出来てほしいなと思い少し手を入れました。こんな感じです。

[デモはこちら](http://dl.dropbox.com/u/5299588/jquery-presentation/index.html)

<script src="https://gist.github.com/1019885.js"> </script>

表示する順序や、visibility:hidden/display:noneの使い分けまでやりたいなと思いつつ片手間に弄ったので隠して表示が出来る程度にしています。やりすぎると「他のツール使え」ということになりますしね。

ということで発表自体は非常に残念なことになったので精進して行きたいです。
ちなみに

HTMLベースのパワポの弱点としてスライドシェアに上げにくい（PDFにしにくい）というものがあります。スライドシェアに上げる前提の場合はHTMLベースは避けた方が良いでしょう。
]]></description>
</item>
<item>
<title>Qudoでログ回収</title>
<link>http://mix3.github.com/article/7343925d5b5db5964a28dff94b1e9334.html</link>
<description><![CDATA[# Qudoでログ回収

* SCPやrsyncやらで各アプリケーションサーバから回収
 * 自由が利く
* 各アプリケーションサーバから解析サーバへ投げてもらう
 * HDFSなどHadoopが扱うファイルシステムに直接入れる事が可能
 * ※ただし、各アプリケーションサーバがそのファイルシステムを扱えるように色々セットアップが必要

後者のアプリから投げてもらう方だと各サーバでファイルシステムを扱えるようセットアップが必要になるので、そこまでアプリ側に負担を掛けられないかなということで今考えているのは前者の方法となります。

### コード

Hadoopが扱うファイルシステムはHDFSという前提で前回構築した環境でサンプルを作ってみました。

### シェルスクリプトで並列回収

まず最初にシェルスクリプトで書いてみました。「これだと回収先のアプリが100万個ある場合は100万個同時にダウンロードしちゃうってことだよね？」というもっともな指摘で没になりました。まったくもってその通りだと思います。

<script src="https://gist.github.com/954830.js"> </script>

### Qudoで並列回収

* ジョブ／キューを使いたい
 * なんとなくジョブは消えてほしく無い
 * 失敗したらリトライしてほしい
* 回収は並列
 * でも同時実行数は上限あり

以上の要件で最初はTheSchwartz＆Parallel::Preforkで考えていましたが何やらGearmanでもDBを使って動作させられるという話があったりQudoを見つけてみたりで、でもやりたいことって別にそんなに複雑な事でもないので結局何使っても良いかなと思ってQudoを選びました。後々機能を増やしたい時にフックポイントが色々用意されているので悪くないかなと。

<script src="https://gist.github.com/951476.js"> </script>

どうでも良いですがnekokakさん曰くQudoは「駆動」らしいですが「弓道」の方が良いと思います＾＾
]]></description>
</item>
<item>
<title>Mojolicious::Lite + Teng + SNBinder + Xslate (+ SQLite/OnMemory) でCRUDアプリを作ってみた</title>
<link>http://mix3.github.com/article/31f556362690556d70162368934b2d08.html</link>
<description><![CDATA[# Mojolicious::Lite + Teng + SNBinder + Xslate (+ SQLite/OnMemory) でCRUDアプリを作ってみた

Mojolicious::Liteは一つのファイルの中に全部突っ込んでWebアプリが作れるということなので、今自分が気になってるものを習作の意味を込めて全部詰め込んでCRUDアプリを作ってみました。jQueryも入れたかったけど書いていてカオスになったのでSNBinderの補助とページャ以外は無しにしました。

色々突っ込んでみたものは以下

* Teng
 * ページャ（プラグイン）
 * inflate/deflate
 * triggerの代替 Class::Method::Modifiers
 * Devel::KYTProf
* Xslate
 * Mojolicious::Liteで継承
* SNBinder
 * コンセプト

## 雑感

### Teng

nekokakさん作の軽量ORMであるTeng。

* Skinnyの後継
* DBIの薄いラッパー

ということで、シンプルさを残しつつさらっと書きたいことはさらっと書けるように配慮されてて良い感じです。Skinnyと使い方はあまり変わらない事や、そもそもシンプルなのでコードを追いかけやすいということもあって理解はしやすそうです。ただドキュメントはまだまだ少ない感じで【実践Teng — Teng-Doc v0.01 documentation】という非公式のページも出来ているものの未掲載も残っていて、使用例などと合わせてドキュメントの充実が待たれているといった所でしょうか。

### Xslate

なんだかとてつもなく速いテンプレートエンジン。自分はまだテンプレートエンジンの速度を気にしないといけないような状況には出会っていないので、速さというものの有り難さが分らないのですが速いそうです。また、テンプレートの書き方を選択出来るようでTTの文法で書く事も出来るようです。あと継承が扱えるのが良い感じです。テンプレートエンジンで継承は思いの外対応していないことが多いので。

### SNBinder

データとテンプレートの組み合わせたものを一つの部品として見て、画面に貼付けて行く事で画面を構築して行くというコンセプトの、jsのテンプレートエンジン。この考え方は自分の大好きなJavaのWebアプリケーションフレームワーク、WicketのViewと似ていて非常に気に入っています。よくあるテンプレートエンジンのテンプレートの中にコードを埋め込んで画面を作る方法よりテンプレートがHTML的にプレーンでシンプルになるのが良いと思います。ただSNBinderはあまりにも機能がミニマムなのであえて使うほどでも無いかなとも思っています。後、データはサーバでViewがクライアントにあるので記述がシームレスに出来ないのもまた障壁のひとつかなと。Wicketだと全てJavaでサーバサイドで書けるので書いていて本当に幸せです。Java使いの方はWicketを使いましょう！

## メモ

以下今回コードを書いていてのメモ

### triggerの代替 Class::Method::Modifiers

Skinnyで言うtriggerがTengでは廃止されていて、代替としてClass::Method::Modifiersを使う事を提案されています。今回はTimestampとSoftDeleteの振る舞いを表現するために使ってみました。具体的にはcreated_at,updated_at,deleted_atの３カラムを用意してinsert,update,deleteの操作でそれぞれ自動的に日付が入力されるようにしました。また検索時にSoftDeleteされたものが検索の対象から排除されるようにしました。Class::Method::Modifiersの使い方を理解していないのでこれで良いのかは怪しいですが、それぞれsearchやinsertなどの動作を変更して*_atの値を操作しています。

    package Message;
    use parent 'Teng';
    __PACKAGE__->load_plugin('Pager');
    
    use Class::Method::Modifiers;
    
    around delete => sub {
        my ($orig, $self, $table_name, $delete_condition) = @_;
        my $update_row_data = {
            deleted_at => DateTime->now->set_time_zone('Asia/Tokyo'),
        };
        $self->update($table_name, $update_row_data, $delete_condition);
    };
    
    before update => sub {
        my ($self, $table_name, $update_row_data, $update_condition) = @_;
        if (!$update_row_data->{deleted_at}) {
            $update_row_data->{updated_at} = DateTime->now->set_time_zone('Asia/Tokyo');
        }
    };
    
    before insert => sub {
        my ($self, $table_name, $row_data) = @_;
        $row_data->{created_at} = DateTime->now->set_time_zone('Asia/Tokyo');
        $row_data->{updated_at} = DateTime->now->set_time_zone('Asia/Tokyo');
    };
    
    before fast_insert => sub {
        my ($self, $table_name, $row_data) = @_;
        $row_data->{created_at} = DateTime->now->set_time_zone('Asia/Tokyo');
        $row_data->{updated_at} = DateTime->now->set_time_zone('Asia/Tokyo');
    };
    
    before search => sub {
        my ($self, $table_name, $search_condition, $search_attr) = @_;
        $search_condition->{deleted_at} = \'IS NULL';
    };
    
    before search_with_pager => sub {
        my ($self, $table_name, $where, $opts) = @_;
        $where->{deleted_at} = \'IS NULL';
    };
    
    1;
    
    my $result = $model->single('message', {
        id => $self->param('id')
    });
    
    $model->fast_insert('message', {
        message => $self->param('message'),
    });
    
    $model->update('message',
        {
            message => $self->param('message'),
        },
        {
            id => $self->param('id'),
        }
    );
    
    $model->delete('message', {
        id => $self->param('id'),
    });
    
    my ($rows, $pager) = $model->search_with_pager(
        'message',
        {
        },
        {
            order_by => 'id DESC',
            page => $page,
            rows => 3,
        }
    );

### Mojolicious::LiteでのXslateの継承

Xslateで継承を使わないというのはありえないと思うのですが、Mojolicious::Liteでのサンプルが見つからなかったのでちょっと悩みました。実際はhogehoge.txで定義してincludeやcascadeなどでそれを指定するだけでした。

    @@ base.tx
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml">
      <head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8" />
        <script src="http://www.google.com/jsapi" type="text/javascript"></script>
        <script type="text/javascript">//<![CDATA[
            google.load('jquery', '1.4.4');
        //]]></script>
        <script src="https://github.com/snakajima/SNBinder/raw/master/snbinder-0.5.3.js" type="text/javascript"></script>
    : include main_js
        <title>Mojolicious::Lite + Teng + SNBinder + Xslate (+ SQLite/OnMemory)</title>
      </head>
      <body>
    :   block content -> { }
      </body>
    </html>
    
    @@ form.tx
    <form method="post" action="<: $path :>">
    : if ($id) {
      <input type="hidden" name="id" value="<: $id :>">
    : }
      <p><textarea name="message" cols="50" rows="10" ><: $message :></textarea></p>
      <p><input type="submit" /></p>
    </form>
    
    @@ index.html.tx
    : cascade base
    : override content -> {
    
    : include form { path => "/create" }
    
    <div id="main" style="display:none;">
      <p>Accessing server ...</p>
    </div>
    
    : }

### SQLite/OnMemory

実はSQLiteってオンメモリ（正しくはインメモリかな？）で動作するんですね。知りませんでした。これのおかげで必要なCPANモジュールが入っていれば本当に一つのファイルで動作するアプリになりました。ただしオンメモリなので切断されると当然データが消えます。また、複数プロセスから接続は出来ないようでStarmanなどのHTTPDと組み合わせて動かすと勝手に複数ワーカーが起動して動作するため上手く動きません。オンメモリでもDB名を付けることが出来たり、コネクションプールで接続を維持し続ける方法があったりするんじゃないかとは思うのですが、ちょっと良くわかりません。H2DBではそういうことが出来た覚えがあるのですがさて。

    my $model = Message->new(
        dbh => DBI->connect(
            'dbi:SQLite:dbname=:memory:', '', '',
            {
                RaiseError     => 1,
                PrintError     => 0,
                AutoCommit     => 1,
                sqlite_unicode => 1,
            }
        )
    );

## コード

コードはGistに上げています

<script src="https://gist.github.com/953572.js"> </script>
]]></description>
</item>
<item>
<title>Hadoopを触ってみた</title>
<link>http://mix3.github.com/article/64e7ae8130b74b84e0caa83dd73e5cb0.html</link>
<description><![CDATA[# Hadoopを触ってみた

具体的にはgistに書いた。

完全分散モードが結構癖が強い感じなので気をつけたい。

<script src="https://gist.github.com/944255.js"> </script>
<script src="https://gist.github.com/944342.js"> </script>
]]></description>
</item>
</channel>
</rss>
<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
 xmlns:blogChannel="http://backend.userland.com/blogChannelModule"
>

<channel>
<title>&#x840C;&#x3048;&#x30AD;&#x30E3;&#x30E9;&#x3068;&#x306F;&#x4F55;&#x3060;&#x3063;&#x305F;&#x306E;&#x304B;</title>
<link>http://mix3.github.io</link>
<description>&#x30AE;&#x30FC;&#x30AF;&#x306B;&#x3082;&#x7D75;&#x63CF;&#x304D;&#x306B;&#x3082;&#x306A;&#x308C;&#x306A;&#x3044;&#x8005;&#x306E;&#x672B;&#x8DEF;</description>

<item>
<title>&#x30D6;&#x30ED;&#x30B0;&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x3092;&#x5909;&#x3048;&#x3066;&#x307F;&#x308B;</title>
<description>
<![CDATA[
<p>テンプレートは気に入っていて変えたくないのでその辺りは出来るだけそのままを保ちつつ、レスポンシブデザインってどうやるんだろうなと思いながらいじいじしてて数ヶ月経ってしまいこのままだともう日の目を見る事が無さそうな感じしたのでえいやで更新してしまいました</p>

<p>それにともない記事のhtmlを一カ所にまとめる様に変更（記事生成後再生成でゴミが残るので面倒になった）それにともないパーマリンクが変更になるという鬼畜ぶりに我ながら身震いしたけどどうせブクマしてる人も全然いないし自分のブログだし好きにすることにした　404のカスタムhtmlでjs使って多少の誘導ぐらいは出来る様にしたいとは思ってるけどやらないかも</p>

<p>ということで気分も新たにブログたまには書いて行きたい</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/06/15/20140615_02/</guid>
<pubDate>Sun, 15 Jun 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>golangWAF&#x306E;traffic&#x3092;&#x89E6;&#x308B;&#x3064;&#x3044;&#x3067;&#x306B;&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x4F5C;&#x3063;&#x3066;CI&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#x3092;&#x8A66;&#x3057;&#x3066;heroku&#x306B;&#x4E0A;&#x3052;&#x3066;&#x307F;&#x305F;</title>
<description>
<![CDATA[
<p>コートレビューされると毎回マサカリが飛んできて自分はやはり糞コード製造機だなぁと改めて実感しててまた死にたい感じになってます。mix3です。</p>

<h3>golangのWAF調査の一環として</h3>

<p>goによる社内アプリ(?)を後輩らと共同でマサカリを一身に受けて血反吐吐きながら書いていたのですが</p>

<p><a href="http://revel.github.io/">Revel</a>使っていたけど使いこなせてない感じが半端無くて(Revelのセンスが悪いのか自分たちのセンスが悪いのか考えると多分自分たちのセンスが悪いんだろうなと思う)</p>

<p>あらかた動く様になった段階で、最終的にリライトするのも辞さない覚悟でWAF調査から再出発することに。</p>

<ul>
<li><a href="http://beego.me/">Beego</a></li>
<li><a href="http://naoina.github.io/kocha/">Kocha</a></li>
<li><a href="https://github.com/pilu/traffic">traffic</a></li>
<li><a href="http://martini.codegangsta.io/">Martini</a></li>
</ul>

<p>とググって見つかったWAFを担当振ってサンプルアプリ作ってどんなもんか調べましょうとなりました。</p>

<p>自分は<a href="https://github.com/pilu/traffic">traffic</a>を担当。</p>

<p>ただ調べるだけだとつまらないので、Travisやheroku使った事無かったというのもあり、タイトルにあるCI連携とherokuへのデプロイまでやることにしました。</p>

<h3>作ったもの</h3>

<p>最初は<a href="http://todomvc.com/">TodoMVC</a>の<a href="http://todomvc.com/architecture-examples/angularjs/">AngularJS</a>を使うかと考えたが<a href="http://bower.io/">Bower</a>が絡んできて余計な事で悩みそうだったのでやめて、<a href="http://dotinstall.com/lessons/todo_angularjs">AngularJSで作るToDoアプリ</a>を見てシコシコとhtml/js/cssを書いてから<a href="https://github.com/pilu/traffic">traffic</a>を書いてみた</p>

<p>最終的に出来たのが以下</p>

<ul>
<li>github <a href="https://github.com/mix3/go-traffic-sample">https://github.com/mix3/go-traffic-sample</a></li>
<li>heroku <a href="http://lit-plains-4846.herokuapp.com/">http://lit-plains-4846.herokuapp.com/</a></li>
</ul>

<h3>CI連携</h3>

<p>最初に<a href="https://travis-ci.org/">Travis</a>を試して、<a href="http://wercker.com/">wercker</a>なるものを後で見つけて追加して、<a href="https://drone.io/">drone.io</a>なるものもあってそれも追加して、と手当たり次第試してみた</p>

<p>基本的にCIは専用のyml(drone.ioはいらないみたい)をコミットして go test ./... を走らせるだけだけど、<a href="https://github.com/naoina/genmai">genmai</a>のTravisのテストが賢くてナルホドなってなった</p>

<p><a href="https://github.com/naoina/genmai/blob/master/genmai_test.go#L110">https://github.com/naoina/genmai/blob/master/genmai_test.go#L110</a></p>

<pre><code>func testDB(dsn ...string) (*DB, error) {
    switch os.Getenv("DB") {
    case "mysql":
        return New(&amp;MySQLDialect{}, "travis@/genmai_test")
    case "postgres":
        return New(&amp;PostgresDialect{}, "user=postgres dbname=genmai_test sslmode=disable")
    default:
        var DSN string
        switch len(dsn) {
        case 0:
            DSN = ":memory:"
        case 1:
            DSN = dsn[0]
        default:
            panic(fmt.Errorf("too many arguments"))
        }
        return New(&amp;SQLite3Dialect{}, DSN)
    }
}
</code></pre>

<p><a href="https://github.com/naoina/genmai/blob/master/.travis.yml">https://github.com/naoina/genmai/blob/master/.travis.yml</a></p>

<pre><code>language: go
go:
 - 1.2
 - 1.2.1
 - tip
install:
 - go get -v github.com/mattn/go-sqlite3
 - go get -v github.com/go-sql-driver/mysql
 - go get -v github.com/lib/pq
 - go get -v github.com/naoina/genmai
env:
 - DB=sqlite3
 - DB=mysql
 - DB=postgres
before_script:
 - sh -c "if [ '$DB' = 'postgres' ]; then psql -c 'DROP DATABASE IF EXISTS genmai_test;' -U postgres; fi"
 - sh -c "if [ '$DB' = 'postgres' ]; then psql -c 'CREATE DATABASE genmai_test;' -U postgres; fi"
 - sh -c "if [ '$DB' = 'mysql' ]; then mysql -e 'CREATE DATABASE IF NOT EXISTS genmai_test;'; fi"
script:
 - go test ./...
</code></pre>

<p>.travis.ymlでenvを複数指定するとそれぞれの環境変数でテストが走るので、テストの方で環境変数で使うDBを変える様にしておくことでいい感じにDB別のテストが走っていてとても賢い</p>

<p>order byしてないせいでsqlite,mysqlでは通るがpostgresでは通らないみたいなことがあったので、DB限定しない作りのアプリのテストはこのやり方を真似しておくと良いなと思った</p>

<p>設定に環境変数を使うというのは<a href="http://twelve-factor-ja.herokuapp.com/config">The Twelve-Factor App</a>で推奨されてて環境に合わせて柔軟に設定出来るのは確かに良いなぁと思った</p>

<h3>heroku</h3>

<p>元々herokuまでやるつもりはなかったけど、作ったものを見える状態にするのも大事だなと思ってCIまでは割とサクサク行ったのでheroku使った事無かったし試してみた</p>

<p>最初 git push heroku master しても全然うまくいかず泣きそうになっていたのだが、最終的には</p>

<ul>
<li>godepを使わない</li>
<li>.godirはgithub.com/mix3/go-traffic-sampleじゃなくてgo-traffic-sampleで</li>
<li>src以下にきちんと配置(最初はシンボリックリンク使って別の場所で開発してた)
<ul>
<li>pushが通らなかった一番の理由が多分これ</li>
</ul></li>
</ul>

<p>という感じでやるとなんとかpush出来た</p>

<p>ググったりgithubで「golang heroku」とかで検索掛けたりするとgodep使ってたり、srcをリポジトリに含めたり含めなかったりしてどうするのが良いのかいまいち分からなくて非常に困った（し、今も良くわかっていない）</p>

<p>結局traffic作者のブログ記事<a href="http://gravityblast.com/2013/12/05/how-to-deploy-go-with-traffic-on-heroku/">How to deploy Go with Traffic on Heroku</a>をそのままやってうまく行ったので今はそれに合わせている。godepとbuildpack-goは大分トラウマになった気がする。</p>

<p>デプロイしてから静的ファイルが配信出来ていないことに気づいて<a href="http://gravityblast.com/2013/12/05/how-to-deploy-go-with-traffic-on-heroku/">How to deploy Go with Traffic on Heroku</a>をよく見るとproductionでも静的ファイルをアプリ側で返す様に弄るよう指示されていたので修正した。</p>

<p>が、herokuにも静的ファイルの配信は出来るハズなので、workerをアプリにしてwebを<a href="https://github.com/mattn/gorem">gorem</a>にしてやればいけるんじゃないかと思ったが、portが不定なのでjsonにport記述できないし、goremはコマンドだからherokuの場合にどうしたらいいのかサッパリ分からなかったのでそこまでは出来なかった。</p>

<h3>テスト</h3>

<p>revelのときはテスト書いてなかったのでテスト書く場合はどうなるのかなということでCRUDを確認する簡単なモデルテストを書いてみたが、時間が絡むテストが非常に書きにくくて困る（し、今も困っている）</p>

<p>DBから取ってきたデータの比較でreflect.DeepEqualを使ってデータをまるまる比較したのだがdatetime型があるとそれが出来なくて困る。time.Now()をモックできないかとググるも良い情報が無くて詰んでいる。</p>

<p>多分標準パッケージのtimeをどうこうすることは出来ないので、別の時間管理用モジュールを作るか見繕ってきてそれをモックするようにするのが良いのかなと思っている。例えばこれとか？<a href="https://github.com/101loops/clock">https://github.com/101loops/clock</a></p>

<h3><a href="https://github.com/moovweb/gvm">gvm</a></h3>

<p>goの開発環境を綺麗に保つときにgvmを使うと良さそうなことに気づいた</p>

<pre><code>gvm install go1.*.*
gvm use go1.*.*
</code></pre>

<p>とかして、簡単に好きなバージョンのgoが使えるし、</p>

<pre><code>gvm pkgset use global
</code></pre>

<p>とかするとインストールしたgo専用のGOPATHが設定されるし、</p>

<pre><code>gvm pkgset create hoge
gvm pkgset use hoge
</code></pre>

<p>とかすると、さらにGOPATHが設定される(GOPATH=/path/to/hoge:/pagh/to/global になるのでhoge優先)</p>

<p>ので、適当にgvm installして適当にgvm pkgset create hogeしてglobal以下で開発、依存パッケージをhogeに入れるようにすると環境を何も汚さない感じで開発出来てよいと思う</p>

<p>ひとつ残念なのはgvmは[GVM](the Groovy enVironment Manager)とコマンド名がバッティングしていてそれだけは勘弁してほしいなってなってる</p>

<h3>なお</h3>

<p>この記事は5/13に書いたのだが、いつのまにか6/15である 時間が経つのは早い</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/06/15/20140615_01/</guid>
<pubDate>Sun, 15 Jun 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>p5-IkuSan&#x3092;&#x7169;&#x60A9;&#x306E;&#x307E;&#x307E;&#x306B;&#x516C;&#x958B;</title>
<description>
<![CDATA[
<p>人生の迷子の行き着く先は富士の樹海ではないかと最近良く考えています。mix3です。</p>

<h3><a href="http://search.cpan.org/~himachoco/IkuSan-0.01/lib/IkuSan.pm">p5-IkuSan</a></h3>

<p>IRCボットいい加減今のプロジェクトに欲しくなったので、自分がIRCボット作ったらこうするなというのを<a href="/2013/10/05/20131005/">以前書いた</a>のだが、今回は実際にそれを作ったという話です。</p>

<p>ただ単に作るだけだと別に<a href="http://search.cpan.org/~songmu/UnazuSan-0.02/lib/UnazuSan.pm">UnazuSan</a>で良いじゃないってなっちゃうので、以下の機能を盛り込みました</p>

<h4>Getopt::Longの引数が取れる</h4>

<p><a href="/2013/10/05/20131005/">以前の記事</a>参照</p>

<h4>並列にタスク処理が出来る</h4>

<p>最初Gearman使って頑張ってたのだけれど <a href="https://twitter.com/#!/karupanerura">@karupanerura</a> さん作、<a href="http://search.cpan.org/~karupa/AnyEvent-ForkManager-0.01/lib/AnyEvent/ForkManager.pm">AnyEvent::ForkManager</a>というのがあるのを見つたのでそれを使うように。worker数を指定出来る様にして並列に処理出来る様にしました</p>

<p>あんまり気にしなくても良いとは思うけれども処理中だからってボットが無反応になるのはなんとなく嫌だったので</p>

<h4>タスク処理中、dieしたら共通処理出来る様に</h4>

<p><a href="http://search.cpan.org/~doy/Try-Tiny-0.20/lib/Try/Tiny.pm">Try::Tiny</a>を使って囲ってるだけなので別にいらないと言えばいらない（自前でtry catchするのでも良い）が、どうせボットが返すエラー文言なんて一律で同じように返したって全然良いと思うので、共通処理を設定出来る様にしておきました</p>

<h3>ということで</h3>

<p><a href="http://search.cpan.org/~himachoco/IkuSan-0.01/lib/IkuSan.pm">p5-IkuSan</a>が出来ました</p>

<p>一応<a href="http://search.cpan.org/">CPAN</a>に上げるつもりだったので、今まで使ったことなかった<a href="http://search.cpan.org/~tokuhirom/Minilla/lib/Minilla.pm">Minilla</a>を使ってみたり、<a href="https://github.com/tokuhirom/plenv">plenv</a>と<a href="http://search.cpan.org/~miyagawa/Carton-v1.0.12/lib/Carton.pm">Carton</a>を経由して<a href="http://cr.yp.to/daemontools.html">daemontools</a>で起動出来るようにするというplackアプリの起動で良くある感じのアレをちゃんとやってみたり、その際にCarton経由しつつsystem perl使おうとするとCartonの方で環境変数PERL5OPTが設定されてしまうのでunsetするなりしないと読むモジュールが違って悲しい思いをするということを知ったり、perl5.19.10とか使うとNet::SSLeayあたりでpanicとかなんとか言われて動かなかったり（原因不明）forkしてる関係で子プロセスからsend_messageやらなんやらしようとして死にまくったりして、<a href="http://search.cpan.org/~yappo/App-Ikachan-v0.2.1/lib/App/Ikachan.pm">ikachan</a>リスペクトで頑張ってみたり、<a href="https://github.com/mix3/p5-IkuSan#readme">衣玖さんはやっぱり可愛い</a>んだなと再認識したりしました。CPANの方にもちゃんと画像出る様にしたい。</p>

<p>あと以下の発言が実現出来てワタクシ非常に満足しております。煩悩はチカラなり。</p>

<blockquote class="twitter-tweet" lang="ja"><p>（Ikusanっていう名前の入ったcpanモジュール作りたいだけです）</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/440167221289955328">March 2, 2014</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/04/12/20140412/</guid>
<pubDate>Sat, 12 Apr 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>revel&#x5165;&#x9580;</title>
<description>
<![CDATA[
<p>絶賛人生の迷子中、mix3です</p>

<h3>golangでWebアプリ</h3>

<p>を作ってレビューしてもらったらそれはもうフルボッコでそれこそ雄山のあれな感じでした</p>

<p><img src="/images/20140308/oisinbo_yuzan_arai.gif" alt="このWebアプリを作ったのは誰だぁっ" title="このWebアプリを作ったのは誰だぁっ" /></p>

<p><a href="/2013/11/13/20131113/">isucon3</a>を元に手探りでやったため突っ込みどころを残してしまったようです</p>

<ul>
<li>panic使ってerror潰すのやめろ</li>
<li>パス解決にCallerいらねーだろ
<ul>
<li>一応カレントディレクトリを判断したいという意図だったけどいらないらしい</li>
</ul></li>
<li>動かし方 go run hoge.go じゃなくて go build hoge.go; ./hoge ってちゃんと書け</li>
</ul>

<p>などなど</p>

<p>golangのWebアプリの良いサンプル、一応最初に自分で探してはみたものの良い感じのを見つけられず、後で「<a href="https://github.com/campoy/todo">campoy/todo</a>が参考になるんじゃない？」と教えてもらいました</p>

<p>最初に知りたかった… ちなみにパス解決の突っ込み</p>

<p><a href="https://gist.github.com/mix3/9430209">https://gist.github.com/mix3/9430209</a></p>

<pre><code>mix3 ~/tmp/caller_sample $ go run main.go
2014/03/08 21:56:14 loading config (with caller) file: /private/tmp/caller_sample/config/config.json
2014/03/08 21:56:14 OK
2014/03/08 21:56:14 loading config file: config/config.json
2014/03/08 21:56:14 OK

mix3 ~/tmp $ go run caller_sample/main.go
2014/03/08 21:56:38 loading config (with caller) file: /private/tmp/caller_sample/config/config.json
2014/03/08 21:56:38 OK
2014/03/08 21:56:38 loading config file: config/config.json
2014/03/08 21:56:38 open config/config.json: no such file or directory
exit status 1
</code></pre>

<p>こんな感じで実行パスに左右されないパス解決が出来るので使い方間違ってなければ意味はある書き方だとは思うんですが、まあ今回は必要ないよってことですかね</p>

<h3><a href="http://robfig.github.io/revel/index.html">revel</a>使いましょ</h3>

<p>そんな感じで <strong>センスの無い</strong> やつが手探りでやると悲惨なことになるのでWAFに乗っかった方がきっと良いと判断されたっぽい（実はそこらへん曖昧だったり…）のでとりあえず<a href="http://robfig.github.io/revel/index.html">revel</a>にのっかることにしました</p>

<p>使い方は公式<a href="http://robfig.github.io/revel/index.html">http://robfig.github.io/revel/index.html</a>のtutorialとmanualとsample眺めてればなんとなく分かる感じです</p>

<p>以下<a href="http://robfig.github.io/revel/samples/booking.html">revel/samples/booking</a>にはgorpとsqliteを使ったサンプルコードがあるのだけど、「mysqlにするにはどうすれば？」と少し悩んだのでメモ</p>

<h4>conf/app.conf のsqliteの設定をmysqlのものに変更</h4>

<pre><code>db.import = github.com/go-sql-driver/mysql
db.driver = mysql
db.spec   = root@tcp(localhost:3306)/alphawing
</code></pre>

<h4>app/controllers/gorp.go のimportしているドライバをmysqlのものに変更</h4>

<pre><code>_ "github.com/go-sql-driver/mysql"
</code></pre>

<h4>app/controllers/gorp.go の gorp.DbMap{} を mysqlのものに変更</h4>

<pre><code>Dbm = &amp;gorp.DbMap{Db: db.Db, Dialect: gorp.MySQLDialect{"InnoDB", "UTF8"}}
</code></pre>

<p>だいたいこれくらい弄るとmysqlで動く様になるはず</p>

<p>ちなみにsampleだからだと思うのだけど<a href="https://github.com/robfig/revel/blob/master/samples/booking/app/controllers/init.go">以下のような感じ</a>でコントローラ処理の前後にBegin,Commit,Rollback を入れ込んでて吹いた</p>

<pre><code>func init() {
    revel.OnAppStart(InitDB)
    revel.InterceptMethod((*GorpController).Begin, revel.BEFORE)
    revel.InterceptMethod((*GorpController).Commit, revel.AFTER)
    revel.InterceptMethod((*GorpController).Rollback, revel.FINALLY)
}
</code></pre>

<p>modelsでちゃんとやりたいときにはどうしたらいんだろうか…</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/03/08/20140308/</guid>
<pubDate>Sat, 08 Mar 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>&#x3042;&#x3051;&#x307E;&#x3057;&#x3066;</title>
<description>
<![CDATA[
<p>おめでとうございます</p>

<script src="http://source.pixiv.net/source/embed.js" data-id="40785050_59a1632c438aa0ce5c78b15331e9b533" data-size="large" data-border="off" charset="utf-8"></script>

<noscript><p><a href="http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=40785050" target="_blank">ヲ正月</a> by <a href="http://www.pixiv.net/member.php?id=88339" target="_blank">mix3</a> on <a href="http://www.pixiv.net/" target="_blank">pixiv</a></p></noscript>

<p>今年もよろしくお願いします</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/01/05/20140105/</guid>
<pubDate>Sun, 05 Jan 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>Vagrant with Virtualbox tips - internal network setting</title>
<description>
<![CDATA[
<p>ちょっと詰まったことがあったのでメモ書き これ書いてる時点でVagrantのバージョンは <em>1.4.1</em> となります</p>

<p>Virtualboxのネットワークアダプタにはいくつか種類があり</p>

<ul>
<li>NAT
<ul>
<li>ゲストOS -> 外</li>
</ul></li>
<li>内部ネットワーク
<ul>
<li>ゲストOS &lt;-> ゲストOS</li>
</ul></li>
<li>ホストオンリーアダプタ
<ul>
<li>ホスト -> ゲストOS</li>
</ul></li>
</ul>

<p>あたりを組み合わせて遊んだりするのですが、Vagrant で内部ネットワークを設定する方法が分かりづらかったのでメモ</p>

<pre><code>VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "box_name"
    config.vm.define :host1 do |host1|
    host1.vm.hostname = "host1"
    host1.vm.network :private_network, ip: "192.168.1.111", virtualbox__intnet: "intnet"
  end
    config.vm.define :host2 do |host2|
    host2.vm.hostname = "host2"
    host2.vm.network :private_network, ip: "192.168.1.112", virtualbox__intnet: "intnet"
  end
  config.vm.provision "shell", inline: "/etc/init.d/network restart"
end
</code></pre>

<p>抜粋するとこんな感じ</p>

<p><a href="http://docs.vagrantup.com/v2/networking/private_network.html">Private Networks - Networking - Vagrant Documentation</a> とか見てると</p>

<pre><code>virtualbox__intnet: true
</code></pre>

<p>とか書いてるけどそのまま設定すると「（trueが）文字列じゃねーよゴルァ！」と怒られるので、何かしら文字列を指定してあげる。</p>

<p>Virtualboxで設定した場合、内部ネットワークを指定した時のデフォルトが <em>intnet</em> なのでintnetで良いでしょう。</p>

<p>で、これで内部ネットワークの設定が出来るのですが初回の <em>vagrant up</em> 直後はNATによる設定で外に行けるはずなのに繋がらなかったりするので、</p>

<p><a href="http://docs.vagrantup.com/v2/provisioning/shell.html">Shell Provisioner</a>でnetworkの再起動をしてます。もっとスマートなやりかたあればいいんだけど。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2013/12/28/20131228/</guid>
<pubDate>Sat, 28 Dec 2013 00:00:00 -0000</pubDate>
</item>
<item>
<title>ndenv &#x3092; homebrew &#x3067;&#x5165;&#x308C;&#x308B;&#x8A71; &#x307E;&#x305F;&#x306F;&#x5982;&#x4F55;&#x306B;&#x3057;&#x3066;&#x5FC3;&#x914D;&#x3059;&#x308B;&#x306E;&#x3092;&#x6B62;&#x3081;&#x3066;RequireJS&#x3092;&#x611B;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x3063;&#x305F;&#x304B;</title>
<description>
<![CDATA[
<p>というようなことを元々は <a href="http://tech.kayac.com/archive/techkayaccom_advent_calendar_2013.html">teck.kayac.com Advent Calender 2013</a> の17日目 の記事として考えてたんだけど、結局なんか無性にWicketの事を書きたくなっちゃったので、お蔵入りになった記事をこっちに書く事にする。</p>

<p>カレンダーのノリで書いてたのをそのまま持ってくると大分寒い感じがするが、面倒なので不自然なカレンダー要素を消す意外は無編集で。</p>

<h3>ndenv を homebrew で入れる話 または如何にして心配するのを止めてRequireJSを愛するようになったか</h3>

<p><s>Advent Calenderネタの捏造のため</s>紆余曲折あって週末Backbone.jsの<a href="https://github.com/jashkenas/backbone/tree/master/examples">example</a>を永続化部分をローカルストレージじゃなくてAPIベースに書き換えつつテストをコマンドライン（Mocha on node）でやる、みたいなことをやってました。</p>

<p>その副産物として<a href="https://github.com/riywo/ndenv">ndenv</a>をhomebrewで入れられるよう<a href="https://github.com/mix3/ndenv">forkして弄りつつ</a>、<a href="https://github.com/mix3/homebrew-ndenv">Formula</a>を書いたりしました。</p>

<pre><code>brew tap mix3/ndenv
brew install ndenv node-build --HEAD
</code></pre>

<p>こんな感じで入れられると思います --HEAD なのはお察しください。多分他の誰かが既にやってるんじゃないかと思いますが気にしない事にしました。</p>

<h3>先生助けてっ Mochaが息してないの！</h3>

<p>で、node入れて<a href="https://github.com/jashkenas/backbone/tree/master/examples">backbone-examples</a>を弄ったわけですがAPIベースにするのは割と簡単に出来る（Backboneがモデルの永続化にRESTが使える）のですが「さてRequireJSで分割したのだし何かテスト書くか」と適当に書くとあら不思議。Mochaでテストが全くが実行されません。</p>

<p><a href="http://blog.kjirou.net/p/3206">AMD準拠のmochaテストをWebとCUIで共通化 - それなりブログ</a>にあるように非同期関連でうまく行かないようで同ブログにて書いてある通り「<a href="https://github.com/jrburke/amdefine">amdefine</a>で解決や！」と思ったらcollectionのテストの時にmodelを呼ぼうとして「みつかんねーよ！」と怒られてRequireJSの時と違ってbaseUrl設定してないんだし、そうだよなってなって奇声上げてました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>reqirejs で分割した後、mochaでcliテスト書こうとしたら全くテスト走らないので、amdefine 使ったらbaseUrl の関係でエラるしキエェェェーーー！！！ってなってる</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/412135316514820096">2013, 12月 15</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>で色々見ててどうにもならない感じだったけど、なんか他のサンプルとか色々眺めてるとテストの中でrequirejs使ってるのが多いっぽかったので、どうもそっちの方が一般的のようです。</p>

<pre><code>describe("Did it run?", function(){
    it("model is a model", function(done){
        // こんな感じで中でrequirejsを呼ぶ
        requirejs(["model"], function(model) {
            expect(model).to.be.a("model");
            done();
        });
    }); 
});
</code></pre>

<p>無理せずrequirejs使っていきましょう。</p>

<p>もう一つテストで困るのが、コマンドラインテストだとajaxとかで怒られるということ。（domが無いからってことで良いんだよね多分）</p>

<ul>
<li><a href="https://github.com/NilsLattek/backbone-requirejs-node-boilerplate/blob/master/test/client/requirejs_testing.js">NilsLattek/backbone-requirejs-node-boilerplate</a></li>
<li><a href="http://www.netboy.pl/2012/10/testing-jquery-code-with-mocha-chai-and-jsdom/">Testing jQuery code with Mocha, Chai and jsdom | Netboy</a></li>
</ul>

<p>この辺りを<s>コピって</s>参考にして<a href="https://github.com/tmpvar/jsdom">jsdom</a>を使うようにしてあげると良いようです。</p>

<p>ということで出来たのが<a href="https://github.com/mix3/backbone-examples-replace-to-api-base-app">こちら</a>になります。</p>

<p>どうやってコマンドラインでテストするかばかり考えていて「Backbonアプリのテストってどんな感じで書けば良いのか」についてまでたどり着かなかったので次触るときはそこまで考えて触りたいものですね。</p>

<h3>まとめ</h3>

<ul>
<li>実は一番最初の発端は「<a href="http://angularjs.org/">AngularJS</a>触ろう！」だったのにどうしてこうなった。</li>
<li>今は<a href="http://marionettejs.com/">Marionette.js</a>が気になります。</li>
<li>js、結局クライアントとサーバで分かれてるのが少し不幸っぽい（小並感）</li>
</ul>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2013/12/22/20131222_02/</guid>
<pubDate>Sun, 22 Dec 2013 00:00:01 -0000</pubDate>
</item>
<item>
<title>&#x9000;&#x52E4;&#x6642;&#x9593;&#x306E;&#x81EA;&#x52D5;&#x691C;&#x51FA;&#x30BD;&#x30EA;&#x30E5;&#x30FC;&#x30B7;&#x30E7;&#x30F3;</title>
<description>
<![CDATA[
<p>というようなことを元々は <a href="http://tech.kayac.com/archive/techkayaccom_advent_calendar_2013.html">teck.kayac.com Advent Calender 2013</a> の17日目 の記事として考えてたんだけど、結局なんか無性にWicketの事を書きたくなっちゃったので、お蔵入りになった記事をこっちに書く事にする。</p>

<p>カレンダーのノリで書いてたのをそのまま持ってくると大分寒い感じがするが、面倒なので不自然なカレンダー要素を消す意外は無編集で。</p>

<h3>勤怠管理してますか？</h3>

<p>私はと言うとまあお察しください。そう、勤怠管理は面倒です。</p>

<ul>
<li>何時に出社したか？</li>
<li>何時ににどれくらい休憩したか？</li>
<li>何時に退勤したか？</li>
</ul>

<p>覚えてられないですね。退勤時に記録を付けるときにはもう記憶が曖昧です ＞＜;</p>

<p>ということで退勤時間の自動検出ソリューションとか言って、適当に休憩や退勤の時間を記録するライフ八苦したいと思います。</p>

<h3>いかにして自動的に記録するか</h3>

<p>自分は最近 MacBookPro Retina 13インチ 16GBメモリ 512GB SSD というとても快適な環境で仕事してるのですが（16GBも積んでると<a href="https://www.virtualbox.org/">VirtualBox</a>&amp;<a href="http://www.vagrantup.com/">Vagrant</a>による開発環境が本当に快適）</p>

<ul>
<li>昼休憩はスクリーンセーバーで日々萌え萌え画像を垂れ流して「 <em>頭おかしい人</em> 」を演出</li>
<li>出社退社移動中はPC閉じてスリープ</li>
</ul>

<p>という感じなので、スクリーンセーバーになってた時間とスリープしてた時間が後から分かれば休憩、退勤の時間が分かると言えます。（実際は業務内容と時間を紐づける必要がありますが、今のところ自分の業務内容は一つだけなので考えなくてOK。複数案件抱えてたりしてる人は本当に大変そうです…）</p>

<p>問題はスリープの状態は記録出来ないこと。記録付けたくてもPCが眠ってるのでPC自身がアクション起こせません。</p>

<h3>ということでジョースター卿に教えを乞いました</h3>

<p><img src="/images/20131222/d2bdffc4.png" width="500" alt="ジョースター卿" /></p>

<p><em>なるほど！！！</em> </p>

<p>ということで<a href="http://dic.nicovideo.jp/a/%E9%80%86%E3%81%AB%E8%80%83%E3%81%88%E3%82%8B%E3%82%93%E3%81%A0">ジョースター卿の教え</a>を受けてPC稼働中は常に記録を取り続け、スクリーンセーバーの時は記録しない、という感じにやってあげるとうまく行きそうな気がしてきました。</p>

<h3>具体的には？</h3>

<p>homebrew で mysql を入れた後、適当に create database して適当に以下のようなテーブルを用意して</p>

<pre><code>CREATE TABLE receive (
    time datetime NOT NULL,
    PRIMARY KEY (`time`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</code></pre>

<p>以下のようなスクリプトを書いてcronに設定</p>

<pre><code>#!/bin/bash

if [ "" == "$(ps aux | grep ScreenSaverEngine | grep -v grep)" ]; then
    /usr/local/opt/mysql/bin/mysql -u root beacon_receiver -e "insert into receive values (now());"
fi

* * * * * /bin/bash ~/.beacon.sh
</code></pre>

<p>すると<a href="https://gist.github.com/mix3/7973095#file-active_monitor-pl">こんな感じ</a>のスクリプトを用意ししてぺろっと出力すると</p>

<p><img src="/images/20131222/a6f42cb8.png" alt="9時半に出社してる" /></p>

<ul>
<li>9時半に出社してる</li>
</ul>

<p><img src="/images/20131222/0130bdfb.png" alt="13時15分ぐらいから昼行ったっぽい" /></p>

<ul>
<li>13時15分ぐらいから昼飯行ったっぽい
<ul>
<li>なんか 13:50 辺りでちょっと復帰してるの気になるけど…</li>
</ul></li>
</ul>

<p><img src="/images/20131222/32609ec0.png" alt="20時45分ぐらいに退社してる" /></p>

<ul>
<li>20時45分ぐらいに退社してる</li>
</ul>

<p>というのが分かって「 <em>あらやだ便利！</em> 」という感じになりました。ソース一式はこちら⇒<a href="https://gist.github.com/mix3/7973095">https://gist.github.com/mix3/7973095</a></p>

<p>お試しあれ。</p>

<p>なお、日々ちゃんと勤怠管理出来てる人には関係ない話の模様。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2013/12/22/20131222_01/</guid>
<pubDate>Sun, 22 Dec 2013 00:00:00 -0000</pubDate>
</item>
<item>
<title>packer&#x3092;&#x4F7F;&#x3063;&#x3066;box&#x3092;&#x4F5C;&#x3063;&#x3066;vagrant up&#x3057;&#x3066;ansible&#x3067;provisioning&#x3057;&#x3066;&#x307F;&#x308B;&#x306A;&#x3069;</title>
<description>
<![CDATA[
<p><a href="/2013/11/13/20131113/">前の記事</a>が <a href="https://twitter.com/#!/fujiwara">@fujiwara</a> さんにブクマされた後もりもりっとブクマがのびてビビるなど。mix3です。</p>

<p>vagrantやansibleが流行っぽいので、MBP13インチをRetinaモデルに新調してウキウキハイテンションの今のうちに触っておくことにしました。</p>

<p>ちなみにpacker,vagrant,ansibleに対する自分の理解は以下のような感じ</p>

<ul>
<li>packer
<ul>
<li>vagrantのboxを作るためのツール</li>
</ul></li>
<li>vagrant
<ul>
<li>昔virtualboxのフロントエンドツールだったぽいけど今はvirtualboxに縛られなくなってるんだっけ？</li>
</ul></li>
<li>ansible
<ul>
<li>provisioningツール chefとかより軽量</li>
</ul></li>
</ul>

<p>正しくないかもしれないけど、大きく外してないと思いたい。</p>

<h4>インストール</h4>

<p>packerはbrew install packerか、バージョンを気にする場合はgit clone > make</p>

<p>vagrantは<a href="http://downloads.vagrantup.com/">Vagrant Downloads</a>からdmgを持ってきてインストールでサクっと完了。</p>

<p>ansibleはbrew install ansibleで。なおpyenvを使ってsystemのpythonを使われないようにしました。</p>

<h3>packerを試す</h3>

<p>やったのはcentos5.6のboxを作ること <a href="https://github.com/hnakamur/my-packer-template-files/tree/895f40358ff38328d30a69727bceba5f4962c3e2/centos6.4">my-packer-template-files/centos6.4</a>を元に弄りました</p>

<ul>
<li>vmwareの項目を削った</li>
<li>netinstallだと時間がかかるのでDVD1of2をローカルに持ってきておいてそれを使うようにした</li>
<li>Virutalboxで実際にインストールした後に出来るanaconda.cfgををもとにks.cfgを弄った</li>
<li>GuestAdditionsのせいで削ったyumが元に戻った</li>
<li>etc...</li>
</ul>

<p>色々削れないかなぁと思って色々削った末に色々削れずに元に戻るということをpacker buildを打ちまくって繰り返してました。</p>

<p>なお、最小構成でのOSインストールにしているとはいえboxがexportされるまでそれなりに時間が掛かるのでtry&amp;errorで試すのは結構面倒くさいです。</p>

<ul>
<li>box作成までの流れ
<ul>
<li>vmが立ち上がってkickstartでOSインストール</li>
<li>vm再起動後、provisionersの設定が走ってyumやら色々インストール</li>
<li>vm落とした後box作成</li>
</ul></li>
</ul>

<p>ちなみにboxは <a href="http://www.vagrantbox.es/">Vagrantbox.es</a>に色々あるのでそれで問題ないのであればpacker使って自作する前にそっちを使うべきかと思います。</p>

<p>centos5.6のboxもあります。</p>

<ul>
<li><a href="http://yum.mnxsolutions.com/vagrant/centos_56_32.box">CentOS 5.6 32</a></li>
<li><a href="https://dl.dropbox.com/u/7196/vagrant/CentOS-56-x64-packages-puppet-2.6.10-chef-0.10.6.box">CentOS 5.6 64 Packages (puppet 2.6.10 &amp; chef 0.10.6 from RPM, VirtualBox 4.2.0)</a></li>
</ul>

<p>ということで自作したpacker templateはこちらになります <a href="https://github.com/mix3/my-packer-template-files/tree/master/centos5.6">my-packer-template-files/centos5.6</a></p>

<p>json手書きとかケツカンマの関係でやりたくなかったのでperlで書いてjsonに直す感じになってます</p>

<h3>vagrant upする</h3>

<p>boxが出来たので起動するのですが、いまいちvagrantの使い方がわかっていないのでとりあえず以下の手順で起動してみた</p>

<ul>
<li>vagrant box add [box name] [box file]</li>
<li>cd 適当な場所</li>
<li>vagrant init [box name]</li>
<li>vagrant up</li>
</ul>

<p>vagrant init でVagrantfileが作られるので設定が必要な場合はupするまえに弄る感じになるっぽい 例えばvirtualboxの設定を変えたいときは以下を弄ったりするんだと思われる</p>

<p>packerの時点でGuestAdditionsインストールを削って使わない設定にするとかもここかな？</p>

<pre><code># config.vm.provider :virtualbox do |vb|
#   # Don't boot with headless mode
#   vb.gui = true
#
#   # Use VBoxManage to customize the VM. For example to change memory:
#   vb.customize ["modifyvm", :id, "--memory", "1024"]
# end
</code></pre>

<p>sshで入るときは vagrant ssh すると入れる vagrant ssh-config で .ssh/config の設定が見えるので手動で何かしたいときはそっちを見ると良いかな</p>

<h3>ansibleを試す</h3>

<p>ansibleを動かすにはINVENTRY（サーバリスト）とplaybook（chefでいうレシピ）が必要になります。今回は配信先が一つなのでINVENTRYはシンプルに一行で良いのですが、意味も無くグルーピングしてみました</p>

<pre><code>$ cat hosts 
[vagrant]
127.0.0.1 ansible_ssh_port=2222

# きちんとグルーピング指定するならこんな感じかな？
# [vagrant-app]
# 127.0.0.1 ansible_ssh_port=2223
# 127.0.0.1 ansible_ssh_port=2224
# 127.0.0.1 ansible_ssh_port=2225
# 127.0.0.1 ansible_ssh_port=2226

# [vagrant-db]
# 127.0.0.1 ansible_ssh_port=2227

# [vagrant-app:vars]
# ...
# [vagrant-db:vars]
# ...

[vagrant:vars]
ansible_ssh_user=vagrant
ansible_ssh_private_key_file=~/.vagrant.d/insecure_private_key
</code></pre>

<p>ansible_*のオプションは<a href="http://yteraoka.github.io/ansible-tutorial/ansible-in-detail.html">Ansible in detail</a> で確認しました</p>

<p>ひとまずはこれで配信が出来るか試したところ</p>

<pre><code>$ ansible all -i hosts -m ping -s
127.0.0.1 | FAILED &gt;&gt; {
    "failed": true, 
    "msg": "SUDO-SUCCESS-moxmhsptrmdnainrjekmubryetybkhrq\r\nError: ansible requires a json module, none found!", 
    "parsed": false
}
</code></pre>

<p>という感じで怒られてしまいました。配信先のpythonにjson moduleが別途必要なようです（python2.6からは不要）文言が違うけど以下参考</p>

<ul>
<li><a href="http://qiita.com/yamasaki-masahide/items/4485a438125e6b1748ce">Ansible CentOS5で出るImportError: No module named simplejson の対処</a></li>
</ul>

<p>これはに対して -m raw でjsonを使わず -a "..." で実行内容を直接指定して配信先に対してjson moduleを入れるのが定石のようなようです</p>

<pre><code>$ ansible all -i hosts -m raw -a "yum -y install python-simplejson" -s
$ ansible all -i hosts -m ping -s
127.0.0.1 | success &gt;&gt; {
    "changed": false, 
    "ping": "pong"
}
</code></pre>

<p>これでplaybookを作ってやれば配信できる状態になったと思われます。</p>

<p>ちなみに ansible all -i hosts all -m ping -s のオプションの意味ですが以下のようになっています</p>

<pre><code>$ ansible
Usage: ansible &lt;host-pattern&gt; [options] # host-pattern は all指定で全グループへ、グループ名指定で特定のグループへ配信

Options:
  -i INVENTORY, --inventory-file=INVENTORY
                        specify inventory host file            # ホストリストファイルの指定
                        (default=/usr/local/etc/ansible/hosts)
  -s, --sudo            run operations with sudo (nopasswd)    # 配信先での操作でnopassのsudoを使う
</code></pre>

<h4>playbook</h4>

<p>playbookは以下をつまみ食いしたあと、後公式ドキュメン <a href="http://www.ansibleworks.com/docs/modules.html">Ansible Modules</a> をつまみ食いして作りました</p>

<ul>
<li><a href="http://d2.haro.jp/2013/08/ansible_start.html">[Ansible] 使いやすい Ansible 、みんな使おう Ansible (1)</a></li>
<li><a href="http://d.hatena.ne.jp/akishin999/20130815/1376520672">Ansible の Playbook を使ってみる</a></li>
<li><a href="http://open-groove.net/ansible/nginx-install/">Ansibleでnginxをソースインストール</a></li>
</ul>

<p>作ったplaybookの内容は以下の通り なにやら怪しい感じですが気にしてはいけません。</p>

<ul>
<li>apacheのyumインストール</li>
<li>fcgiのyumインストール</li>
<li>mod_fastcgi2.4.6のソースインストール</li>
<li>mysqld5.1のrpmインストール</li>
<li>memcachedのyumインストール</li>
</ul>

<p>ということで、具体的には<a href="https://gist.github.com/mix3/7611961">https://gist.github.com/mix3/7611961</a>のようになりました 意味も無くymlを分割したりしています。</p>

<p>rpmモジュールは<a href="http://qiita.com/dayflower/items/21c64a6f5da155a5ade3">Ansible で RPM を扱う</a>から拝借させてもらいました</p>

<p>本来必要の無いものなのですが、CentOS5だとyumモジュールでのrpmインストールがうまく行かないようなので使わせてもらいました</p>

<h3>ということで</h3>

<p>仮想化やらクラウドやらのおかげで複数台のサーバを気軽に扱えるような時代になってるので、気軽に扱えるなら扱えるなりに扱い方を覚えていかないとなぁとそんなこと思いながらpacker, vagrant, ansible とかを触ってみました。</p>

<p>次はserverspecとか触りたいですね。確か今年の新卒たちはchefやらserverspecやらを研修で学んだと聞くのでそろそろ後輩に追いつかないといかんとですよ。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2013/11/23/20131123/</guid>
<pubDate>Sat, 23 Nov 2013 00:00:00 -0000</pubDate>
</item>
<item>
<title>isucon3&#x306E;&#x30EA;&#x30D5;&#x30A1;&#x30EC;&#x30F3;&#x30B9;&#x5B9F;&#x88C5;&#x3092;Go&#x306B;&#x79FB;&#x690D;&#x3057;&#x305F;&#x8A71;</title>
<description>
<![CDATA[
<p>isucon3スタッフとして本選運営のお手伝いをしてきましたが、参加者ではないのでisuconについて特に書くことが見つからないmix3です。一つ言えるのはみんな凄すぎでそれに比べて自分は本当になにも出来ない無能なんだなぁと再認識させられました。死にたい。</p>

<p><a href="/images/20131113/201311102153000.jpg"><img src="/images/20131113/201311102153000.jpg" width="300" alt="スタッフの証" /></a><br /></p>

<h3>移植を引き受けた話</h3>

<p>isuconでは最初に動く状態のアプリが用意されるのですが、そのアプリは問題が確定した後にまずリファレンス実装（今回はPerl）がされ、その後予選を抜けた人たちが使用していた言語（Perl含むRuby,Python,PHP,NodeJS,Go）に移植する、という流れで作られました。自分はその中でGo言語移植を担当しました。</p>

<p>ちなみにPerl以外の移植言語の中ではPHPぐらいしか触ったことがなく、PHPもかれこれ２,３年は触っておらずすっかり忘れてしまってるので、何の言語を担当しようと何も分からない状態から始まるという「なんで移植担当引き受けちゃったの？」と言われても仕方ないような状態でした。</p>

<p>なんでだろう？きっと<s>暇だった</s>仕事に余裕があったんだね</p>

<h3>移植コトハジメ</h3>

<p>そんな状態だったので、移植する前に「Goの勉強しないとなぁ」となり、以下のサイトを参考にGoの書き方、Goでwebappを作る場合にどうするのか調べたりしてました。なお、予選コードがあったおかげでベタ移植には困ることが無かったのでとてもとても助かりました。動くコードがあるというのは大事です。</p>

<ul>
<li><a href="http://qiita.com/tenntenn/items/0e33a4959250d1a55045">Go言語の初心者が見ると幸せになれる場所</a></li>
<li><a href="http://qiita.com/tenntenn/items/b8b27e32c28f7569f41a">Go言語でWebAppの開発に必要なN個のこと</a></li>
<li>予選のコード
<ul>
<li>jsonのconfigファイルのロードや、<a href="http://www.gorillatoolkit.org/pkg/mux">gorilla/mux</a>などは予選コードを<s>コピペ</s>参考にしました</li>
</ul></li>
</ul>

<h3>移植戦略</h3>

<p>今回の移植で予選コードに追加して必要だったのは以下3点</p>

<ul>
<li>外部コマンド
<ul>
<li>画像リサイズにリファレンス実装ではImageMagickのconvertコマンドを使用するため</li>
</ul></li>
<li>JSONのレスポンス生成
<ul>
<li>予選とは違いAPIベースだったのでJSONを返す必要があった</li>
</ul></li>
<li>ロングポーリングの実現</li>
</ul>

<p>これらが出来れば後は予選コードを<s>コピペ</s>参考にすれば移植は出来そうでした</p>

<h3>外部コマンド, JSONレスポンス</h3>

<p>外部コマンドについてはパッケージドキュメント <a href="http://golang.org/pkg/os/exec/">os/exec</a> 見たまんまです。捻りようもありませんね。</p>

<p>JSONレスポンスは<a href="http://nesv.blogspot.jp/2012/09/super-easy-json-http-responses-in-go.html">Super-easy JSON HTTP responses, in Go</a>を<s>パクりました</s>参考にしました。</p>

<p>へーと思ったのがtype Response map[string]interface{} の書き方。mapの値の型をinterface{}にするとinterface{}は何でも受け取れるので自身（この場合Response型）を入れ子にすることが出来るので、いわゆる連想配列やらMapやらと同じ感じで扱える型が出来るわけですね。まあJavaでMap&lt;String, Object&gt;とかする感じでしょうか。</p>

<h3>goroutin サイコー</h3>

<p>ロングポーリングは<a href="https://sites.google.com/site/gopatterns/web/long-poll-server">Go Language Patterns web/Long-Poll Server</a>にてgoroutinを使った例があり、これを<s>パクりました</s>参考にしました。</p>

<p>ここで始めてgoroutinを知りました。Goの話を聞くときは大抵並列の話が出るな、と思っていたのですが「なるほど」となりました。たしかにgoroutinすごいです。</p>

<ul>
<li>message/channel で排他制御とか考えずにデータをやり取り出来る</li>
<li>selectでmessage/channelを通してイベントドリブン制御</li>
<li>go func () { ... } () でさくっと並列処理を走らせる</li>
</ul>

<p>確かにこれはそういった処理実装するの「簡単だわー」ってなります。</p>

<p>ただまあロングポーリング程度の実装で何が分かる？という向きもあると思うし、これでヒャッホーってなってプロダクション環境で使ったりした日には何か罠踏むんだろうな、とは思いますが…。</p>

<h3>Kossyのfilterと例外処理</h3>

<p>ここまでで移植は可能だったので割合サクっと移植してしまい本選でもそれをgoの初期アプリとして出しました。が、正直なところ本戦に出した移植アプリは移植としては不完全だったかなぁという思いがありました。</p>

<p>なぜならPerlのリファレンス実装で使われているKossyというフレームワークにはfilterという機能があり、Sinatraルーティングに追加してコントローラ処理の前後に処理を挟めるようになっており、リファレンス実装ではそれを使って、ユーザ情報の取得、ユーザ情報取得失敗時の400エラーを実装していました。抜粋すると以下のような感じ。</p>

<pre><code>filter get_user =&gt; sub {
    # userの取得してstashに保存 別にundefでも構わない
};
filter require_user =&gt; sub {
    # stashにuserが無かったら400エラー
};
post '/signup' =&gt; sub {
};
get '/image/:image' =&gt; [qw/ get_user /] =&gt; sub {
    # 先に get_user が実行される
};
get '/me' =&gt; [qw/ get_user require_user /] =&gt; sub {
    # 先に get_user, require_user が並びの順で実行される
};
</code></pre>

<p>これに対してGoのベタ移植ではgetUser関数を呼んで nilチェックするコードを各コントローラにコピペしていました。「こんなの業務で書いたら殺されるかもしれない」という思いが渦巻くぐらいには良くない書き方だと思います。</p>

<p>それともう一つよく無かったなと思ったのがエラー時のレスポンス処理。Kossyでは$c->halt(500)などとしてExceptionを投げれば後はKossyがそれを捕まえてエラーレスポンスを返してくれます。これがGoのベタ移植では必要なときに毎度レスポンスを設定してreturnして関数を抜けるという素朴なことをしていました。</p>

<p>この「Kossyのfilter」「エラー時のレスポンス処理」２点が移植していてすごくもやもやしていたので、本選のアプリとしては使わないかもしれないけど「こうしたほうが良いんじゃないか？」というのを盛りこんだ実装も別で書いたりしていました</p>

<h3>Goにおける例外処理</h3>

<p>Goにはtry-catch-finallyがない代わりにpanic/recoverというものがあり、deferと組み合わせて例外処理っぽいことが出来ます <a href="http://blog.golang.org/defer-panic-and-recover">Defer, Panic, and Recover</a></p>

<ul>
<li>defer
<ul>
<li>関数を抜けた後に実行する遅延処理を定義出来る</li>
</ul></li>
<li>panic
<ul>
<li>関数を即抜ける perlで言うとdieみたいな感じ またそのときに遅延処理を実行する</li>
</ul></li>
<li>recover
<ul>
<li>panicから復帰する perlで言うとevalみたいな感じ deferの中で使うのが基本？</li>
</ul></li>
</ul>

<p>組み合わせて書くと例えば以下のような感じになります</p>

<pre><code>func main() {
    // (1) mainを抜けると実行される処理の定義
    defer func() {
        // (3) panicから復帰する
        if err := recover(); err != nil {
            fmt.Printf("recover: %v\n", err)
        }
    }()

    // (2) mainから即抜ける
    panic("panic")
}
// (4) output
// recover: panic
</code></pre>

<h3>defer panic/recoverを使ったエラーレスポンス処理</h3>

<p>これを使ってwebappのエラー処理をするならこうなるかな？というのを書いてみたのが以下になります（ちなみに以下のサンプルを書いていてswitch文にbreak使わなくてもよいことを初めて知りました）</p>

<pre><code>package main

import (
    "net/http"
    "github.com/gorilla/mux"
    "fmt"
)

func main() {
    r := mux.NewRouter()
    r.HandleFunc("/",       handler).Methods("GET")
    r.HandleFunc("/{code}", handler).Methods("GET")
    http.Handle("/", r)
    http.ListenAndServe(":5000", nil)
}

func handler(w http.ResponseWriter, r *http.Request) {
    defer func () {
        if err := recover(); err != nil {
            var code int
            switch err {
                case "400": code = http.StatusBadRequest
                case "404": code = http.StatusNotFound
                case "500": fallthrough
                default   : code = http.StatusInternalServerError
            }
            http.Error(w, http.StatusText(code), code)
        }
    } ()
    vars := mux.Vars(r)
    if code := vars["code"]; code != "" {
        panic(code)
    }
    fmt.Fprint(w, "OK")
}

// [output]
// http://loclahost:5000/    =&gt; OK
// http://loclahost:5000/400 =&gt; Bad Request
// http://loclahost:5000/404 =&gt; Not Found
// http://loclahost:5000/500 =&gt; Internal Server Error
// http://loclahost:5000/999 =&gt; Internal Server Error
</code></pre>

<p>panicの引数はinterface{}型なのでつまり何でも渡せるので、自前の型を定義して便利機能を付けておくとrecover()で受け取った後が捗りそうですね。</p>

<p>例外処理自体はこれで良いのですが、ただこのままだとdeferをコントローラ毎に書いて行かないと行けなくなるので、当然それは嬉しくありません。</p>

<pre><code>func main() {
    r := mux.NewRouter()
    r.HandleFunc("/hoge", hoge).Methods("GET")
    r.HandleFunc("/fuga", fuga).Methods("GET")
    r.HandleFunc("/bar",  bar ).Methods("GET")
    http.Handle("/", r)
    http.ListenAndServe(":5000", nil)
}
func hoge(w http.ResponseWriter, r *http.Request) {
    defer func () {
        if err := recover(); err != nil {
            // ...
        }
    } ()
    fmt.Fprint(w, "hoge")
}
func fuga(w http.ResponseWriter, r *http.Request) {
    defer func () {
        if err := recover(); err != nil {
            // ...
        }
    } ()
    fmt.Fprint(w, "hoge")
}
func bar(w http.ResponseWriter, r *http.Request) {
.
.
.
// deferコピペしないといけないのでは嬉しく無い
</code></pre>

<p>で、どうしようか考えた結果、defer,recoverするラッパー関数にコントローラを渡してあげれば良いんじゃないかと考えてみました、具体的には以下のような感じ。</p>

<pre><code>func main() {
    r := mux.NewRouter()
    r.HandleFunc("/hoge", wrapper(hoge).Methods("GET")
    r.HandleFunc("/fuga", wrapper(fuga).Methods("GET")
    r.HandleFunc("/bar",  wrapper(bar ).Methods("GET")
    http.Handle("/", r)
    http.ListenAndServe(":5000", nil)
}
func wrapper(handler func(w http.ResponseWriter, r *http.Request)) func(w http.ResponseWriter, r *http.Request) {
    return func (w http.ResponseWriter, r *http.Request) {
        defer func () {
            if err := recover(); err != nil {
                // ....
            }
        } ()
        handler(w, r)
    }
}
func hoge(w http.ResponseWriter, r *http.Request) {
    panic("hoge")
}
func fuga(w http.ResponseWriter, r *http.Request) {
    panic("fuga")
}
func bar(w http.ResponseWriter, r *http.Request) {
.
.
.
</code></pre>

<p>こうすることで例外処理の復帰部分をラッパー関数に押し込むことができました。例外処理のためにHandleFuncに渡すコントローラはラッパー関数を必ず噛ませないといけないルールが出来てしまうので、そこはちょっとアレな感じですが。</p>

<p>そしてさらにこのラッパー関数を多段にするとKossyのfilterっぽいことが出来そうです。（Kossyでは配列で順序を自由に設定出来るので、実際にはそれっぽく出来るってだけですけども）</p>

<pre><code>package main

import (
    "net/http"
    "github.com/gorilla/mux"
    "fmt"
)

type Stash map[string]interface{}

func main() {
    r := mux.NewRouter()
    r.HandleFunc("/pass",   base(pass(handler))).Methods("GET")
    r.HandleFunc("/{code}", base(     handler )).Methods("GET")
    r.HandleFunc("/",       base(     handler )).Methods("GET")
    http.Handle("/", r)
    http.ListenAndServe(":5000", nil)
}

func base(handler func(w http.ResponseWriter, r *http.Request, s Stash)) func(w http.ResponseWriter, r *http.Request) {
    return func (w http.ResponseWriter, r *http.Request) {
        defer func () {
            if err := recover(); err != nil {
                var code int
                switch err {
                    case "400": code = http.StatusBadRequest
                    case "404": code = http.StatusNotFound
                    case "500": fallthrough
                    default   : code = http.StatusInternalServerError
                }
                http.Error(w, http.StatusText(code), code)
            }
        } ()
        handler(w, r, Stash{})
    }
}

func pass(handler func(w http.ResponseWriter, r *http.Request, s Stash)) func(w http.ResponseWriter, r *http.Request, s Stash) {
    return func (w http.ResponseWriter, r *http.Request, s Stash) {
        s["msg"] = "PASS"
        handler(w, r, s)
    }
}

func handler(w http.ResponseWriter, r *http.Request, s Stash) {
    vars := mux.Vars(r)
    if code := vars["code"]; code != "" {
        panic(code)
    }
    if msg, ok := s["msg"]; !ok || msg == "" {
        fmt.Fprint(w, "OK")
    } else {
        fmt.Fprint(w, msg)
    }
}

// [output]
// http://loclahost:5000/     =&gt; OK
// http://loclahost:5000/pass =&gt; PASS
// http://loclahost:5000/400  =&gt; Bad Request
// http://loclahost:5000/404  =&gt; Not Found
// http://loclahost:5000/500  =&gt; Internal Server Error
// http://loclahost:5000/999  =&gt; Internal Server Error
</code></pre>

<p>どうでしょうか。ラッパー関数を多段にすることでfilterっぽい感じが表現出来たり、panic/recoverでエラーレスポンスをサクッと作れたり、なんとなくフレームワーク支援を受けて書いてるような気分に浸れそうな感じがしてきませんかね。</p>

<p>予選コードから考えるとちょっと手を入れ過ぎ感が否めなかったり、移植と言っても機能を満たせば良いわけでフレームワークがやってる処理までそれっぽく移植する必要はないので、結局は本戦の移植アプリにはしませんでしたが、実際にGoでこういうの書く場合はこれぐらいの工夫はしても良いんじゃないかなと思ったりします。ただでさえGoだとまじめにエラーハンドリングする必要があって縦にコードが伸び易いので、少しでもコードを減らす工夫はしたほうが良いように思います。</p>

<p>なお、これを適用することによって900行あった本戦の移植アプリが800行になりました。やったねたえちゃん！100行も減ったよ！でもperlはそもそも400行ありませんでしたね。切ない。</p>

<h3>ということで</h3>

<p>自己満足も満たしつつ移植作業が出来たので楽しかったです。なによりgoroutinを知れたのが良かったです。「Goが良いというのはこういうことか」みたいなのが少しだけ実感を持って感じられました。</p>

<h3>おわりに</h3>

<p>今回はisuconにスタッフとして関わったけれどもisucon自体には一度も参加してないので、来年isuconあったら予選ぐらいは参加してボコボコにされてこようかな、とかそんなこと考えるくらいにはisucon3の盛り上がりが凄かったです。</p>

<p>isucon関係者、参加者のみなさま、本当にお疲れさまでした。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2013/11/13/20131113/</guid>
<pubDate>Wed, 13 Nov 2013 00:00:00 -0000</pubDate>
</item>
</channel>
</rss>
<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
 xmlns:blogChannel="http://backend.userland.com/blogChannelModule"
>

<channel>
<title>萌えキャラ的にクリスマスはキリスト教的なイベントだから仏教的人種はスルー的な？みたいな？</title>
<link>http://mix3.github.com/</link>
<description>命名:萌えキャラピュタ</description>
<pubDate>Fri, 22 Jul 2011 19:41:35 +0900</pubDate>
<lastBuildDate>Fri, 22 Jul 2011 19:46:16 +0900</lastBuildDate>

<item>
<title>blessとMouse</title>
<link>http://mix3.github.com/article/6433264556550a53b7dc874982e89cb2.html</link>
<description>
<![CDATA[
# blessとMouse

### 健康診断

健康診断へ行って血を取ってきました。前回はチューブ通して採血の容器に取ってたのが今回は針から直結するようになって、それのおかげか何なのかは分りませんが採血スピードが向上して地味に嬉しかったです。痛いのは嫌いなのです…

### blessとMouseの速度比較

すこし気になってblessとMouse、その他の速度比較。いろんなところでやられてるので今更自分でする事でもないでしょうが。なおblessで作るクラスは手を抜いて型制限などの実装はせずアクセサを用意して値を操作するだけにしました。適当適当。

[いまさら聞けない「Moose」超入門](http://blog.livedoor.jp/sasata299/archives/51281496.html)を参考にblessとMouseのコードを書き足しました。以下の処理の速度を比較しています。

1. hoge/fugaのアクセサを持ったクラスをnew
 * 初期値はfugaに1
2. hogeに&#39;bbb&#39;を代入
3. fugaの値を取得
4. hogeの値を取得

#### cost.pl

    # おまじないしない場合
    package MooseTest;
    use Moose;
     
    has &#39;hoge&#39; =&gt; ( is =&gt; &#39;rw&#39;, isa =&gt; &#39;Str&#39; );
    has &#39;fuga&#39; =&gt; ( is =&gt; &#39;rw&#39;, isa =&gt; &#39;Int&#39; );
     
    no Moose;
    
    1;
    
    # おまじないする場合
    package MooseTest_mi;
    use Moose;
     
    has &#39;hoge&#39; =&gt; ( is =&gt; &#39;rw&#39;, isa =&gt; &#39;Str&#39; );
    has &#39;fuga&#39; =&gt; ( is =&gt; &#39;rw&#39;, isa =&gt; &#39;Int&#39; );
     
    __PACKAGE__-&gt;meta-&gt;make_immutable; # おまじない
     
    no Moose;
    
    1;
    
    # おまじないしない場合
    package MouseTest;
    use Mouse;
     
    has &#39;hoge&#39; =&gt; ( is =&gt; &#39;rw&#39;, isa =&gt; &#39;Str&#39; );
    has &#39;fuga&#39; =&gt; ( is =&gt; &#39;rw&#39;, isa =&gt; &#39;Int&#39; );
    
    no Mouse;
    
    1;
    
    # おまじないする場合
    package MouseTest_mi;
    use Mouse;
     
    has &#39;hoge&#39; =&gt; ( is =&gt; &#39;rw&#39;, isa =&gt; &#39;Str&#39; );
    has &#39;fuga&#39; =&gt; ( is =&gt; &#39;rw&#39;, isa =&gt; &#39;Int&#39; );
     
    __PACKAGE__-&gt;meta-&gt;make_immutable; # おまじない
    
    no Mouse;
    
    1;
    
    # Class::Accessor を使った場合
    package ClassAccessorTest;
    use strict;
    use warnings;
    use base &#39;Class::Accessor&#39;;
     
    __PACKAGE__-&gt;mk_accessors(qw/hoge fuga/);
    
    1;
    
    # Class::Accessor::Fast を使った場合
    package ClassAccessorFastTest;
    use strict;
    use warnings;
    use base &#39;Class::Accessor::Fast&#39;;
     
    __PACKAGE__-&gt;mk_accessors(qw/hoge fuga/);
    
    1;
    
    # perl5 OOP の場合
    package Bless;
    use strict;
    use warnings;
    
    sub new {
        my $class = shift;
        my $self  = shift || {};
        return bless $self, $class;
    }
    
    sub hoge {
        my $self = shift;
        if (@_) {
            $self-&gt;{hoge} = shift;
        } else {
            $self-&gt;{hoge};
        }
    }
    
    sub fuga {
        my $self = shift;
        if (@_) {
            $self-&gt;{fuga} = shift;
        } else {
            $self-&gt;{fuga};
        }
    }
    
    1;
    
    package main;
    use strict;
    use warnings;
    use Benchmark qw(cmpthese timethese);
     
    cmpthese timethese(100000, {
        moose =&gt; sub {
            my $moose = MooseTest-&gt;new( fuga =&gt; 1 );
            $moose-&gt;hoge(&#39;bbb&#39;);
            $moose-&gt;fuga;
            $moose-&gt;hoge;
        },
        moose_mi =&gt; sub {
            my $moose = MooseTest_mi-&gt;new( fuga =&gt; 1 );
            $moose-&gt;hoge(&#39;bbb&#39;);
            $moose-&gt;fuga;
            $moose-&gt;hoge;
        },
        mouse =&gt; sub {
            my $mouse = MouseTest-&gt;new( fuga =&gt; 1 );
            $mouse-&gt;hoge(&#39;bbb&#39;);
            $mouse-&gt;fuga;
            $mouse-&gt;hoge;
        },
        mouse_mi =&gt; sub {
            my $mouse = MouseTest_mi-&gt;new( fuga =&gt; 1 );
            $mouse-&gt;hoge(&#39;bbb&#39;);
            $mouse-&gt;fuga;
            $mouse-&gt;hoge;
        },
        accessor =&gt; sub {
            my $class = ClassAccessorTest-&gt;new({ fuga =&gt; 1 });
            $class-&gt;hoge(&#39;bbb&#39;);
            $class-&gt;fuga;
            $class-&gt;hoge;
        },
        accessor_fast =&gt; sub {
            my $class = ClassAccessorFastTest-&gt;new({ fuga =&gt; 1 });
            $class-&gt;hoge(&#39;bbb&#39;);
            $class-&gt;fuga;
            $class-&gt;hoge;
        },
        bless =&gt; sub {
            my $class = Bless-&gt;new({ fuga =&gt; 1 });
            $class-&gt;hoge(&#39;bbb&#39;);
            $class-&gt;fuga;
            $class-&gt;hoge;
        },
    });

結果はこんな感じになりました。何回か実行するとばらつくので３つほど結果を書き出しています。

    Benchmark: timing 100000 iterations of accessor, accessor_fast, bless, moose, moose_mi, mouse, mouse_mi...
      accessor:  2 wallclock secs ( 1.19 usr +  0.00 sys =  1.19 CPU) @ 84033.61/s (n=100000)
    accessor_fast:  0 wallclock secs ( 0.58 usr +  0.00 sys =  0.58 CPU) @ 172413.79/s (n=100000)
         bless:  1 wallclock secs ( 0.41 usr +  0.00 sys =  0.41 CPU) @ 243902.44/s (n=100000)
         moose: 21 wallclock secs (21.26 usr +  0.02 sys = 21.28 CPU) @ 4699.25/s (n=100000)
      moose_mi:  2 wallclock secs ( 1.67 usr +  0.00 sys =  1.67 CPU) @ 59880.24/s (n=100000)
         mouse:  0 wallclock secs ( 0.51 usr +  0.00 sys =  0.51 CPU) @ 196078.43/s (n=100000)
      mouse_mi: -1 wallclock secs ( 0.51 usr +  0.00 sys =  0.51 CPU) @ 196078.43/s (n=100000)
                      Rate moose moose_mi accessor accessor_fast mouse_mi mouse bless
    moose           4699/s    --     -92%     -94%          -97%     -98%  -98%  -98%
    moose_mi       59880/s 1174%       --     -29%          -65%     -69%  -69%  -75%
    accessor       84034/s 1688%      40%       --          -51%     -57%  -57%  -66%
    accessor_fast 172414/s 3569%     188%     105%            --     -12%  -12%  -29%
    mouse_mi      196078/s 4073%     227%     133%           14%       --    0%  -20%
    mouse         196078/s 4073%     227%     133%           14%       0%    --  -20%
    bless         243902/s 5090%     307%     190%           41%      24%   24%    --

    Benchmark: timing 100000 iterations of accessor, accessor_fast, bless, moose, moose_mi, mouse, mouse_mi...
      accessor:  1 wallclock secs ( 0.87 usr +  0.00 sys =  0.87 CPU) @ 114942.53/s (n=100000)
    accessor_fast:  0 wallclock secs ( 0.56 usr +  0.00 sys =  0.56 CPU) @ 178571.43/s (n=100000)
         bless:  1 wallclock secs ( 0.43 usr +  0.00 sys =  0.43 CPU) @ 232558.14/s (n=100000)
         moose: 18 wallclock secs (18.30 usr +  0.00 sys = 18.30 CPU) @ 5464.48/s (n=100000)
      moose_mi:  2 wallclock secs ( 1.57 usr +  0.00 sys =  1.57 CPU) @ 63694.27/s (n=100000)
         mouse:  0 wallclock secs ( 0.55 usr +  0.00 sys =  0.55 CPU) @ 181818.18/s (n=100000)
      mouse_mi:  1 wallclock secs ( 0.65 usr +  0.00 sys =  0.65 CPU) @ 153846.15/s (n=100000)
                      Rate moose moose_mi accessor mouse_mi accessor_fast mouse bless
    moose           5464/s    --     -91%     -95%     -96%          -97%  -97%  -98%
    moose_mi       63694/s 1066%       --     -45%     -59%          -64%  -65%  -73%
    accessor      114943/s 2003%      80%       --     -25%          -36%  -37%  -51%
    mouse_mi      153846/s 2715%     142%      34%       --          -14%  -15%  -34%
    accessor_fast 178571/s 3168%     180%      55%      16%            --   -2%  -23%
    mouse         181818/s 3227%     185%      58%      18%            2%    --  -22%
    bless         232558/s 4156%     265%     102%      51%           30%   28%    --

    Benchmark: timing 100000 iterations of accessor, accessor_fast, bless, moose, moose_mi, mouse, mouse_mi...
      accessor:  1 wallclock secs ( 0.90 usr +  0.00 sys =  0.90 CPU) @ 111111.11/s (n=100000)
    accessor_fast:  0 wallclock secs ( 0.75 usr +  0.00 sys =  0.75 CPU) @ 133333.33/s (n=100000)
         bless:  1 wallclock secs ( 0.47 usr +  0.00 sys =  0.47 CPU) @ 212765.96/s (n=100000)
         moose: 22 wallclock secs (21.62 usr +  0.01 sys = 21.63 CPU) @ 4623.21/s (n=100000)
      moose_mi:  1 wallclock secs ( 1.61 usr +  0.00 sys =  1.61 CPU) @ 62111.80/s (n=100000)
         mouse:  1 wallclock secs ( 0.45 usr +  0.00 sys =  0.45 CPU) @ 222222.22/s (n=100000)
      mouse_mi:  0 wallclock secs ( 0.45 usr +  0.00 sys =  0.45 CPU) @ 222222.22/s (n=100000)
                      Rate moose moose_mi accessor accessor_fast bless mouse_mi mouse
    moose           4623/s    --     -93%     -96%          -97%  -98%     -98%  -98%
    moose_mi       62112/s 1243%       --     -44%          -53%  -71%     -72%  -72%
    accessor      111111/s 2303%      79%       --          -17%  -48%     -50%  -50%
    accessor_fast 133333/s 2784%     115%      20%            --  -37%     -40%  -40%
    bless         212766/s 4502%     243%      91%           60%    --      -4%   -4%
    mouse_mi      222222/s 4707%     258%     100%           67%    4%       --    0%
    mouse         222222/s 4707%     258%     100%           67%    4%       0%    --

Mouseが爆速でblessより速いこともあるようです。にわかに信じられないのですが。何か最適化されているものでもあるのでしょうか？ちゃんと中身を見ないといけませんね。


### 思う事

速度というのは最近気にしているテーマで、Webアプリの１リクエストのレスポンスタイムが10msと100msとあったとして、それの時間差が90msと何となく微々たる物のように思う物でも分間10リクエストとして合計100msと1000msになり差が900msとどんどん大きくなっていくのが恐ろしいなぁと思ったりしています。もしもこれが分間じゃなくて秒間だったら？10リクエストじゃなくて100リクエストだったら？1000リクエストだったら？…まだ実感の伴わない話なのでアレですが今後直面する問題だろうなと感じています。モダンだ流行だと色々なものに飛びつくのも勉強になって良いですが、ただ実際それが実用に堪えうるのかどうかちゃんと検証することも覚えないといけないなと。そんなことを考えています。
]]>
</description>
<pubDate>Fri, 22 Jul 2011 19:41:35 +0900</pubDate>
</item>
<item>
<title>MySQLのパーティショニングを触ってみる</title>
<link>http://mix3.github.com/article/cd1db22b4fd91385020b90987772ef3e.html</link>
<description>
<![CDATA[
# MySQLのパーティショニングを触ってみる

MySQLで大容量のデータを扱うと削除処理が重くて涙目になることがあるので残さないデータを扱うテーブルはパーティショニングしてあげるのが良いようです。ログデータは典型的かもしれませんね。メリットとしては以下のような感じだと思います。

* DROP TABLE のようにパーティションのデータをサクっと消せる
* 刈り込みが出来る（検索範囲を限定出来る場合が有り、各クエリのパフォーマンスが良くなる可能性がある）

使う場合の注意として[漢のコンピュータ道](http://nippondanji.blogspot.com/2009/04/1.html)にてこんな感じに挙げられています。

* インデックスをつけるだけでカバー出来る場合が多い。
* パーショニングを使わずに、単にテーブルを分けてしまえばいい。
* テーブルが巨大にならないとあまり効果を実感できない。
* 使い方を間違えると性能が落ちてしまう。

以下、日別にパーティションを区切っていくサンプルになります。

### テーブル作成

    DROP TABLE IF EXISTS partition;
    CREATE TABLE partition (
        id         BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
        created_at DATETIME            NOT NULL,
        PRIMARY KEY (id, created_at)
    ) ENGINE=InnoDB;

### ベースとなるパーティションの作成

    ALTER TABLE partition PARTITION BY RANGE (TO_DAYS(created_at))
        (PARTITION p20110720 VALUES LESS THAN (TO_DAYS(&#39;2011-07-21 00:00:00&#39;)) COMMENT = &#39;2011-07-21 00:00:00&#39;);

### mysql_partition_cron.sh 

cronで順次パーティションを追加していきます。以下では毎日次の日の１日分を追加していますが１週間毎に纏めて追加とかしても良いでしょう。実際に運用する際はログを取ってメールを投げる等監視しておく方が良いですね。

    #!/bin/bash
    
    DAYSTR=`date --date &#39;1 day&#39; +&quot;%Y%m%d&quot;`
    DAY_2=`date --date &#39;2 day&#39; +&quot;%Y-%m-%d 00:00:00&quot;`
    
    QUERY=&quot;ALTER TABLE partition ADD PARTITION (PARTITION p$DAYSTR VALUES LESS THAN (TO_DAYS(&#39;$DAY_2&#39;)) COMMENT = &#39;$DAY_2&#39;)&quot;
    echo $QUERY
    echo $QUERY | mysql -u root partition

### 確認

#### INSERT

    mysql&gt; insert into partition value (null, &#39;2011-07-20&#39;);
    Query OK, 1 row affected (0.00 sec)

    mysql&gt; insert into partition value (null, &#39;2011-07-21&#39;);
    Query OK, 1 row affected (0.00 sec)

    mysql&gt; insert into partition value (null, &#39;2011-07-22&#39;);
    ERROR 1526 (HY000): Table has no partition for value 734705

存在しないパーティションへのINSERTはエラーになるので、パーティションの追加忘れ、追加ミスには注意。

    mysql&gt; insert into partition value (null, &#39;2011-07-19&#39;);
    Query OK, 1 row affected (0.01 sec)

#### パーティション分布
    mysql&gt; SELECT table_schema, table_name, partition_name, partition_ordinal_position, table_rows FROM information_schema.partitions WHERE table_name = &#39;partition&#39;;
    +--------------+------------+----------------+----------------------------+------------+
    | table_schema | table_name | partition_name | partition_ordinal_position | table_rows |
    +--------------+------------+----------------+----------------------------+------------+
    | partition    | partition  | p20110720      |                          1 |          2 |
    | partition    | partition  | p20110721      |                          2 |          1 |
    +--------------+------------+----------------+----------------------------+------------+
    2 rows in set (0.00 sec)

#### 刈り込み

    mysql&gt; explain partitions select * from partition where created_at &lt; &#39;2011-07-21 00:00:00&#39;;
    +----+-------------+-----------+------------+-------+---------------+---------+---------+------+------+--------------------------+
    | id | select_type | table     | partitions | type  | possible_keys | key     | key_len | ref  | rows | Extra                    |
    +----+-------------+-----------+------------+-------+---------------+---------+---------+------+------+--------------------------+
    |  1 | SIMPLE      | partition | p20110720  | index | NULL          | PRIMARY | 16      | NULL |    2 | Using where; Using index |
    +----+-------------+-----------+------------+-------+---------------+---------+---------+------+------+--------------------------+
    1 row in set (0.00 sec)

    mysql&gt; explain partitions select * from partition where created_at &lt; &#39;2011-07-22 00:00:00&#39;;
    +----+-------------+-----------+---------------------+-------+---------------+---------+---------+------+------+--------------------------+
    | id | select_type | table     | partitions          | type  | possible_keys | key     | key_len | ref  | rows | Extra                    |
    +----+-------------+-----------+---------------------+-------+---------------+---------+---------+------+------+--------------------------+
    |  1 | SIMPLE      | partition | p20110720,p20110721 | index | NULL          | PRIMARY | 16      | NULL |    3 | Using where; Using index |
    +----+-------------+-----------+---------------------+-------+---------------+---------+---------+------+------+--------------------------+
    1 row in set (0.01 sec)

前者だとp20110720からのみの検索になってるので刈り込み出来ているようです。これが大容量のデータに対してだと本来インデックがメモリに乗りきらずスワップしちゃうという状況でも、刈り込みによってメモリに収まる可能性が出て来るので、そうなった場合にパーティショニングの威力が発揮されるというのが想像出来ますね。

### まとめ

削除のコストは思いの外大きくて、レプリケーション環境下でしこしこ古いデータを削除するだけのバッチを走らせたときに削除間隔を大きく取らないと同期ズレがずんどこずんどこ溜まっていく、というのを経験したことがあります。パーティションを使うとそういう苦労はせずに済みそうなので有効活用したいですね。
]]>
</description>
<pubDate>Wed, 20 Jul 2011 16:28:25 +0900</pubDate>
</item>
<item>
<title>さくらVPSをちょこちょこ触ってみる</title>
<link>http://mix3.github.com/article/4d2ced9323e6b01dc90783c18675d2bd.html</link>
<description>
<![CDATA[
# さくらVPSをちょこちょこ触ってみる

と言っても特に何かしたとかは無かったり。

* sshのポートを変えた
* iptablesを設定した
* logwatchを導入した
* pacoを導入した

### sshのポート変更

セキュリティ的にはsshを公開鍵認証にしておくだけで基本大丈夫だとは思うのですが、アタックされることには変わりなく気持ち悪い物は気持ち悪いので一応変えておきました。

### iptablesの設定

何処でも見かける設定ですが以下のような基準でiptablesを設定するスクリプトを組みました。

* 内から外への通信以外は拒否
 * ただし内から外への通信の応答は通す
* SSH用の穴は用意する

#### iptables-init.sh

    #!/bin/sh
    
    # ルールクリア
    iptables -F
    iptables -X
    
    # 内から外への通信以外は破棄
    iptables -P INPUT   DROP
    iptables -P OUTPUT  ACCEPT
    iptables -P FORWARD DROP
    
    # ループバックは全て許可
    iptables -A INPUT  -i lo -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT
    
    # プライベートネットワークなんて無かったんや…
    iptables -A INPUT -s 10.0.0.0/8     -j DROP
    iptables -A INPUT -s 127.16.0.0/12  -j DROP
    iptables -A INPUT -s 192.168.0.0/16 -j DROP
    
    # SSH用の穴
    iptables -A INPUT -p tcp --dport {SSHのポート} -j ACCEPT
    
    # 内から外への通信の応答は通す
    iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

### logwatchの導入

ログも監視しないと意味ないのでlogwatchなるログを定期的に（デフォルトはcron.dailyを利用した毎日）メールで知らせるプログラムを導入してみました。yumで入れるとバージョンが結構古かったりするので[sourceforge](http://sourceforge.net/projects/logwatch/files/)から落としてインストールしました。rpmで入れるとデフォルトの設定ファイルが/usr/share/logwatch/default.conf以下となるようです。/etc/logwatch/conf以下に設定ファイルを置くと設定を上書きするようです。

とりあえずSSHのログとDiskスペースのログを監視するようにしました。デフォルトではService = Allで全部を監視するようにしてその後除外を設定しているのでその設定をコメントアウトしてSSHのログとDiskスペースのログに決め打ちしました。

#### /usr/share/logwatch/default.conf/logwatch.conf

    #Service = All
    #Service = &quot;-zz-network&quot; 
    #Service = &quot;-zz-sys&quot; 
    #Service = &quot;-eximstats&quot;

#### /etc/logwatch/conf/logwatch.conf

    MailTo = 送信先メールアドレス
    MailFrom = 送信元メールアドレス
    Service = sshd
    Service = zz-disk_space

rpmで入れているならばおそらく/etc/cron.daily/0logwatchにlogwatchスクリプトへのシンボリックリンクが貼られているので毎日定期的に実行されメールが届くようになるハズです。ただしデフォルトでは前日のログを送信する設定（Range = yesterday）になっていてログが記録されていなければ送信されません。

### pacoの導入

pacoはmake installしたソフトを管理するものです。yumなどのパッケージ管理ソフトで管理されている以外のものについてもきちっと管理したい場合は導入するととても幸せになれそうです。

* 参考
 * [paco](http://paco.sourceforge.net/)
 * [make install&quot;したソフトウェアを管理できる超便利ツール「Paco」](http://d.hatena.ne.jp/rx7/20081011/p2)

pacoのインストール自体はconfigure make make installで出来ます。またpaco自身をpacoで管理するためにmake installの後make logmeを実行します。これ以降make installするときはpaco -D make insatllというふうにすることでそのソフトをpacoの管理下に置いてくれます。

#### 注意

pacoはデフォルトで/usr/local/bin以下にインストールされるのですがsudoで実行するとPATHが引き継がれずpacoが見つからないためmake logmeに失敗してしまいました。./configure prefix=/binなどインストール場所を設定してsudoでも実行出来るようにするか、sudo時の環境変数の引き継ぎをするなどして回避しましょう。

なおsudo時の環境変数の引き継ぎ方法は色々あるようです。

#### bashrcで設定

    alias sudo=&quot;sudo env PATH=$PATH&quot;

#### visudoで設定

    Defaults:{run_user} !env_reset
        or
    Defaults env_keep+=&quot;PATH&quot;

#### sudo -s で実行

### 次回は

Nginx+plackでなんか適当に外から見れる環境を作りたいかな。
]]>
</description>
<pubDate>Sun, 17 Jul 2011 08:02:28 +0900</pubDate>
</item>
<item>
<title>さくらVPS借りてみた</title>
<link>http://mix3.github.com/article/d0eaf97b5d1fa525640b284666ed63c7.html</link>
<description>
<![CDATA[
# さくらVPS借りてみた

### さくらVPS借りてみた

インフラエンジニアを目指す宣言したは良いものの、自分で管理する外部に晒されている環境すら持ってないのはどうかという話があるのでまずはさくらVPSを借りてみることに請求が来る前に試用出来るようですぐに使えるのは凄いですねぇ。さくら様様です。（ちなみに一応自宅サーバ用のマシンは手元にあるのですが外部ディスプレイ手に入れてからとか考えてたら結局こっち来てから起動することはありませんでした…）

インフラやりたいと言いつつミドルウェアの知識はまったく０に近い状態なので、ミドルウェアの勉強用に使って行きたいかなと思います。

### とりあえず入れて最初にやったこと

* ユーザの設定
 * rootのパスを変更する
 * 一般ユーザを追加する(sudoで管理者の権限を得るためにグループはwheelに入れる)
 * 一般ユーザのパスを変更する
 * visudoでwheelグループがsudoで管理者権限で実行できるように変更
* SSHのログインを公開鍵に変更
 * /etc/ssh/sshd_config を修正
 * キーペアを作成してログイン
* system-config-securitylevel-tui でssh以外を閉じる
* git,perlbrew,cpanmを入れる

大体こんな感じ。SSHは以下のような感じで設定。コメントアウト外したりyes,no変えたり。

    PermitRootLogin no
    AuthorizedKeysFile      .ssh/authorized_keys
    PasswordAuthentication no
    ChallengeResponseAuthentication no

「ChallengeResponseAuthentication no」はデフォルトでnoだけれどこれがyesになってると公開鍵の認証に失敗したらパスワード認証も試すといった挙動をするので、公開鍵に限定する場合はちゃんとnoになってることをチェック。

ファイアーウォールの設定は一旦 system-config-securitylevel-tui 使ってやりましたが、細かく設定する場合は当然 iptables を使って設定しないといけないので、おいおいここは最適化していきたいです。

他にもデーモンを止める話とかもあるので以下とか参考にしつつ最適化していきたいです。

[さくらVPSを使うときに最初にやっておきたいこと(CentOS編)](http://sakura.off-soft.net/blog/sakura_vps_centos_first_setup.html)
]]>
</description>
<pubDate>Tue, 05 Jul 2011 10:56:01 +0900</pubDate>
</item>
<item>
<title>Markdownブログ</title>
<link>http://mix3.github.com/article/2e06a95d629f75805f2bfdd404f9c6fa.html</link>
<description>
<![CDATA[
# Markdownブログ

### Markdownブログ

Markdownでブログが書きたかった。githubのページ公開機能なら何でも良かった。今は反省している。

[https://github.com/mix3/mix3.github.com](https://github.com/mix3/mix3.github.com)

#### 使い方

1. resource以下に.mdでMarkdownの文書を作成する。
2. script/generate.plを実行する
3. githubにコミットする
4. [こんな感じになる](http://mix3.github.com/)

#### ちなみに

pixivブログでjsを使ってごにょごにょしようとしてみたがムリっぽい。HTMLの中にMarkdownを埋め込んだり別サーバに置いてみたり色々してみたがどうにも上手く行かず。

* 別ドメインにならざるを得ずセキュリティ制限が掛かる
* JSONPだとヒアドキュメントが使えないのでキモイ
* ２重エスケープなどで上手く表示出来ない

などなど。

ということでpixivブログで割と満足している現状全く使いどころが無いMarkdownブログだけどまあいっか。
]]>
</description>
<pubDate>Sun, 03 Jul 2011 00:00:00 +0900</pubDate>
</item>
<item>
<title>MobaSiFを弄ってみた</title>
<link>http://mix3.github.com/article/6da22b3e8148ef357d95a79d44b8d254.html</link>
<description>
<![CDATA[
# MobaSiFを弄ってみた

MobaSiFは機能がミニマムなので、コントローラに相当すると思われる部分にて以下の記述をします。

* アプリケーションロジックを記述
* レスポンスの値を生成＆セット

具体的に書くと以下のような感じ。

#### conf/pages.conf

    our %PAGE = (
        &#39;test&#39; =&gt; [0,0,0, &#39;Page::Sample&#39;, &#39;pageMain&#39;],
    );

#### pm/Page/Sample.pm

    package Page::Sample;
    sub pageMain {
        my $func = shift;
        # レスポンスの生成
        my $html = HTMLTemplate::insert(&#39;sample/index&#39;, $rhData);
        # レスポンスヘッダに値をセット
        Response::output(¥$html);
    }

#### template/_system/sample/index.html

    &lt;html&gt;
    &lt;head&gt;&lt;title&gt;$CON:title$&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;
        test
    &lt;/body&gt;
    &lt;/html&gt;

普段触るフレームワークだと「レスポンスの生成」も「レスポンスヘッダへの値のセット」も自分ですることはまず無くて。テンプレートに渡す値をハッシュで用意して、テンプレート自体はクエリパスなどから自動で判断するかもしくは明示的に指定するかする場合が多い。

ということでこの辺り結構違和感が大きいのでちょっとそれっぽくなるように手を入れてみた。

#### pm/Context.pm

&lt;script src=&quot;https://gist.github.com/1038137.js?file=Context.pm&quot;&gt;&lt;/script&gt;

#### pm/Page/Main.pm

&lt;script src=&quot;https://gist.github.com/1038137.js?file=Main.pm&quot;&gt;&lt;/script&gt;

#### conf/pages.conf

    our %PAGE = (
            .
            .
            .
        &#39;test&#39;  =&gt; [0,0,0, &#39;Page::Sample&#39;, &#39;test&#39;],
        &#39;test1&#39; =&gt; [0,0,0, &#39;Page::Sample&#39;, &#39;test1&#39;],
        &#39;test2&#39; =&gt; [0,0,0, &#39;Page::Sample&#39;, &#39;test2&#39;],
    );

#### pm/Page/Sample.pm

&lt;script src=&quot;https://gist.github.com/1038137.js?file=Sample.pm&quot;&gt;&lt;/script&gt;

#### template/_system/sample/test.html

&lt;script src=&quot;https://gist.github.com/1038137.js?file=test.html&quot;&gt;&lt;/script&gt;

### 次回はDB周りを触ってみる

commit,transactionなどをラップしているものの、サンプルコードではSQL直叩きなのでこれもDBICなどでゴリゴリモデルに落とし込むなどして使った方が良いかもしれない。
]]>
</description>
<pubDate>Wed, 22 Jun 2011 00:00:00 +0900</pubDate>
</item>
<item>
<title>MobaSiFを触ってみた</title>
<link>http://mix3.github.com/article/72498178ebb89e2e4d3c18efd6c1918b.html</link>
<description>
<![CDATA[
# MobaSiFを触ってみた

### インストール

環境はCentOS5.6で極力yumで対処してみた。

* CentOS 5.6
* Apache 2.2.3 (yum install)
* fastcgi 2.4.0 (yum install)
* mod_fastcgi 2.4.2 (source install)
* mysql 5.1.57 (rpm install)
* perl 5.8.8 (yum install)

ちなみにMobaSiFのdocsに記載されている対応環境の内容は以下の通り

               要求       確認環境
    CentOS     4.x / 5.x  4.5 (i386)
    Apache     1.3.x      1.3.41
    MySQL      5.0.x      5.0.51a
    perl       5.8.x      5.8.0
    fastcgi    2.4.x      2.4.6

### 詰まった所、注意点

* MobaSiF
 * mod_fastcgiとmod_fcgidがあるがMobaSiFはmod_fastcgi
 * yumで入れたApacheのバージョンが2.2だったが、mod_fastcgiは2.0までしか対応していない。
 * パッチを当てれば2.2にmod_fastcgiを入れるられる⇒&#39;Apache2.2＋fastcgiで Ruby on Rails&#39;
* perl
 * FastCGIがシステム標準のperlを使うのでperlbrewを使うと混乱する。
 * 素直にシステム標準のperlを使うのが楽
* Apache
 * MobaSiFとは全然関係ないがバーチャルホストでDocumentRootの設定に変な癖がある⇒VirtualHost環境化でのPermission Denied

### MobaSiFのミニマムサ
ンプル

MobaSiFでのページとURLの対応は以下のようになる

* ルート
 * http://[domain]/
* 各ページ（アンダースコア＋ページ名）
 * http://[domain]/[_ページ名前]

### ページを追加してみる

#### conf/pages.conf

    our %PAGE = {
            .
            .
            .
        &#39;sample&#39; =&gt; [0,    package Page::Sample;
    
    use strict;
    use HTMLTemplate;
    use Response;
    
    sub pageMain {
        my $func = shift;
        my $rhData = {};
    
        my $html = HTMLTemplate::insert(&quot;sample/top&quot;, $rhData);
        Response::output(\$html);
    }
    
    1;0,0, &#39;Page::Sample&#39;, &#39;pageMain&#39;],
        # http://[domain]/_sample にアクセスすると Page::SampleモジュールのpageMainの処理が走る
    };

#### pm/Page/Sample.pm

    package Page::Sample;
    
    use strict;
    use HTMLTemplate;
    use Response;
    
    sub pageMain {
        my $func = shift;
        my $rhData = {};
    
        my $html = HTMLTemplate::insert(&quot;sample/top&quot;, $rhData);
        Response::output(\$html);
    }
    
    1;

### テンプレートのコンパイル

MobaSiFでは速度を出すためにアプリで機種毎に出し分けなどの処理をしないよう最初からテンプレートを機種別に生成したりするようです。（変なバイナリデータをテンプレートに埋め込んでいたり他にも色々やってそうな感じ）

    $ perl script/tool/compile_template

#### conf/pages.confの数字の意味

    &#39;ページ名&#39; =&gt; [ UID_ST, USER_ST, SERV_ST, モジュール, サブルーチン ]

* UID_ST
 * 0:情報なし
 * 2:serial/uid あり
* USER_ST
 * 0:非会員でもOK
 * 1:会員（メアド未登録でもOK）
 * 2:会員（メアド登録済）
* SERV_ST (以下を足したもの)
 * 1:自主退会だと不能
 * 2:運用退会だと不能
 * 4:PENALTYだと不能
 * 8:メール不達だと不能

### まとめ

* 機能は非常にミニマム
 * 文字コードはテンプレートやコード等でsjis,utf8,eucが入り交じる
 * テンプレートの中に絵文字のバイナリを直接書く
 * ロジックの所でレスポンスにテンプレートと引数を合成したものの返り値を渡す処理を自分で書く。

⇒多分拡張して使われる事が前提と思ってよい。

* 古いのでPlackに対応していないため、動作確認までの環境構築が非常に面倒。
 * 開発段階でわざわざApacheとFastCGIを入れないといけない

⇒今時Plack対応して欲しいかも。開発段階でFastCGIがどうのとかあんまり考えたく無い。

以下で説明されている通りモダンじゃないのは確かかもしれませんね。 

[第42回PHP勉強会 MobaSiF 発表資料](http://www.slideshare.net/bobpp/42php-mobasif-1351953)
]]>
</description>
<pubDate>Tue, 21 Jun 2011 00:00:00 +0900</pubDate>
</item>
<item>
<title>jquery-presentationを弄ってみた</title>
<link>http://mix3.github.com/article/1f582291f61c7e0bda7e728647b42609.html</link>
<description>
<![CDATA[
# jquery-presentationを弄ってみた

最近自分の進むべき道の事について考えたり考えなかったりしているmix3です。

### GoogleDocsも良いけれど

社内の勉強会でとある『未完』に終わったお話したのですが、そのときパワポに何を使おうか考えて普段はGoogleDocsを使ってるのですが、こんなパワポを見てHTML形式も良いなと思い、HTMLベースのパワポツールを探してみたところ以下のものが自分の琴線に触れました。
琴線に触れたもの

* jquery-presentation - jQuery based presentation framework. [DEMO]
* HTML をプレゼン形式に表示する jQuery プラグインを作ってみた [DEMO]
* 「イカワイパー」なHTMLベースのプレゼンツール「SliDegeso」を作ってみたでゲソ [DEMO]
* slippy [DEMO]

イカに凄く惹かれたのですが上手くワイパーの動作をしてくれず見送り。一番シンプルそうなjquery-presentationを今回は使ってみました。slippyも結構良い感じっぽいので次回はそれを使ってみたいと思います。

### jquery-presentationはちょっとシンプル過ぎる

jquery-presentationは実はページ送り（戻り）しか出来ない超絶シンプルなツールです。デフォルトのページ送りのエフェクトや、センター表示、ページ番号管理表示などはありますがそれだけです。「一部表示を隠して順に表示する」といったパワポの基本的な事が出来なかったりします。なのでその程度のことぐらいは出来てほしいなと思い少し手を入れました。こんな感じです。

[デモはこちら](http://dl.dropbox.com/u/5299588/jquery-presentation/index.html)

&lt;script src=&quot;https://gist.github.com/1019885.js&quot;&gt; &lt;/script&gt;

表示する順序や、visibility:hidden/display:noneの使い分けまでやりたいなと思いつつ片手間に弄ったので隠して表示が出来る程度にしています。やりすぎると「他のツール使え」ということになりますしね。

ということで発表自体は非常に残念なことになったので精進して行きたいです。
ちなみに

HTMLベースのパワポの弱点としてスライドシェアに上げにくい（PDFにしにくい）というものがあります。スライドシェアに上げる前提の場合はHTMLベースは避けた方が良いでしょう。
]]>
</description>
<pubDate>Sun, 12 Jun 2011 00:00:00 +0900</pubDate>
</item>
<item>
<title>Qudoでログ回収</title>
<link>http://mix3.github.com/article/7343925d5b5db5964a28dff94b1e9334.html</link>
<description>
<![CDATA[
# Qudoでログ回収

* SCPやrsyncやらで各アプリケーションサーバから回収
 * 自由が利く
* 各アプリケーションサーバから解析サーバへ投げてもらう
 * HDFSなどHadoopが扱うファイルシステムに直接入れる事が可能
 * ※ただし、各アプリケーションサーバがそのファイルシステムを扱えるように色々セットアップが必要

後者のアプリから投げてもらう方だと各サーバでファイルシステムを扱えるようセットアップが必要になるので、そこまでアプリ側に負担を掛けられないかなということで今考えているのは前者の方法となります。

### コード

Hadoopが扱うファイルシステムはHDFSという前提で前回構築した環境でサンプルを作ってみました。

### シェルスクリプトで並列回収

まず最初にシェルスクリプトで書いてみました。「これだと回収先のアプリが100万個ある場合は100万個同時にダウンロードしちゃうってことだよね？」というもっともな指摘で没になりました。まったくもってその通りだと思います。

&lt;script src=&quot;https://gist.github.com/954830.js&quot;&gt; &lt;/script&gt;

### Qudoで並列回収

* ジョブ／キューを使いたい
 * なんとなくジョブは消えてほしく無い
 * 失敗したらリトライしてほしい
* 回収は並列
 * でも同時実行数は上限あり

以上の要件で最初はTheSchwartz＆Parallel::Preforkで考えていましたが何やらGearmanでもDBを使って動作させられるという話があったりQudoを見つけてみたりで、でもやりたいことって別にそんなに複雑な事でもないので結局何使っても良いかなと思ってQudoを選びました。後々機能を増やしたい時にフックポイントが色々用意されているので悪くないかなと。

&lt;script src=&quot;https://gist.github.com/951476.js&quot;&gt; &lt;/script&gt;

どうでも良いですがnekokakさん曰くQudoは「駆動」らしいですが「弓道」の方が良いと思います＾＾
]]>
</description>
<pubDate>Wed, 04 May 2011 00:00:01 +0900</pubDate>
</item>
<item>
<title>Mojolicious::Lite + Teng + SNBinder + Xslate (+ SQLite/OnMemory) でCRUDアプリを作ってみた</title>
<link>http://mix3.github.com/article/31f556362690556d70162368934b2d08.html</link>
<description>
<![CDATA[
# Mojolicious::Lite + Teng + SNBinder + Xslate (+ SQLite/OnMemory) でCRUDアプリを作ってみた

Mojolicious::Liteは一つのファイルの中に全部突っ込んでWebアプリが作れるということなので、今自分が気になってるものを習作の意味を込めて全部詰め込んでCRUDアプリを作ってみました。jQueryも入れたかったけど書いていてカオスになったのでSNBinderの補助とページャ以外は無しにしました。

色々突っ込んでみたものは以下

* Teng
 * ページャ（プラグイン）
 * inflate/deflate
 * triggerの代替 Class::Method::Modifiers
 * Devel::KYTProf
* Xslate
 * Mojolicious::Liteで継承
* SNBinder
 * コンセプト

## 雑感

### Teng

nekokakさん作の軽量ORMであるTeng。

* Skinnyの後継
* DBIの薄いラッパー

ということで、シンプルさを残しつつさらっと書きたいことはさらっと書けるように配慮されてて良い感じです。Skinnyと使い方はあまり変わらない事や、そもそもシンプルなのでコードを追いかけやすいということもあって理解はしやすそうです。ただドキュメントはまだまだ少ない感じで【実践Teng — Teng-Doc v0.01 documentation】という非公式のページも出来ているものの未掲載も残っていて、使用例などと合わせてドキュメントの充実が待たれているといった所でしょうか。

### Xslate

なんだかとてつもなく速いテンプレートエンジン。自分はまだテンプレートエンジンの速度を気にしないといけないような状況には出会っていないので、速さというものの有り難さが分らないのですが速いそうです。また、テンプレートの書き方を選択出来るようでTTの文法で書く事も出来るようです。あと継承が扱えるのが良い感じです。テンプレートエンジンで継承は思いの外対応していないことが多いので。

### SNBinder

データとテンプレートの組み合わせたものを一つの部品として見て、画面に貼付けて行く事で画面を構築して行くというコンセプトの、jsのテンプレートエンジン。この考え方は自分の大好きなJavaのWebアプリケーションフレームワーク、WicketのViewと似ていて非常に気に入っています。よくあるテンプレートエンジンのテンプレートの中にコードを埋め込んで画面を作る方法よりテンプレートがHTML的にプレーンでシンプルになるのが良いと思います。ただSNBinderはあまりにも機能がミニマムなのであえて使うほどでも無いかなとも思っています。後、データはサーバでViewがクライアントにあるので記述がシームレスに出来ないのもまた障壁のひとつかなと。Wicketだと全てJavaでサーバサイドで書けるので書いていて本当に幸せです。Java使いの方はWicketを使いましょう！

## メモ

以下今回コードを書いていてのメモ

### triggerの代替 Class::Method::Modifiers

Skinnyで言うtriggerがTengでは廃止されていて、代替としてClass::Method::Modifiersを使う事を提案されています。今回はTimestampとSoftDeleteの振る舞いを表現するために使ってみました。具体的にはcreated_at,updated_at,deleted_atの３カラムを用意してinsert,update,deleteの操作でそれぞれ自動的に日付が入力されるようにしました。また検索時にSoftDeleteされたものが検索の対象から排除されるようにしました。Class::Method::Modifiersの使い方を理解していないのでこれで良いのかは怪しいですが、それぞれsearchやinsertなどの動作を変更して*_atの値を操作しています。

    package Message;
    use parent &#39;Teng&#39;;
    __PACKAGE__-&gt;load_plugin(&#39;Pager&#39;);
    
    use Class::Method::Modifiers;
    
    around delete =&gt; sub {
        my ($orig, $self, $table_name, $delete_condition) = @_;
        my $update_row_data = {
            deleted_at =&gt; DateTime-&gt;now-&gt;set_time_zone(&#39;Asia/Tokyo&#39;),
        };
        $self-&gt;update($table_name, $update_row_data, $delete_condition);
    };
    
    before update =&gt; sub {
        my ($self, $table_name, $update_row_data, $update_condition) = @_;
        if (!$update_row_data-&gt;{deleted_at}) {
            $update_row_data-&gt;{updated_at} = DateTime-&gt;now-&gt;set_time_zone(&#39;Asia/Tokyo&#39;);
        }
    };
    
    before insert =&gt; sub {
        my ($self, $table_name, $row_data) = @_;
        $row_data-&gt;{created_at} = DateTime-&gt;now-&gt;set_time_zone(&#39;Asia/Tokyo&#39;);
        $row_data-&gt;{updated_at} = DateTime-&gt;now-&gt;set_time_zone(&#39;Asia/Tokyo&#39;);
    };
    
    before fast_insert =&gt; sub {
        my ($self, $table_name, $row_data) = @_;
        $row_data-&gt;{created_at} = DateTime-&gt;now-&gt;set_time_zone(&#39;Asia/Tokyo&#39;);
        $row_data-&gt;{updated_at} = DateTime-&gt;now-&gt;set_time_zone(&#39;Asia/Tokyo&#39;);
    };
    
    before search =&gt; sub {
        my ($self, $table_name, $search_condition, $search_attr) = @_;
        $search_condition-&gt;{deleted_at} = \&#39;IS NULL&#39;;
    };
    
    before search_with_pager =&gt; sub {
        my ($self, $table_name, $where, $opts) = @_;
        $where-&gt;{deleted_at} = \&#39;IS NULL&#39;;
    };
    
    1;
    
    my $result = $model-&gt;single(&#39;message&#39;, {
        id =&gt; $self-&gt;param(&#39;id&#39;)
    });
    
    $model-&gt;fast_insert(&#39;message&#39;, {
        message =&gt; $self-&gt;param(&#39;message&#39;),
    });
    
    $model-&gt;update(&#39;message&#39;,
        {
            message =&gt; $self-&gt;param(&#39;message&#39;),
        },
        {
            id =&gt; $self-&gt;param(&#39;id&#39;),
        }
    );
    
    $model-&gt;delete(&#39;message&#39;, {
        id =&gt; $self-&gt;param(&#39;id&#39;),
    });
    
    my ($rows, $pager) = $model-&gt;search_with_pager(
        &#39;message&#39;,
        {
        },
        {
            order_by =&gt; &#39;id DESC&#39;,
            page =&gt; $page,
            rows =&gt; 3,
        }
    );

### Mojolicious::LiteでのXslateの継承

Xslateで継承を使わないというのはありえないと思うのですが、Mojolicious::Liteでのサンプルが見つからなかったのでちょっと悩みました。実際はhogehoge.txで定義してincludeやcascadeなどでそれを指定するだけでした。

    @@ base.tx
    &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
    &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
      &lt;head&gt;
        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
        &lt;script src=&quot;http://www.google.com/jsapi&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;//&lt;![CDATA[
            google.load(&#39;jquery&#39;, &#39;1.4.4&#39;);
        //]]&gt;&lt;/script&gt;
        &lt;script src=&quot;https://github.com/snakajima/SNBinder/raw/master/snbinder-0.5.3.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    : include main_js
        &lt;title&gt;Mojolicious::Lite + Teng + SNBinder + Xslate (+ SQLite/OnMemory)&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
    :   block content -&gt; { }
      &lt;/body&gt;
    &lt;/html&gt;
    
    @@ form.tx
    &lt;form method=&quot;post&quot; action=&quot;&lt;: $path :&gt;&quot;&gt;
    : if ($id) {
      &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&lt;: $id :&gt;&quot;&gt;
    : }
      &lt;p&gt;&lt;textarea name=&quot;message&quot; cols=&quot;50&quot; rows=&quot;10&quot; &gt;&lt;: $message :&gt;&lt;/textarea&gt;&lt;/p&gt;
      &lt;p&gt;&lt;input type=&quot;submit&quot; /&gt;&lt;/p&gt;
    &lt;/form&gt;
    
    @@ index.html.tx
    : cascade base
    : override content -&gt; {
    
    : include form { path =&gt; &quot;/create&quot; }
    
    &lt;div id=&quot;main&quot; style=&quot;display:none;&quot;&gt;
      &lt;p&gt;Accessing server ...&lt;/p&gt;
    &lt;/div&gt;
    
    : }

### SQLite/OnMemory

実はSQLiteってオンメモリ（正しくはインメモリかな？）で動作するんですね。知りませんでした。これのおかげで必要なCPANモジュールが入っていれば本当に一つのファイルで動作するアプリになりました。ただしオンメモリなので切断されると当然データが消えます。また、複数プロセスから接続は出来ないようでStarmanなどのHTTPDと組み合わせて動かすと勝手に複数ワーカーが起動して動作するため上手く動きません。オンメモリでもDB名を付けることが出来たり、コネクションプールで接続を維持し続ける方法があったりするんじゃないかとは思うのですが、ちょっと良くわかりません。H2DBではそういうことが出来た覚えがあるのですがさて。

    my $model = Message-&gt;new(
        dbh =&gt; DBI-&gt;connect(
            &#39;dbi:SQLite:dbname=:memory:&#39;, &#39;&#39;, &#39;&#39;,
            {
                RaiseError     =&gt; 1,
                PrintError     =&gt; 0,
                AutoCommit     =&gt; 1,
                sqlite_unicode =&gt; 1,
            }
        )
    );

## コード

コードはGistに上げています

&lt;script src=&quot;https://gist.github.com/953572.js&quot;&gt; &lt;/script&gt;
]]>
</description>
<pubDate>Wed, 04 May 2011 00:00:00 +0900</pubDate>
</item>
</channel>
</rss>
<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
 xmlns:blogChannel="http://backend.userland.com/blogChannelModule"
>

<channel>
<title>&#x840C;&#x3048;&#x30AD;&#x30E3;&#x30E9;&#x3068;&#x306F;&#x4F55;&#x3060;&#x3063;&#x305F;&#x306E;&#x304B;</title>
<link>http://mix3.github.io</link>
<description>&#x30AE;&#x30FC;&#x30AF;&#x306B;&#x3082;&#x7D75;&#x63CF;&#x304D;&#x306B;&#x3082;&#x306A;&#x308C;&#x306A;&#x3044;&#x8005;&#x306E;&#x672B;&#x8DEF;</description>

<item>
<title>ORDER BY &#x3084; LIMIT &#x3092;&#x542B;&#x3080;&#x5834;&#x5408;&#x306E; select for update</title>
<description>
<![CDATA[
<p>最近 DBIC を使ってコードを書いてるけどオブジェクトの永続化の功罪について想いを馳せることが多いmix3です</p>

<pre><code>CREATE TABLE user_item (
  id           BIGINT  UNSIGNED NOT NULL AUTO_INCREMENT,
  user_id      INTEGER UNSIGNED NOT NULL DEFAULT 0,
  item_id      INTEGER UNSIGNED NOT NULL DEFAULT 0,
  is_equiped   TINYINT UNSIGNED NOT NULL DEFAULT 0,
  is_protected TINYINT UNSIGNED NOT NULL DEFAULT 0,
  INDEX idx_1 (user_id, item_id, is_protected),
  INDEX idx_2 (user_id, item_id, is_protected, is_equiped),
  INDEX idx_3 (user_id, item_id, is_protected, id),
  INDEX idx_4 (user_id, item_id, is_protected, is_equiped, id),
  PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARACTER SET utf8mb4;
</code></pre>

<p>こんなテーブルがあったとして、以下の優先順位で抽出したい</p>

<ul>
<li>is_protected = 1 は保護されているので除外</li>
<li>id 順に SELECT
<ul>
<li>ただし is_equiped = 1 は SELECT の対象だが装備してるので優先度を低く</li>
</ul></li>
</ul>

<p>このとき user_id = 1, item_id = 1 のものを 2個 SELECT する場合</p>

<pre><code>SELECT * FROM user_item
WHERE user_id = 1
AND   item_id = 1
AND   is_protected = 0
ORDER BY is_equiped, id ASC LIMIT 2;
</code></pre>

<p>多分こんなクエリになると思う　実際にINSERTして試してみる</p>

<pre><code>INSERT into user_item
  (user_id, item_id, is_equiped, is_protected)
VALUES
  (1, 1, 1, 1), -- 装備中 &amp; 保護されてる
  (1, 1, 1, 0), -- 装備中
  (1, 1, 0, 0),
  (1, 1, 0, 0),
  (1, 1, 0, 0),
  (1, 2, 0, 0);

mysql&gt; SELECT * FROM user_item WHERE user_id = 1 AND item_id = 1 AND is_protected = 0 ORDER BY is_equiped, id ASC LIMIT 2;
+----+---------+---------+------------+--------------+
| id | user_id | item_id | is_equiped | is_protected |
+----+---------+---------+------------+--------------+
|  3 |       1 |       1 |          0 |            0 |
|  4 |       1 |       1 |          0 |            0 |
+----+---------+---------+------------+--------------+
</code></pre>

<p>期待通り id:1 は除外 id:2 は優先度低いので id:3,4 が帰ってきている</p>

<h3>select for update</h3>

<p>トランザクション内で select for update するとロックしてくれる</p>

<pre><code>BEGIN;
SELECT * FROM user_item WHERE id = 1 FOR UPDATE;
</code></pre>

<p>ターミナルを二つ開いてそれぞれで上記SQLを流すと片方の SELECT が待たされる</p>

<p>ところで select for update に ORDER BY LIMIT が含まれる場合はどうなるのだろうか？</p>

<pre><code>SELECT * FROM user_item FORCE INDEX (idx_N)
WHERE user_id = 1
AND   item_id = 1
AND   is_protected = 0
ORDER BY is_equiped, id ASC LIMIT 2 FOR UPDATE;
</code></pre>

<p>したあとに</p>

<pre><code>SELECT * FROM user_item WHERE id = N FOR UPDATE;
</code></pre>

<p>を idx_1~4, id = 1 ~ 6 まで試してみた</p>

<table border="1">
    <thead>
        <tr>
            <th>

            </th>
            <th>
                id=1
            </th>
            <th>
                id=2
            </th>
            <th>
                id=3
            </th>
            <th>
                Id=4
            </th>
            <th>
                id=5
            </th>
            <th>
                id=6
            </th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>
                idx_1
            </th>
            <td>

            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>

            </td>
        </tr>
        <tr>
            <th>
                idx_2
            </th>
            <td>

            </td>
            <td>

            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>

            </td>
            <td>

            </td>
        </tr>
        <tr>
            <th>
                idx_3
            </th>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>

            </td>
        </tr>
        <tr>
            <th>
                idx_4
            </th>
            <td>

            </td>
            <td>

            </td>
            <td>
                ×
            </td>
            <td>
                ×
            </td>
            <td>

            </td>
            <td>

            </td>
        </tr>
    </tbody>
</table>

<p>こんな感じになった</p>

<p>ORDER BY や LIMIT などを含む select for update も index を張っていればロック範囲を最小限に抑えらえるようだ</p>

<p>ただ idx_3 は id=1 までロックされて変な index を張るとロックの範囲も変な感じになるようだ</p>

<p>idx_2 が idx_4 と同じ最小範囲のロックをしているのは id が primary key だからだろうか？</p>

<h3>結論</h3>

<p>index は大事</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2015/01/24/20150124/</guid>
<pubDate>Sat, 24 Jan 2015 00:00:00 -0000</pubDate>
</item>
<item>
<title>DBIC&#x306E;prefetch</title>
<description>
<![CDATA[
<p>洒落になっていない勢いで無能を晒して首が飛びそうになってます 皆さんいかがお過ごしでしょうか mix3 です。</p>

<p>今回は「クエリ飛びすぎなので where in して prefetch しましょう」と言われてwhere inはわかるけどprefetchはなんぞ？となったのでとりあえずサンプル書いてみました。</p>

<h3>例えば</h3>

<p><img src="https://raw.githubusercontent.com/mix3/dbic-prefetch-sample/master/docs/er.png" alt="erd" width="100%" /></p>

<ul>
<li>ユーザがいる</li>
<li>装備がある</li>
<li>ユーザは装備を複数持っている</li>
<li>ユーザはアバターを複数持っている</li>
<li>アバターは複数の装備セットを持っている</li>
<li>装備セットは頭,体,足の装備を持っている</li>
</ul>

<p>こんな感じでなんかアバターがあって着せ替えが出来る、着せ替えさせやすいようにセットが作れるようになってるみたいな。</p>

<p>で、このとき50人のユーザの現在装備している装備のidを持ってこいとなったとき愚直にやると多分こんな感じ</p>

<pre><code>subtest simple =&gt; sub {
    my @sqls = trace_sqls {
        for my $user_id ( 1 .. 50 ) {
            my $user_row = schema-&gt;resultset('User')-&gt;find($user_id);
            $user_row-&gt;current_ua;
            $user_row-&gt;current_ua-&gt;current_uae_set;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae-&gt;ae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae-&gt;ae;
            $user_row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae-&gt;ae;
        }
    };
    pass sprintf "count: %d", scalar(@sqls);
};
</code></pre>

<p>450クエリ飛ぶ</p>

<p>where in を使ってユーザを取ってくるところを1クエリに絞ると</p>

<pre><code>subtest "where in" =&gt; sub {
    my @sqls = trace_sqls {
        my @ids = 1 .. 50;
        my $user_rs = schema-&gt;resultset('User')-&gt;search( { id =&gt; { -in =&gt; \@ids } } );
        while ( my $row = $user_rs-&gt;next ) {
            $row-&gt;current_ua;
            $row-&gt;current_ua-&gt;current_uae_set;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae-&gt;ae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae-&gt;ae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae-&gt;ae;
        }
    };
    pass sprintf "count: %d", scalar(@sqls);
};
</code></pre>

<p>401クエリ飛ぶ where in で50クエリほど減る。</p>

<p>ここでprefetchを使うと</p>

<pre><code>subtest "where in + prefetch" =&gt; sub {
    my @sqls = trace_sqls {
        my @ids = 1 .. 50;
        my $user_rs = schema-&gt;resultset('User')-&gt;search(
            { 'me.id' =&gt; { -in =&gt; \@ids } },
            { prefetch =&gt; {
                    current_ua =&gt; {
                        current_uae_set =&gt; {
                            head_uae =&gt; 'ae',
                            body_uae =&gt; 'ae',
                            leg_uae =&gt; 'ae',
                        },
                    },
                },
            }
        );
        while ( my $row = $user_rs-&gt;next ) {
            $row-&gt;current_ua;
            $row-&gt;current_ua-&gt;current_uae_set;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;head_uae-&gt;ae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;body_uae-&gt;ae;
            $row-&gt;current_ua-&gt;current_uae_set-&gt;leg_uae-&gt;ae;
        }
    };
    pass sprintf "count: %d", scalar(@sqls);
};
</code></pre>

<p>1クエリになる</p>

<p><a href="https://github.com/mix3/dbic-prefetch-sample">dbic-prefetch-sample</a></p>

<p>prefetchの前にjoinというそのままのものもあるけど、joinはjoinしたテーブルの情報は返ってこないので今回のようにjoinした先のデータも必要だったらprefetchを使うと良いっぽい</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/12/21/20141221/</guid>
<pubDate>Sun, 21 Dec 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>&#x795D;&#x65E5;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x5B8C;&#x5168;&#x306B;&#x5FD8;&#x308C;&#x3066;&#x51FA;&#x793E;</title>
<description>
<![CDATA[
<p>してしまったmix3だよ!</p>

<blockquote class="twitter-tweet" lang="ja"><p>あー今日祝日やん！</p>&mdash; 衣玖さんは天子の嫁 (@mix3) <a href="https://twitter.com/mix3/status/529066233010745344">2014, 11月 3</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>そして意識高いのか社畜なのか良くわからないこと呟いたけど</p>

<blockquote class="twitter-tweet" lang="ja"><p>まあいいや オフィス開いてたらすこし仕事してこ</p>&mdash; 衣玖さんは天子の嫁 (@mix3) <a href="https://twitter.com/mix3/status/529066997594611712">2014, 11月 3</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>当然オフィスに誰も居なかったので一人で仕事とか寂しくて死ぬので速攻で帰ったよ!とんでもないクズ野郎だね!</p>

<h3>こんな悲しみ繰り返さないために</h3>

<p>切実に祝日リマインダーが必要だと感じたので以前作った<a href="http://mix3.github.io/blog/2014/06/15/20140717_01/">リマインダアプリ</a>(<a href="https://github.com/mix3/go-rocket-sample-app">github</a>)に祝日も自動で通知するみたいなの追加したいなぁとか思った</p>

<p>で、golangで祝日を取得する方法無いかなぁと適当にググったら見つからない(本当に適当にググっただけなのでちゃんと探したらあるかもしれない)ので<a href="http://d.hatena.ne.jp/fbis/20070616/1181993102">国民の祝日の名称を取得するモジュール</a>(<a href="http://coderepos.org/share/browser/lang/perl/DateTime-Holiday-Japanese">coderepos</a>)をgolangに移植したんだけど、それだけで一日潰してしまって祝日リマインダー出来ませんでした!</p>

<p>また祝日に出勤してしまうかもしれない! やばい!!!</p>

<h3>追記</h3>

<p>githubへのリンク貼ってなかったよ!おっちょこちょいだね!</p>

<p><a href="https://github.com/mix3/go-holiday">go-holiday</a></p>

<p>無駄にDriverの仕組みを入れてるので日本の祝日以外の実装も追加しやすいよ!多分ね!</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/11/03/20141103/</guid>
<pubDate>Mon,  3 Nov 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>YAPC::Asia 2014 &#x611F;&#x60F3; #yapcasia</title>
<description>
<![CDATA[
<p>YAPC童貞卒業だよ！mix3です。</p>

<p>YAPC１日目だけ参加してきました。２日目は本番化業務があったのでおとなしく自宅作業してました。</p>

<p>聞いたのは以下の通り。ライブコーディングはイベントホールで勝手にやってる奴だったので、休憩がてら途中から見てましたが非常にgdgdで楽しかった。</p>

<h3><a href="http://yapcasia.org/2014/talk/show/103a434e-ec02-11e3-bd6d-c7a06aeab6a4">Perl meets Real World 〜ハードウェアと恋に落ちるPerlの使い方〜</a></h3>

<p><a href="https://twitter.com/mackee_w">@mackee_w</a>さんによる発表</p>

<p>perlとハードウェアの話っぽいタイトルだけど、perl全く関係ないしネギ振るハズだったのに振れなくて「後でイベントホールに来てください本物のネギ振りをお見せしますよ」的な感じで終わったのが面白かった。</p>

<p>ソフトウェアに比べてハードウェアは現物が無いといけないので単純にハードルが高いのだが、Raspberry PiやらArduinoやらのおかげでその辺りのハードルが下がってきてる感じが伝わってくる内容だった。</p>

<p>あとはテストが難しいというのをどう解決してくかというのが課題のようだ。（個人的な理解だが、おそらく動かして試すしか無いからというのがあるのだと思う）</p>

<ul>
<li><a href="http://mackee.hatenablog.com/entry/2014/09/02/234152">YAPC::Asia 2014に行ってきました&amp;喋ってきました #yapcasia</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/4c7651e8-ed53-11e3-9faf-6ba36aeab6a4">完成されたシステムなどない。完成された人間もいない。あるのは成長し続ける未完成なシステムと、それを支える未完成な人間だけだ</a></h3>

<p><a href="https://twitter.com/kenjiskywalker">@kenjiskywalker</a>さんによる発表</p>

<p>「リハーサルでは20分で終わったのでゆっくり話します」と言って始めたのに結局20分で終わって、残り20分のうち10分をトークショーで乗り切るという</p>

<p>「さすがけんじさんだ、俺たちに出来ない事を平然とやってのける！そこに痺れる憧れる〜！」</p>

<p>な感じの発表だった。さすがです。</p>

<p>内容自体はなんというか、理想とされるシステムの成長の姿を追体験形式で語るみたいな感じだった。</p>

<p>根底としてイミュータブルな世界が来てて理想とされてるシステムの姿（適切に分割されて継続しやすい状態）を実現しやすくなってるから頑張りましょうということなのかなと思っている。</p>

<ul>
<li><a href="http://blog.kenjiskywalker.org/blog/2014/08/31/yapcasia2014/">#yapcasia 2014 に発表者として参加してきたこと</a></li>
<li><a href="http://blog.kenjiskywalker.org/blog/2014/08/29/yapcasia2014-cosmo/">#yapcasia 2014 でシステムとの時間の旅の話をしてきました</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/66c55626-eba9-11e3-bd6d-c7a06aeab6a4">お待たせしました。Perl で BDD を簡単に実践する最高にクールなフレームワークができました</a></h3>

<p><a href="https://twitter.com/tokuhirom">@tokuhirom</a>さんによる発表</p>

<p><a href="http://search.cpan.org/~mschwern/Test-Simple-1.005000_006/lib/Test/Builder2.pm">Test::Builder2</a>がポシャったようなので、仕方ないから<a href="http://search.cpan.org/~tokuhirom/Test-Kantan/">Test::Kantan</a>を作った！使ってね！</p>

<h3><a href="http://yapcasia.org/2014/talk/show/9e3ced48-027f-11e4-9357-07b16aeab6a4">作られては消えていく、泡のように儚いクラスタの運用話</a></h3>

<p><a href="https://twitter.com/toritori0318">@toritori0318</a>さんによる発表</p>

<p>テレビの配信でクラスタの運用をしていて、辛くなるたびに対応してきたという話。</p>

<p>Webとは違って明確にトラフィックが増えるタイミングが分かるので、クラスタ作りまくってその日のうちに消すみたいなのが当たり前に行われているらしい。知らない世界がそこには広がってるなぁと技術的なところは全く分からないので漫然とそんなふうに思いながら聞いていた。</p>

<p>本番怖い。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/toritori0318/20140831">YAPC::Asia2014 レポート #yapcasia</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/a88619fc-034a-11e4-9357-07b16aeab6a4">Git を使ったツール開発</a></h3>

<p><a href="https://twitter.com/motemen">@motemen</a>さんによる発表</p>

<p>申し訳ないけど内容覚えていない…</p>

<p>「<a href="https://github.com/motemen/git-unify">git-unify</a>を作ってくっそ便利だけど、リポジトリぶっ壊れる可能性あるので使う時は気を付けてね」というのだけ覚えてる。</p>

<ul>
<li><a href="http://motemen.hatenablog.com/entry/2014/08/29/talked-at-yapc-asia-2014">YAPC::Asia 2014 で「Git によるツール開発」というタイトルで話しました #yapcasia</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/event/show/ded623dc-1eaa-11e4-a257-34526aeab6a4">ライブコーディング 2014</a></h3>

<p><a href="https://twitter.com/songmu">@songmu</a>さんによるライブコーディング。</p>

<p><a href="https://twitter.com/moznion">@moznion</a>「進捗、どうですか？」</p>

<p><a href="https://twitter.com/songmu">@songmu</a>「進捗、ダメです」</p>

<p>とかやっててくっそ笑ってた。gdgd。楽しかった。</p>

<ul>
<li><a href="http://www.songmu.jp/riji/entry/2014-08-31-yapc.html">今年のYAPC::Asia Tokyo #yapcasia</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/75894e02-025f-11e4-9357-07b16aeab6a4">O2O/IoT/Wearable時代におけるWeb以外のネットワーク技術入門</a></h3>

<p><a href="https://twitter.com/lyokato">@lyokato</a>さんによる発表</p>

<p>ネットワークの話興味あって聞きに行ったけど、発表が物理的に早すぎたのと、内容難しすぎて全く理解出来ずに終わった。</p>

<p>Web以外の知識無さ過ぎてダメだなぁってなった。精進しないといけない。</p>

<ul>
<li><a href="http://atl.recruit-tech.co.jp/blog/2552/">O2O/IoT/Wearable時代におけるWeb以外のネットワーク技術(MQTT/BluetoothLE)について、YAPC::Asia Tokyo 2014で発表してきました</a></li>
</ul>

<h3><a href="http://yapcasia.org/2014/talk/show/250b85d0-02a0-11e4-9357-07b16aeab6a4">Mojoliciousを使ったwebアプリケーション開発 実践編</a></h3>

<p><a href="https://twitter.com/torii704">@torii704</a>さんによる発表</p>

<p>ネットワークの話で頭がパーンしたので休憩がてら軽めの内容と思われるものを…、ということで聞いてみた。</p>

<p>Webアプリ開発入門みたいな感じでMojoliciousをベースにざざっと説明するような感じの発表。Containerの説明、永続化する話を後に持ってきてたせいで「この説明を真に受けたら危険では？」みたいな感じてハラハラしたり、MVCのMの説明っぽいところで「ん？」てなったりしたけど概ね「まあそんな感じよね」と頷きながら聞いていた</p>

<h3><a href="http://yapcasia.org/2014/talk/show/8f7ead9a-ebba-11e3-bd6d-c7a06aeab6a4">Java For Perl Mongers</a></h3>

<p><a href="https://twitter.com/Yappo">@Yappo</a>さんによる発表</p>

<p>型があるってのは良いこと。冗長になるが同時にそれは変な記述をさせない制限になるので余計なバグを仕込みにくい（例えば型名ミスなどのtypoとか発生しない）</p>

<p>Javaは面白みが無い普通の言語だけど型の良さをちゃんと持ってるので、LLで育ってた人はちゃんとそういうの理解してJavaをdisったほうが良いよ。</p>

<p>という感じでJava賛美っぽい話のまま終わって面白かった。Java好きな人間なので聞いてて終止うんうん頷いてた。</p>

<h3><a href="http://yapcasia.org/2014/talk/show/63144efa-0c8e-11e4-bd05-9c796aeab6a4">Lightning Talks Day 1</a></h3>

<p>印象に残ったのが<a href="https://twitter.com/maka2_donzoko">まかまか</a>さんには家族離散にならない程度にAcme大全続けていって頂きたいなぁというのと、<a href="https://twitter.com/gugod">@gugod</a>さんかな？英語で発表しててすっごい大真面目なビジュアライゼーションの話してたと思うんだけど、みんな「すげーすげー」言いまくってるなか自分全く英語が分からなくてぽかーんってして聞いてた。英語頑張ろう…ほんと…</p>

<h3>まとめ</h3>

<p>「次もあれば行きたい」と思うぐらいには楽しかった。</p>

<p>ただ部屋の移動時間が一切考慮されていないスケジューリングぽかったのと、居座り組と後は早い者勝ちみたいな感じになってたのはなんか微妙な感じなのと、「もう部屋がぱんぱんで聞けないしイベントホール行って暇潰すか」ということが少なからずあったのがちょっと残念だった。部屋を単純に大きいのにするわけにもいかないと思うので改善するのは難しいと思うけどなんとかしてほしいなと思う。</p>

<p>そして個人的に翻訳聞くレシーバが初日１機遭難してたやつ、その後救助されたのか気になっている（１機４万とか言ってたので紛失とか運営としては正直笑えない話）</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/09/03/20140903_01/</guid>
<pubDate>Wed,  3 Sep 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>rocket</title>
<description>
<![CDATA[
<p>衣玖さんが好きすぎて、最近は衣玖さんの人としてチームメンバーからは認識されているようです。（衣玖さん結婚しよ）mix3です。</p>

<h3>サンプルアプリ</h3>

<p>社内的にgolangを使って行こうか、という流れが出来ていてその流れの中で <a href="https://twitter.com/#!/acidlemon">@acidlemon</a> さん作のWAF、<a href="https://github.com/acidlemon/rocket">rocket</a>が出てきたので使い方の勉強もかねて早速それのサンプルアプリを作ってみました</p>

<h3>リマインダアプリ</h3>

<p>うちの社内IRCではお願いすると指定日時にメンションを飛ばしてくれるremember君というbotが生息してるのですが、それのメール版のようなイメージで作りました</p>

<p>指定アドレスにメールして登録、指定日時にメールが飛んでくるだけの簡単なwebアプリです</p>

<p>世の中便利なもので、<a href="http://www.cloudmailin.com/">指定アドレスにメールが来ると指定URLにPOSTしてくれるサービス</a>（つまりSMTPいらない）があったり、<a href="http://www.mailgun.com/">1日10000通までメール送信出来るサービス</a>（つまりSMTPいらない）があって、herokuとかと組み合わせることで簡単な物なら無料でメールを使ったサービスが作れてしまうようです</p>

<p>物はこちら <a href="https://github.com/mix3/go-rocket-sample-app">go-rocket-sample-app</a> <a href="http://secure-sierra-2582.herokuapp.com/">http://secure-sierra-2582.herokuapp.com/</a></p>

<h3>リマインダ登録までの流れ</h3>

<p>一応登録されたメールアドレス以外のリマインダ登録は受け付けないようにしたかったので、</p>

<ul>
<li>アドレス登録のアドレスに対して空メールすると、仮登録され本登録のURLが返信される</li>
<li>URLを踏むと本登録が完了する</li>
<li>リマインド登録のアドレスに対して、件名に日時指定、本文にリマインドの内容を書いて送ると登録される（認識する日時指定はだいたい以下の通り）
<ul>
<li>12:34</li>
<li>07-01 12:00</li>
<li>2014-07-01 23:59</li>
</ul></li>
</ul>

<p>な感じで動く様になっています　アドレス登録後はリマインド登録用のアドレスを保存しておいて使うことを想定しています</p>

<h3>ということで</h3>

<p><a href="https://github.com/acidlemon/rocket">rocket</a>のサンプルアプリでした</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/06/15/20140717_01/</guid>
<pubDate>Sun, 15 Jun 2014 18:00:00 -0000</pubDate>
</item>
<item>
<title>go&#x7248;ikachan&#x306E;github.com/mix3/go-ikusan&#x3092;&#x4F5C;&#x3063;&#x305F;&#x8A71;</title>
<description>
<![CDATA[
<blockquote class="twitter-tweet" lang="ja"><p>衣玖さん芸人に!!!俺はなるっ!!!（海賊王的なノリで</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/475532375305109504">2014, 6月 8</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>最近p5-Ikusanを作ったり、それで衣玖さんのIRCボット作ったりして衣玖さんへのロマンティックが止まらないmix3です</p>

<h3><a href="https://github.com/mix3/go-ikusan">github.com/mix3/go-ikusan</a>と<a href="https://github.com/mix3/go-irc">github.com/mix3/go-irc</a></h3>

<p>最近golangを触ってる事が多いのですが（絶賛開発中の社内アプリがgolangだけどそっちにはあんまり関わってなかったりする）</p>

<p>適当になんか作りたいなぁと思っていたところに最近衣玖さんへの愛が溢れ出してきてたので、そりゃ「go版ikachan作ろう」となるのは自然な事ですよね</p>

<p>でgoでircってどう触るんだろうとgithubを漁ったところ</p>

<ul>
<li><a href="https://github.com/thoj/go-ircevent">github.com/thoj/go-ircevent</a></li>
<li><a href="https://github.com/fluffle/goirc/tree/master">github.com/fluffle/goirc</a></li>
</ul>

<p>辺りがirc触るためのライブラリとして有名どころなのかなぁということが分かって、その辺り使って作ろうとしたのですが、</p>

<blockquote class="twitter-tweet" lang="ja"><p>go-ikusanのためにgo-irceventの中追いかけてるがエラー検知からのリコネクト処理がダメだこりゃ close(end)して各イベントチャンネルをwaitgroupで待ってるけど、socketのreadで待ってるからtimeoutするまで待ち続けてる</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476224165708451840">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" lang="ja"><p>preadってチャンネル用意してるのにどこにも使ってなくて多分これはsocketから1行読んで解釈するのと、それをcallbackに投げるのを分離するためものだと思うけど、まだ未実装ってことなのかな</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476225950380597248">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" lang="ja"><p>go-ircevent、groupwaitしてるのsocketを安全に閉じるのを保証するためだと思うけど、socketのreadで待ち続けるのもなんとも言えないなぁ</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476226654398709761">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" lang="ja"><p>Errorチャンネルをselectで待ってて、検知したらdisconnectするけどそのdisconnectの中でさらにErrorを投げてるの結構ワンダーな感じする</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476227286870392832">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>とか</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="http://t.co/jXGwN4arHz">http://t.co/jXGwN4arHz</a> がエラーハンドリングちゃんとしてそうだけど、flag要求されて非常に使いづらい</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/476228862263570434">2014, 6月 10</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>とかでなんか微妙に使いづらいなぁとなってしまい、じゃあいっそそっから作るかということで両方の間の子みたなの作ったりしました。<a href="https://github.com/mix3/go-irc">github.com/mix3/go-irc</a></p>

<p>出来るだけ薄くしておきたかったのと、IRCについて知識はまるでないので難しいことはしないようにしたかったので</p>

<ul>
<li>ircサーバへのリクエストが出来る</li>
<li>ircサーバからのレスポンスを受け取れる</li>
<li>ircサーバからのレスポンスを元にコールバックを呼ぶがディスパッチャみたいなことはしない</li>
<li>ircサーバからのレスポンスのtimeoutを待たずに落ちる事が出来る</li>
<li>落ちたタイミングで何かしたいこともあるだろうから、別途落ちたタイミングでコールバックを呼ぶようにする</li>
<li>flagは使わない</li>
<li>loggerはデフォルトで<a href="https://github.com/umisama/golog">github.com/umisama/golog</a>を使うけどinterfaceが定義されてるので差し替え出来るハズ</li>
</ul>

<p>ぐらいを満たすような感じで<a href="https://github.com/thoj/go-ircevent">github.com/thoj/go-ircevent</a>と<a href="https://github.com/fluffle/goirc/tree/master">github.com/fluffle/goirc</a>からコピペしたりしなかったりしました</p>

<p>たまに落ちるときにWaitしたまま帰ってこないみたいなことがある感じなので、明らかにここマズいとかあったらプルリクあると嬉しいです</p>

<p>で、これを元にgo版<a href="https://github.com/yappo/p5-App-Ikachan">ikachan</a>こと<a href="https://github.com/mix3/go-ikusan">go-ikusann</a>を作りましたとさ</p>

<p>とってもキュートな衣玖さんがお出迎えしてくれるwebインタフェースも作ってやはり衣玖さんは最高だなって思いました</p>

<blockquote class="twitter-tweet" lang="ja"><p>go-ikusanのwebインタフェース作った　衣玖さんマジかわ <a href="http://t.co/sAcXgUZJP1">pic.twitter.com/sAcXgUZJP1</a></p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/477786314641657857">2014, 6月 14</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>なおAAの画像は「衣玖 AA」で検索して見繕ったAAなので著作権的に問題あったら非常に心苦しいですが消します</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/06/15/20140615_03/</guid>
<pubDate>Sun, 15 Jun 2014 18:00:00 -0000</pubDate>
</item>
<item>
<title>&#x30D6;&#x30ED;&#x30B0;&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x3092;&#x5909;&#x3048;&#x3066;&#x307F;&#x308B;</title>
<description>
<![CDATA[
<p>テンプレートは気に入っていて変えたくないのでその辺りは出来るだけそのままを保ちつつ、レスポンシブデザインってどうやるんだろうなと思いながらいじいじしてて数ヶ月経ってしまいこのままだともう日の目を見る事が無さそうな感じしたのでえいやで更新してしまいました</p>

<p>それにともない記事のhtmlを一カ所にまとめる様に変更（記事生成後再生成でゴミが残るので面倒になった）それにともないパーマリンクが変更になるという鬼畜ぶりに我ながら身震いしたけどどうせブクマしてる人も全然いないし自分のブログだし好きにすることにした　404のカスタムhtmlでjs使って多少の誘導ぐらいは出来る様にしたいとは思ってるけどやらないかも</p>

<p>ということで気分も新たにブログたまには書いて行きたい</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/06/15/20140615_02/</guid>
<pubDate>Sun, 15 Jun 2014 17:15:00 -0000</pubDate>
</item>
<item>
<title>golangWAF&#x306E;traffic&#x3092;&#x89E6;&#x308B;&#x3064;&#x3044;&#x3067;&#x306B;&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x4F5C;&#x3063;&#x3066;CI&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#x3092;&#x8A66;&#x3057;&#x3066;heroku&#x306B;&#x4E0A;&#x3052;&#x3066;&#x307F;&#x305F;</title>
<description>
<![CDATA[
<p>コートレビューされると毎回マサカリが飛んできて自分はやはり糞コード製造機だなぁと改めて実感しててまた死にたい感じになってます。mix3です。</p>

<h3>golangのWAF調査の一環として</h3>

<p>goによる社内アプリ(?)を後輩らと共同でマサカリを一身に受けて血反吐吐きながら書いていたのですが</p>

<p><a href="http://revel.github.io/">Revel</a>使っていたけど使いこなせてない感じが半端無くて(Revelのセンスが悪いのか自分たちのセンスが悪いのか考えると多分自分たちのセンスが悪いんだろうなと思う)</p>

<p>あらかた動く様になった段階で、最終的にリライトするのも辞さない覚悟でWAF調査から再出発することに。</p>

<ul>
<li><a href="http://beego.me/">Beego</a></li>
<li><a href="http://naoina.github.io/kocha/">Kocha</a></li>
<li><a href="https://github.com/pilu/traffic">traffic</a></li>
<li><a href="http://martini.codegangsta.io/">Martini</a></li>
</ul>

<p>とググって見つかったWAFを担当振ってサンプルアプリ作ってどんなもんか調べましょうとなりました。</p>

<p>自分は<a href="https://github.com/pilu/traffic">traffic</a>を担当。</p>

<p>ただ調べるだけだとつまらないので、Travisやheroku使った事無かったというのもあり、タイトルにあるCI連携とherokuへのデプロイまでやることにしました。</p>

<h3>作ったもの</h3>

<p>最初は<a href="http://todomvc.com/">TodoMVC</a>の<a href="http://todomvc.com/architecture-examples/angularjs/">AngularJS</a>を使うかと考えたが<a href="http://bower.io/">Bower</a>が絡んできて余計な事で悩みそうだったのでやめて、<a href="http://dotinstall.com/lessons/todo_angularjs">AngularJSで作るToDoアプリ</a>を見てシコシコとhtml/js/cssを書いてから<a href="https://github.com/pilu/traffic">traffic</a>を書いてみた</p>

<p>最終的に出来たのが以下</p>

<ul>
<li>github <a href="https://github.com/mix3/go-traffic-sample">https://github.com/mix3/go-traffic-sample</a></li>
<li>heroku <a href="http://lit-plains-4846.herokuapp.com/">http://lit-plains-4846.herokuapp.com/</a></li>
</ul>

<h3>CI連携</h3>

<p>最初に<a href="https://travis-ci.org/">Travis</a>を試して、<a href="http://wercker.com/">wercker</a>なるものを後で見つけて追加して、<a href="https://drone.io/">drone.io</a>なるものもあってそれも追加して、と手当たり次第試してみた</p>

<p>基本的にCIは専用のyml(drone.ioはいらないみたい)をコミットして go test ./... を走らせるだけだけど、<a href="https://github.com/naoina/genmai">genmai</a>のTravisのテストが賢くてナルホドなってなった</p>

<p><a href="https://github.com/naoina/genmai/blob/master/genmai_test.go#L110">https://github.com/naoina/genmai/blob/master/genmai_test.go#L110</a></p>

<pre><code>func testDB(dsn ...string) (*DB, error) {
    switch os.Getenv("DB") {
    case "mysql":
        return New(&amp;MySQLDialect{}, "travis@/genmai_test")
    case "postgres":
        return New(&amp;PostgresDialect{}, "user=postgres dbname=genmai_test sslmode=disable")
    default:
        var DSN string
        switch len(dsn) {
        case 0:
            DSN = ":memory:"
        case 1:
            DSN = dsn[0]
        default:
            panic(fmt.Errorf("too many arguments"))
        }
        return New(&amp;SQLite3Dialect{}, DSN)
    }
}
</code></pre>

<p><a href="https://github.com/naoina/genmai/blob/master/.travis.yml">https://github.com/naoina/genmai/blob/master/.travis.yml</a></p>

<pre><code>language: go
go:
 - 1.2
 - 1.2.1
 - tip
install:
 - go get -v github.com/mattn/go-sqlite3
 - go get -v github.com/go-sql-driver/mysql
 - go get -v github.com/lib/pq
 - go get -v github.com/naoina/genmai
env:
 - DB=sqlite3
 - DB=mysql
 - DB=postgres
before_script:
 - sh -c "if [ '$DB' = 'postgres' ]; then psql -c 'DROP DATABASE IF EXISTS genmai_test;' -U postgres; fi"
 - sh -c "if [ '$DB' = 'postgres' ]; then psql -c 'CREATE DATABASE genmai_test;' -U postgres; fi"
 - sh -c "if [ '$DB' = 'mysql' ]; then mysql -e 'CREATE DATABASE IF NOT EXISTS genmai_test;'; fi"
script:
 - go test ./...
</code></pre>

<p>.travis.ymlでenvを複数指定するとそれぞれの環境変数でテストが走るので、テストの方で環境変数で使うDBを変える様にしておくことでいい感じにDB別のテストが走っていてとても賢い</p>

<p>order byしてないせいでsqlite,mysqlでは通るがpostgresでは通らないみたいなことがあったので、DB限定しない作りのアプリのテストはこのやり方を真似しておくと良いなと思った</p>

<p>設定に環境変数を使うというのは<a href="http://twelve-factor-ja.herokuapp.com/config">The Twelve-Factor App</a>で推奨されてて環境に合わせて柔軟に設定出来るのは確かに良いなぁと思った</p>

<h3>heroku</h3>

<p>元々herokuまでやるつもりはなかったけど、作ったものを見える状態にするのも大事だなと思ってCIまでは割とサクサク行ったのでheroku使った事無かったし試してみた</p>

<p>最初 git push heroku master しても全然うまくいかず泣きそうになっていたのだが、最終的には</p>

<ul>
<li>godepを使わない</li>
<li>.godirはgithub.com/mix3/go-traffic-sampleじゃなくてgo-traffic-sampleで</li>
<li>src以下にきちんと配置(最初はシンボリックリンク使って別の場所で開発してた)
<ul>
<li>pushが通らなかった一番の理由が多分これ</li>
</ul></li>
</ul>

<p>という感じでやるとなんとかpush出来た</p>

<p>ググったりgithubで「golang heroku」とかで検索掛けたりするとgodep使ってたり、srcをリポジトリに含めたり含めなかったりしてどうするのが良いのかいまいち分からなくて非常に困った（し、今も良くわかっていない）</p>

<p>結局traffic作者のブログ記事<a href="http://gravityblast.com/2013/12/05/how-to-deploy-go-with-traffic-on-heroku/">How to deploy Go with Traffic on Heroku</a>をそのままやってうまく行ったので今はそれに合わせている。godepとbuildpack-goは大分トラウマになった気がする。</p>

<p>デプロイしてから静的ファイルが配信出来ていないことに気づいて<a href="http://gravityblast.com/2013/12/05/how-to-deploy-go-with-traffic-on-heroku/">How to deploy Go with Traffic on Heroku</a>をよく見るとproductionでも静的ファイルをアプリ側で返す様に弄るよう指示されていたので修正した。</p>

<p>が、herokuにも静的ファイルの配信は出来るハズなので、workerをアプリにしてwebを<a href="https://github.com/mattn/gorem">gorem</a>にしてやればいけるんじゃないかと思ったが、portが不定なのでjsonにport記述できないし、goremはコマンドだからherokuの場合にどうしたらいいのかサッパリ分からなかったのでそこまでは出来なかった。</p>

<h3>テスト</h3>

<p>revelのときはテスト書いてなかったのでテスト書く場合はどうなるのかなということでCRUDを確認する簡単なモデルテストを書いてみたが、時間が絡むテストが非常に書きにくくて困る（し、今も困っている）</p>

<p>DBから取ってきたデータの比較でreflect.DeepEqualを使ってデータをまるまる比較したのだがdatetime型があるとそれが出来なくて困る。time.Now()をモックできないかとググるも良い情報が無くて詰んでいる。</p>

<p>多分標準パッケージのtimeをどうこうすることは出来ないので、別の時間管理用モジュールを作るか見繕ってきてそれをモックするようにするのが良いのかなと思っている。例えばこれとか？<a href="https://github.com/101loops/clock">https://github.com/101loops/clock</a></p>

<h3><a href="https://github.com/moovweb/gvm">gvm</a></h3>

<p>goの開発環境を綺麗に保つときにgvmを使うと良さそうなことに気づいた</p>

<pre><code>gvm install go1.*.*
gvm use go1.*.*
</code></pre>

<p>とかして、簡単に好きなバージョンのgoが使えるし、</p>

<pre><code>gvm pkgset use global
</code></pre>

<p>とかするとインストールしたgo専用のGOPATHが設定されるし、</p>

<pre><code>gvm pkgset create hoge
gvm pkgset use hoge
</code></pre>

<p>とかすると、さらにGOPATHが設定される(GOPATH=/path/to/hoge:/pagh/to/global になるのでhoge優先)</p>

<p>ので、適当にgvm installして適当にgvm pkgset create hogeしてglobal以下で開発、依存パッケージをhogeに入れるようにすると環境を何も汚さない感じで開発出来てよいと思う</p>

<p>ひとつ残念なのはgvmは[GVM](the Groovy enVironment Manager)とコマンド名がバッティングしていてそれだけは勘弁してほしいなってなってる</p>

<h3>なお</h3>

<p>この記事は5/13に書いたのだが、いつのまにか6/15である 時間が経つのは早い</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/06/15/20140615_01/</guid>
<pubDate>Sun, 15 Jun 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>p5-IkuSan&#x3092;&#x7169;&#x60A9;&#x306E;&#x307E;&#x307E;&#x306B;&#x516C;&#x958B;</title>
<description>
<![CDATA[
<p>人生の迷子の行き着く先は富士の樹海ではないかと最近良く考えています。mix3です。</p>

<h3><a href="http://search.cpan.org/~himachoco/IkuSan-0.01/lib/IkuSan.pm">p5-IkuSan</a></h3>

<p>IRCボットいい加減今のプロジェクトに欲しくなったので、自分がIRCボット作ったらこうするなというのを<a href="/2013/10/05/20131005/">以前書いた</a>のだが、今回は実際にそれを作ったという話です。</p>

<p>ただ単に作るだけだと別に<a href="http://search.cpan.org/~songmu/UnazuSan-0.02/lib/UnazuSan.pm">UnazuSan</a>で良いじゃないってなっちゃうので、以下の機能を盛り込みました</p>

<h4>Getopt::Longの引数が取れる</h4>

<p><a href="/2013/10/05/20131005/">以前の記事</a>参照</p>

<h4>並列にタスク処理が出来る</h4>

<p>最初Gearman使って頑張ってたのだけれど <a href="https://twitter.com/#!/karupanerura">@karupanerura</a> さん作、<a href="http://search.cpan.org/~karupa/AnyEvent-ForkManager-0.01/lib/AnyEvent/ForkManager.pm">AnyEvent::ForkManager</a>というのがあるのを見つたのでそれを使うように。worker数を指定出来る様にして並列に処理出来る様にしました</p>

<p>あんまり気にしなくても良いとは思うけれども処理中だからってボットが無反応になるのはなんとなく嫌だったので</p>

<h4>タスク処理中、dieしたら共通処理出来る様に</h4>

<p><a href="http://search.cpan.org/~doy/Try-Tiny-0.20/lib/Try/Tiny.pm">Try::Tiny</a>を使って囲ってるだけなので別にいらないと言えばいらない（自前でtry catchするのでも良い）が、どうせボットが返すエラー文言なんて一律で同じように返したって全然良いと思うので、共通処理を設定出来る様にしておきました</p>

<h3>ということで</h3>

<p><a href="http://search.cpan.org/~himachoco/IkuSan-0.01/lib/IkuSan.pm">p5-IkuSan</a>が出来ました</p>

<p>一応<a href="http://search.cpan.org/">CPAN</a>に上げるつもりだったので、今まで使ったことなかった<a href="http://search.cpan.org/~tokuhirom/Minilla/lib/Minilla.pm">Minilla</a>を使ってみたり、<a href="https://github.com/tokuhirom/plenv">plenv</a>と<a href="http://search.cpan.org/~miyagawa/Carton-v1.0.12/lib/Carton.pm">Carton</a>を経由して<a href="http://cr.yp.to/daemontools.html">daemontools</a>で起動出来るようにするというplackアプリの起動で良くある感じのアレをちゃんとやってみたり、その際にCarton経由しつつsystem perl使おうとするとCartonの方で環境変数PERL5OPTが設定されてしまうのでunsetするなりしないと読むモジュールが違って悲しい思いをするということを知ったり、perl5.19.10とか使うとNet::SSLeayあたりでpanicとかなんとか言われて動かなかったり（原因不明）forkしてる関係で子プロセスからsend_messageやらなんやらしようとして死にまくったりして、<a href="http://search.cpan.org/~yappo/App-Ikachan-v0.2.1/lib/App/Ikachan.pm">ikachan</a>リスペクトで頑張ってみたり、<a href="https://github.com/mix3/p5-IkuSan#readme">衣玖さんはやっぱり可愛い</a>んだなと再認識したりしました。CPANの方にもちゃんと画像出る様にしたい。</p>

<p>あと以下の発言が実現出来てワタクシ非常に満足しております。煩悩はチカラなり。</p>

<blockquote class="twitter-tweet" lang="ja"><p>（Ikusanっていう名前の入ったcpanモジュール作りたいだけです）</p>&mdash; mix3 (@mix3) <a href="https://twitter.com/mix3/statuses/440167221289955328">March 2, 2014</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/04/12/20140412/</guid>
<pubDate>Sat, 12 Apr 2014 00:00:00 -0000</pubDate>
</item>
<item>
<title>revel&#x5165;&#x9580;</title>
<description>
<![CDATA[
<p>絶賛人生の迷子中、mix3です</p>

<h3>golangでWebアプリ</h3>

<p>を作ってレビューしてもらったらそれはもうフルボッコでそれこそ雄山のあれな感じでした</p>

<p><img src="/images/20140308/oisinbo_yuzan_arai.gif" alt="このWebアプリを作ったのは誰だぁっ" title="このWebアプリを作ったのは誰だぁっ" /></p>

<p><a href="/2013/11/13/20131113/">isucon3</a>を元に手探りでやったため突っ込みどころを残してしまったようです</p>

<ul>
<li>panic使ってerror潰すのやめろ</li>
<li>パス解決にCallerいらねーだろ
<ul>
<li>一応カレントディレクトリを判断したいという意図だったけどいらないらしい</li>
</ul></li>
<li>動かし方 go run hoge.go じゃなくて go build hoge.go; ./hoge ってちゃんと書け</li>
</ul>

<p>などなど</p>

<p>golangのWebアプリの良いサンプル、一応最初に自分で探してはみたものの良い感じのを見つけられず、後で「<a href="https://github.com/campoy/todo">campoy/todo</a>が参考になるんじゃない？」と教えてもらいました</p>

<p>最初に知りたかった… ちなみにパス解決の突っ込み</p>

<p><a href="https://gist.github.com/mix3/9430209">https://gist.github.com/mix3/9430209</a></p>

<pre><code>mix3 ~/tmp/caller_sample $ go run main.go
2014/03/08 21:56:14 loading config (with caller) file: /private/tmp/caller_sample/config/config.json
2014/03/08 21:56:14 OK
2014/03/08 21:56:14 loading config file: config/config.json
2014/03/08 21:56:14 OK

mix3 ~/tmp $ go run caller_sample/main.go
2014/03/08 21:56:38 loading config (with caller) file: /private/tmp/caller_sample/config/config.json
2014/03/08 21:56:38 OK
2014/03/08 21:56:38 loading config file: config/config.json
2014/03/08 21:56:38 open config/config.json: no such file or directory
exit status 1
</code></pre>

<p>こんな感じで実行パスに左右されないパス解決が出来るので使い方間違ってなければ意味はある書き方だとは思うんですが、まあ今回は必要ないよってことですかね</p>

<h3><a href="http://robfig.github.io/revel/index.html">revel</a>使いましょ</h3>

<p>そんな感じで <strong>センスの無い</strong> やつが手探りでやると悲惨なことになるのでWAFに乗っかった方がきっと良いと判断されたっぽい（実はそこらへん曖昧だったり…）のでとりあえず<a href="http://robfig.github.io/revel/index.html">revel</a>にのっかることにしました</p>

<p>使い方は公式<a href="http://robfig.github.io/revel/index.html">http://robfig.github.io/revel/index.html</a>のtutorialとmanualとsample眺めてればなんとなく分かる感じです</p>

<p>以下<a href="http://robfig.github.io/revel/samples/booking.html">revel/samples/booking</a>にはgorpとsqliteを使ったサンプルコードがあるのだけど、「mysqlにするにはどうすれば？」と少し悩んだのでメモ</p>

<h4>conf/app.conf のsqliteの設定をmysqlのものに変更</h4>

<pre><code>db.import = github.com/go-sql-driver/mysql
db.driver = mysql
db.spec   = root@tcp(localhost:3306)/alphawing
</code></pre>

<h4>app/controllers/gorp.go のimportしているドライバをmysqlのものに変更</h4>

<pre><code>_ "github.com/go-sql-driver/mysql"
</code></pre>

<h4>app/controllers/gorp.go の gorp.DbMap{} を mysqlのものに変更</h4>

<pre><code>Dbm = &amp;gorp.DbMap{Db: db.Db, Dialect: gorp.MySQLDialect{"InnoDB", "UTF8"}}
</code></pre>

<p>だいたいこれくらい弄るとmysqlで動く様になるはず</p>

<p>ちなみにsampleだからだと思うのだけど<a href="https://github.com/robfig/revel/blob/master/samples/booking/app/controllers/init.go">以下のような感じ</a>でコントローラ処理の前後にBegin,Commit,Rollback を入れ込んでて吹いた</p>

<pre><code>func init() {
    revel.OnAppStart(InitDB)
    revel.InterceptMethod((*GorpController).Begin, revel.BEFORE)
    revel.InterceptMethod((*GorpController).Commit, revel.AFTER)
    revel.InterceptMethod((*GorpController).Rollback, revel.FINALLY)
}
</code></pre>

<p>modelsでちゃんとやりたいときにはどうしたらいんだろうか…</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/blog/2014/03/08/20140308/</guid>
<pubDate>Sat,  8 Mar 2014 00:00:00 -0000</pubDate>
</item>
</channel>
</rss>
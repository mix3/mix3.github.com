<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
 xmlns:blogChannel="http://backend.userland.com/blogChannelModule"
>

<channel>
<title>萌えキャラとは何だったのか</title>
<link>http://mix3.github.io</link>
<description>ギークにも絵描きにもなれない者の末路</description>

<item>
<title>テスト書くのって難しい</title>
<description>
<![CDATA[
<p>布都ちゃんが可愛すぎて生きるのが辛い。mix3です。</p>

<p><img src="/images/20130728/futo.png" /></p>

<h3>テスト書くのって難しい</h3>

<p>なんの意味も無い以下のような糞コードがあったとして、各subについてテストを書いたりなんかしてみるとこんな感じだろうか？</p>

<script src="https://gist.github.com/mix3/6097116.js"></script>

<p>なんでこんな糞コード書いたかというと</p>

<ul>
<li>type_a, type_b
<ul>
<li>まあ良い</li>
</ul></li>
<li>type_to_execute
<ul>
<li>type増えたらやだなぁと思うけどまあ良い</li>
</ul></li>
<li>calc_type
<ul>
<li>計算複雑になったらやだなぁと思うけどまあ良い</li>
</ul></li>
<li>execute
<ul>
<li>type_a,type_b,type_to_execute,calc_typeが総じて複雑になった時、全部と通るテスト書くの考えたくないんだけど…</li>
</ul></li>
</ul>

<p>普通にアプリ書いてると、色々複雑になった上でexecuteみたいにいくつも関数経由して結果を返すやんちゃな関数が出てきてしまうのですが、そういうののテストは正直書いていて死にたくなります。そして後で機能拡張しようとしてやっぱり死んだりする。</p>

<p>「そもそも設計が悪いよ」「それ◯◯で出来るよ」「糞コードに何を求めてるの」etc… ということなんでしょうか。テスト大事なのは分かるのですが、正しくて網羅的なテストというのはきちんとスキルを身につけてないと出来ないよなぁと思う事が多いです。「書かないよりはずっと良い」と心の中で言い訳しながら書いてますが。</p>

<p>ただ、以下のような事もあるのでやっぱりただ書くだけでもダメなんだなと思いつつ、もやもやする今日この頃です。</p>

<blockquote class="twitter-tweet"><p>リファクタリングに使えないテストのことをレガシーカバーと呼ぶ。結局リファクタリングできないんだからレガシーコードのまま。</p>&mdash; いろふ(成分無調整) (@irof) <a href="https://twitter.com/irof/statuses/346946470890573824">June 18, 2013</a></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/07/28/20130728/</guid>
<pubDate>Sun, 28 Jul 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>phantomjsで遊ぶ</title>
<description>
<![CDATA[
<p>うわっ…私のチーム、レベル低すぎ…？ mix3です。リードエンジニアとしてどうにかしろって話ですが、コミュ
障の自分には荷が重いです…</p>

<h3><a href="http://d.hatena.ne.jp/karasuyamatengu/20110126/1296066287">PhantomJS: 最小限なheadlessのWebKitベースのJavaScriptツール</a></h3>

<p>だそうです。正直良くわかりませんが、nodeのようにサーバーサイドで書けるイメージ。</p>

<p>$ cat hello.js</p>

<pre><code>console.log('Hello, world!');
phantom.exit();
</code></pre>

<p>$ phantomjs hello.js</p>

<pre><code>Hello, world!
</code></pre>

<p>とか</p>

<p>$ cat google_capture.js</p>

<pre><code>var page = require('webpage').create();
page.open('http://www.google.com', function (status) {
    page.render('google_capture.png');
    phantom.exit();
});
</code></pre>

<p><a href="/images/20130413/google_capture.png"><img src="/images/20130413/google_capture.png" width="200" /></a><br /></p>

<p>とか</p>

<p>$ cat hello_server.js</p>

<pre><code>var system = require('system');

if (system.args.length !== 2) {
    console.log('Usage: hello_server.js &lt;portnumber&gt;');
    phantom.exit(1);
} else {
    port = system.args[1];
    server = require('webserver').create();

    service = server.listen(port, function (request, response) {
        response.statusCode = 200;
        response.write('&lt;html&gt;&lt;body&gt;Hello, World!&lt;/body&gt;&lt;/html&gt;');
        response.close();
    });

    if (!service) {
        console.log('Error: Could not create web server listening on port ' + port);
        phantom.exit();
    }
}
</code></pre>

<p>$ phantomjs hello_server.js</p>

<p>$ curl http://localhost:2525</p>

<pre><code>&lt;html&gt;&lt;body&gt;Hello, World!&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>などなど。単純なCLIプログラムや、Webページにアクセスしてキャプチャ取ったり、サーバプログラムも書けたりします。</p>

<p>ローカルファイルも扱えるので、例えばあるディレクトリ以下の画像を並べて表示するサーバを立てつつ、それを</p>

<pre><code>page.open('http://localhost:[port]', function () {
    page.render(...);
});
</code></pre>

<p>とかするとあら不思議。コマンド一発で複数画像を１枚画像に出来たりします。</p>

<h3>なんでこんなもん触ってるかというと</h3>

<p>ソーシャルゲームに携わっていて思う事なのですが、イベント中だと特にそうですが時間で文言が変わるということは良くあることです。そしてこういうものは当然リリース前にスケジュールはきっちり決まっていて（もちろん差し込みで仕込み直すこともありますが）がっつりテストすることになります。が、開発段階でも当然自分で目視チェックすることになるのですがこれが非常に面倒くさい。なぜ面倒くさいかというとモジュールの単体テストとは違いローカルプロキシ越しにブラウザで確認したり実機で確認したりすることになり、自動テストになかなか上手く落とし込めないからです。（見た目の部分は特に変更が出易いのでそういう意味でもテストに落としづらいというのはあると思います）他のプロジェクトだと一部定型的な部分はモデルに落とし込んでテスト出来るようにしていたりするようですが、当然限界もあり。</p>

<p>ということで、今のところ画像、文言など見た目の部分をテストに落とし込むのは無理だろうなぁと思っておりますが、そうは言ってもチェックが面倒なことは面倒なのでチェックすること自体はいくらか楽にはしたい。特に時間で文言が切り替わるのを見比べられる状態にしたい。</p>

<p>ということでphantomjsでしこしこ以下のようなスクリプト書いてました</p>

<ul>
<li>指定ページを時間別にキャプチャしてpngで吐き出すスクリプト</li>
<li>フォルダ以下の*.png画像を横に並べて表示するサーバを立ててそれをキャプチャするスクリプト</li>
</ul>

<p>参考: <a href="http://d.hatena.ne.jp/hecomi/20121229/1356785834">PhantomJS でログインが必要なページでも自由自在にスクレイピング - 凹みTips</a></p>

<p>ほぼほぼキャプチャの部分は<a href="http://d.hatena.ne.jp/hecomi/20121229/1356785834">参考</a>をそのまま使わせてもらっているのですが、参考のままだと画像などがキャプチャされないことがあったので、setTimeoutを使ってキャプチャのタイミングを遅らせるなどの簡単な工夫をしています。</p>

<p>後、サーバがバイナリを出力するときは、ローカルからファイルを読み込む時に 'b' を指定するのとresponse.writeするまえにresponse.setEncoding('binary')しないといけないようなので注意が必要です。</p>

<pre><code>var image = fs.read(file_path, 'b');
response.headers = {
    'Accept-Ranges': 'bytes',
    'Content-Type': 'image/png',
    'Content-Length': image.length
};
response.setEncoding('binary');
response.write(image);
</code></pre>

<p>こうすることで横並び画像にして文言チェック出来るようになり捗りそうな気配がしています。（まだ作ったばかりで実際に活用するのはこれから）</p>

<p>ちなみに一枚画像にしてしまうのは社内gyazoにあげてディレクターなど他の方にも見てもらえるようにしたかったからですが、今にして思えば別に一枚画像にする必要はなく、画像一括アップロード出来るフォームと横並びにして表示出来る簡単なサーバアプリを書くだけで良いことに気づいたので、ここは今後やりやすい方にシフトする感じで行きたい。</p>

<p>ということでphantomjs便利なんじゃないかなというお話でした。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/04/13/20130413/</guid>
<pubDate>Sat, 13 Apr 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>おれおれWebフレームワーク - Chaco</title>
<description>
<![CDATA[
<p>これ書くタイミング間違えてる気がするけどまあいいや</p>

<p>なんとなく作ってみるなど。別に他フレームワークと差別化して使うようなものでもなく習作的な感じ。</p>

<p>*::LiteとかDancerとか使えばワンソースでお手軽にWebアプリ書けるわけですが、実際に簡単なアプリ書くとなると、Liteなんだけどなんとなく仰々しい気がしてきたり。（Liteと言っても結局各フレームワークが持つ色々な機能は提供されているのでそう感じるのかな？）</p>

<p>でもだからといって</p>

<pre><code>my $app = sub {
    my $env = shift;
    [200, ['Content-Type' =&gt; 'text/plain'] ['Hello World'] ];
};

$app;
</code></pre>

<p>とかをモリモリ書いちゃうのもどう考えたって違う。</p>

<p>ということで、Plack::*,Router::Simple(Router::Simple::Sinatraish),Text::Xslate,Data::Section::Simpleでそれっぽく書けるようなものを作ってみた。あまりにも決め打ちすぎるので、設定を渡せるようにしたりして融通効くようにしたいかな。あんまり迷惑にならなそうなところで使ってみてます。</p>

<p>「劣化<a href="https://github.com/tokuhirom/MojaMoja">MojaMoja</a>」とか「劣化<a href="https://github.com/yusukebe/Hitagi">Hitagi</a>」とか「劣化<a href="http://blog.nomadscafe.jp/2010/07/nopastesinatrawaf.html">Shirahata</a>」とか思いつつ、劣化ということすらおこがましい状態。そりゃ大半コピーアンドペーストだもの仕方ないね。</p>

<p>強いて特徴を上げるならフォワードっぽいこと出来るようにしてみた（$ENV{PATH_INFO}をlocalで書き換える力技なので問題あるとは思う）けどSinatra的ルーティングでフォワードは用途を勘違いしてる感が否めないので正直いらないと思います。マル。</p>

<p>ちなみに<a href="https://github.com/mix3/Chaco">Chaco</a>はチャコと読みます。以前実家にいた、今は亡き黒のラブラドールレトリーバーの名前です。</p>

<pre><code>use Chaco;
# ...
run;
</code></pre>

<p>で、元気に走り回るチャコの姿を思い浮かべながら書いてました。<a href="http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=4507497">以前書いた絵</a>の日付みてもう４年近くも経ってるんですね…</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/03/16/20130316/</guid>
<pubDate>Sat, 16 Mar 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>Plack::App::Directoryで画像を展開する</title>
<description>
<![CDATA[
<p>Perlのネガティブキャンペーンが流行ってる今日この頃ですが私は元気です（震え声）</p>

<p>p5-JQueryPresentationHelperなんてなかったんや</p>

<h3>Plack::App::Directoryで画像とかは展開してほしい</h3>

<p>Plack::App::Directoryでカレントディレクトリ以下を見えるようにするワンライナーをbashrcとかでエイリアスにしておくとか良くあると思います。凄く便利なのでそれはそれとして良いのですが、画像とかは出来れば展開してそのまま見えてほしいかなと思う事もあります。</p>

<p>なので、どうすれば良いかなとPlack::App::Directoryの中見てたのですが、もりもりっとtrタグを羅列してるだけっぽかったので、HTML出力を正規表現でちょちょっと弄ればそれっぽくなりそうだと思ったのでやってみました。</p>

<script src="https://gist.github.com/mix3/5109843.js"></script>

<p>ファイルを出力するときはPlack::Util::IOWithPathのオブジェクトを返してるようなので、そうでないときだけ正規表現でちょちょっと弄る感じですると良い感じに画像表示してくれました。</p>

<p>swfも見えてほしいなぁという声が聞こえてきたのでswfobject.jsで見えるようにしてみました。</p>

<script src="https://gist.github.com/mix3/5116797.js"></script>

<p>タイルで見えるともっと良いね！という声が聞こえてきましたが、Plack::App::Directoryを使う限り無理なので、それは新規で別モジュール作った方が良いなと思いました。</p>

<p>ちなみにswfobject.jsは2.2でもまだ微妙にセキュリティリスクがあるらしい <a href="http://t-ashula.hateblo.jp/entry/2012/01/11/233156">ほむらちゃほむほむ - swfobject.js がアレな話</a> ので外から見えるところで使うのは止めた方が良いかなと思います。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/03/09/20130309-2/</guid>
<pubDate>Sat, 09 Mar 2013 00:00:01 +0900</pubDate>
</item>
<item>
<title>p5-JQueryPresentationHelper作ってみた</title>
<description>
<![CDATA[
<p>やりたかったこと。</p>

<ul>
<li>use Hoge でメソッドが生えるモジュールの習作が作りたかった</li>
<li><a href="http://code.google.com/p/jquery-presentation/">jquery-presentation</a>:<a href="http://dl.dropbox.com/u/268240/googleCode/jquery-presentation/index.html">demo</a>をmarkdownで書けるようにしたかった</li>
</ul>

<p>結果、良くわからないものが中途半端に出来てしまって、でも放置してもあれなのでとりあえずgithubにアップ。</p>

<p>git clone を前提としたもっとゆるい感じで作った方が良い感じにおさまった気がしてます。</p>

<p>jquery-presentationに依存したDSLモジュールとかcpanにあげるわけもないのだし。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/03/09/20130309-1/</guid>
<pubDate>Sat, 09 Mar 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>すぐにpixivのランキングイラストを見れるGoogleChromeの拡張を作った。</title>
<description>
<![CDATA[
<p>生きていればつらいことがある。
しかし、つらいからと言って簡単に投げ出す事は出来ないということも多い。</p>

<p>みなさんもつらまってる時、よくpixivを見ると思う。
当然のごとく僕もそうである。</p>

<p>最近つらい事がよくある。
そんな時のために、pixivのランキングイラストを素早く表示する必要があった。
なので、pixivのランキングイラストをすぐ見れるGoogle Chromeの拡張を作った。</p>

<p><a href="https://github.com/mix3/chrome-pixiv-illust-daily-ranking-redirect">mix3/chrome-pixiv-illust-daily-ranking-redirect - GitHub</a></p>

<p>「だめだ。もうやってらねー」って時は、空のtabを表示すればすぐpixivのランキングイラストが見れる。最高。自分も絵描きたい。</p>

<p><a href="/images/20130214/pixiv-illust-daily-ranking-redirect.png"><img src="/images/20130214/pixiv-illust-daily-ranking-redirect.png" width="300" /></a></p>

<p>参考</p>

<ul>
<li><a href="http://blog.hisaichi5518.com/entry/2013/02/01/003820">すぐに吉高由里子を見れるGoogle Chromeの拡張作った。 - パルカワ2</a></li>
<li><a href="http://soh335.hatenablog.com/entry/2013/02/10/011039">すぐに宮崎あおいを見れるGoogle Chromeの拡張作っ>た。 - soh335 memo</a></li>
<li><a href="http://mizzy.org/blog/2013/02/11/1/">すぐにハッブル宇宙望遠鏡撮影画像を見れるGoogle Chromeの拡張作った。 - Gosuke Miyashita</a></li>
</ul>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/02/14/20130214/</guid>
<pubDate>Thu, 14 Feb 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>あけおめ</title>
<description>
<![CDATA[
<p>ことよろ。なんか本当に久しぶりに落書きしたmix3です。</p>

<script src="http://source.pixiv.net/source/embed.js" data-id="32685756_6064c2b2416178ec058c322de47db89e" data-size="medium" data-border="on" charset="utf-8"></script>

<noscript><p><a href="http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=32685756" target="_blank">あけおめ</a> by <a href="http://www.pixiv.net/member.php?id=88339" target="_blank">mix3</a> on <a href="http://www.pixiv.net/" target="_blank">pixiv</a></p></noscript>

<p>年に1回の年賀絵ぐらい継続して描きたいものですね…</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2013/01/06/20130106/</guid>
<pubDate>Sun, 06 Jan 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>トランザクション</title>
<description>
<![CDATA[
<p>トランザクションってなーに？mix3です</p>

<h3>同時更新処理</h3>

<p><a href="http://mix3.github.io/2012/11/03/20121103/">スレーブ遅延</a>のときにSELECT > UPDATEで古い情報をもとにUPDATEしてしまうと不整合が発生すると書きましたが、</p>

<p>たとえば同じ行を複数で同時にSELECT > UPDATEすると同じように不整合が発生することがあります。</p>

<ol>
<li>AがT1からSELECT</li>
<li>BがT1からSELECT</li>
<li>AがT1をUPDATE</li>
<li>BがT1をUPDATE</li>
</ol>

<p>このような順序で更新がかかると、BがAの更新を上書きしてしまうため、実質Aの更新が無かった事になってしまいます。</p>

<p>これも更新がアトミックであれば発生しないので可能であればアトミックな更新にするのが良いですが、更新が複数ある場合はそういった変更も出来ません。</p>

<h3>そんなときこそトランザクション。そんなふうに考えていた時期が僕にもありました。</h3>

<p>で、そういうときはトランザクションを使う物だと思っていました。トランザクションは複数の処理を一つの処理としてまとめて成功するか失敗するか、どちらかを保証してくれます。</p>

<p>なので、SELECT > UPDATEをトランザクションでまとめてしまえば大丈夫だよね！と思っていたので、以下のようなコードを書いて確認しました。</p>

<script src="https://gist.github.com/4411441.js"></script>

<script src="https://gist.github.com/4411446.js"></script>

<p>scoreが更新回数になるので、'v' => '&lt;更新回数>' と揃えば不整合無く更新出来たことになるのですが、</p>

<p>見ての通りトランザクションを使った方は残念な結果になっています。で、すこしググッた結果トランザクションとロックは別で考えないと行けないことを知りました。</p>

<p><strong>トランザクションを使ったからといって勝手に行読み込みなどをロックして整合性を保証してくれるとかでは全然無いんですね。</strong></p>

<p>当たり前だろダラズ！と言われても仕方ないような勘違いですが、いやトランザクションを使わない世界でしばらく生きていたので…</p>

<p>で、SELECTにテーブルロックや行ロックが掛かってないためにSELECT > UPDATEの不整合が防げていないようなので、SELECT文にFOR UPDATE を付けてそれを防いでみました</p>

<script src="https://gist.github.com/4411474.js"></script>

<p>結果またしても残念な結果になりました…</p>

<h3>ちゃんとストレージエンジンを指定しましょう</h3>

<p>結果から言うとストレージエンジンを指定していなかったのでトランザクションの使えないMyISAMでテーブルが作られていたからでした。</p>

<script src="https://gist.github.com/4411511.js"></script>

<p>こんな感じでInnoDBを指定する事で期待通り、不整合なく更新されるようになりました。めでたしめでたし。</p>

<p>ちなみにSELECTのロックには共有ロックと排他ロックとあり、FOR UPDATEは排他ロックになります。LOCK IN SHARE MODEだと共有ロックになります。</p>

<p>今回の場合にLOCK IN SHARE MODEを使うと10ものプロセスが共有ロックを取り合って凄い勢いでデッドロックしました。</p>

<script src="https://gist.github.com/4411540.js"></script>

<p>ロックするということは同時にデッドロックする可能性もあるということなので、適切なロックを選択して使い、デッドロックの可能性を減らしながら上手く付き合っていきたいですね。</p>

<h3>まとめ</h3>

<ul>
<li>トランザクションはロックとはまた別問題
<ul>
<li>不整合を防ぎたいならちゃんとロックのことを考えてSQLを書く</li>
</ul></li>
<li>MySQLのデフォルトストレージエンジンはMyISAMだけど、それトランザクション使えないからね？</li>
<li>ロックにも種類はあり、デッドロックには気をつける</li>
</ul>

<h3>今年のブログはこれが最後な気がするので。</h3>

<p>来年はもっとブログをコードを書いてアウトプットを増やして行きたいです。</p>

<h3>それでは良いお年を！</h3>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2012/12/30/20121230/</guid>
<pubDate>Sun, 30 Dec 2012 00:00:00 +0900</pubDate>
</item>
<item>
<title>巨大ファイルの削除</title>
<description>
<![CDATA[
<p>DBサーバのslow_queryログがローテートされておらず単一ファイルで100G超えしていて辛いmix3です。</p>

<h3>巨大なファイルを rm するのは危険</h3>

<p>実際に試していないのでどうなるのか分からないですが、おそらく消し終わるまで間IOが占有されてDBのパフォーマンスに影響が出ちゃうのでしょう。</p>

<p>rm はやらないほうが良いねとなりました。</p>

<h3>: > /path/to/file</h3>

<p>じゃあどうすればという事で調べていたら</p>

<pre><code>
: > /path/to/file
</code></pre>

<p>を使ってはどうか？というようなものを見かけました</p>

<p><a href="http://serverfault.com/questions/336917/is-there-a-way-to-delete-100gb-file-on-linux-without-thrashing-io-load">Is there a way to delete 100GB file on Linux without thrashing IO / load?</a></p>

<p>容量に余裕のある別サーバで $ dd if=/dev/zero of=tempfile bs=1024000 count=100000 とかしてファイルを作って試したところ、readが発生するもののパフォーマンスにはあまり影響は無い感じで使えそうということに。</p>

<h3>ちなみに</h3>

<p>: > /path/to/file は空ファイルを作るときの方法のようで、<a href="http://d.hatena.ne.jp/japanrock_pg/20100212/1265972572">Linuxでファイルを空にする5つの方法</a> とかで見かけました</p>

<p>他のやり方だとまた違ってくるのでしょうか？</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2012/11/07/20121107/</guid>
<pubDate>Wed, 07 Nov 2012 00:00:00 +0900</pubDate>
</item>
<item>
<title>スレーブ遅延</title>
<description>
<![CDATA[
<p>今の案件に触れてからの自分の低能ぶりの凄まじさに自ら恐怖を禁じ得ず、椅子から転げ落ちて失禁しそうなmix3です。</p>

<h3>レプリケーション</h3>

<p>今の案件ではDBにMySQLを使いレプリケーションを使って負荷分散しております。（レプリケーション必要無いぐらいの負荷だよね、とかインフラの方に言われてまた失禁しそうです）</p>

<p>レプリケーションというのはリアルタイムに複製する技術のこと？上手く説明出来ませんが、まあWebサービスなんかだと書き込みより読み込みの方が圧倒的に割合が大きいらしく、マスターとその複製のスレーブにDBを分けて、書き込みはマスターへ、読み込みは複製のスレーブへ処理を振り分ける事で負荷を分散したりします。</p>

<h3>スレーブ遅延</h3>

<p>レプリケーションというのはリアルタイムな複製技術なので、基本的にはマスターとスレーブは同期が取れているハズですが、サーバの負荷状況によっては同期がとれていない状態になったりします。スレーブ遅延というものです。</p>

<h3>レプリケーション下での更新処理</h3>

<p>たとえばインクリメント的なアトミックな更新であればスレーブは関わらないので問題ないと思います。</p>

<pre><code>
UPDATE table SET column + 1 WHERE id = ?
</code></pre>

<p>そうではなくスレーブから読み込みをし、マスターに書き込みをするような処理をしてしまうと、スレーブが遅延していた場合に古い情報をもとに更新をしてしまい不整合が発生するなどあまりよろしくない状態になります</p>

<pre><code>
SELECT hoge FROM table_1 WHERE id = ?
スレーブから取ってきたhogeが古いものだと、その後のUPDATEでそのhogeを使うのは当然よろしくない

×UPDATE table_2 SET column = <hoge> WHERE id = ?
</code></pre>

<p>なので、そういったSELECT>UPDATEのような更新処理の場合は、SELECTもスレーブからではなくマスターからするようにしないといけせん。</p>

<h3>ようするにスレーブ遅延による不整合が発生したということ</h3>

<p>です。気をつけましょう。</p>

<h3>MySQL::Sandbox と Percona Toolkit(旧Maatkit)のpt-slave-delay</h3>

<p>こういうスレーブ遅延によるバグは開発環境では気づきにくかったりします。負荷の掛かっていない開発環境ではスレーブ遅延は発生しづらいでしょうし、そもそもDB構成が本番と違っていてレプリケーションされてなかったりすることも多いでしょう。</p>

<p>が、最近は便利になった物で、cpanに上がっているMySQL::SandboxとPercona Toolkit(旧Maatkit)なるツールを使うと割と簡単にレプリケーション環境とスレーブ遅延を再現出来ます。というかMySQL::SandboxもPercona Toolkit(旧Maatkit)結構前からあるので最初から使っておけという感じですね。（正月にデータが吹っ飛ぶ前は実は使ってたりしてたんですけどね...）</p>

<h3>MySQL::Sandbox</h3>

<ul>
<li><p>Install</p>

<ul>
<li>cpanm MySQL::Sandbox</li>
</ul></li>
<li><p>How to use</p>

<ul>
<li>SANDBOX_AS_ROOT=1 make_replication_sandbox -r master_data --how_many_slaves 1 --sandbox_base_port 11111 download/mysql-5.1.66-linux-x86_64-glibc23.tar.gz</li>
<li>rootで作業するとSANDBOX_AS_ROOT=1を使わないと怒られるけどそもそもrootで作業するなという話</li>
<li>sandboxes/master_data/以下にマスター(port: 11111, socket: /tmp/mysql_sandbox11111.sock)スレーブ(port: 11112, socket: /tmp/mysql_sandbox11112.sock)が出来る</li>
<li>perl -MDBI -e 'DBI->connect("dbi:mysql:test:mysql_socket=/tmp/mysql_sandbox11111.sock", "msandbox", "msandbox")'</li>
<li>port指定での接続方法は分からなかった。できなくは無いと思うけど</li>
</ul></li>
<li><p>init script</p>

<ul>
<li>以下のような感じで書いてみたがうまくいかん</li>
<li>落とし忘れるとsocketファイルが残って次回起動時に残念な事になるので出来ればなんとかしたい</li>
</ul></li>
</ul>

<pre><code>
#!/bin/sh

# chkconfig: 2345 65 35
# description: sandbox_action

# Source function library.
. /etc/rc.d/init.d/functions

# Get config.
. /etc/sysconfig/network

# Check that networking is up.
if [ ${NETWORKING} = "no" ]
then
  exit 0
fi

prog="sandbox_action"

case "$1" in
  start)
    echo -n "Starting $prog: "
    sandbox_action start
    success
    echo
  ;;
  stop)
    echo -n "Stopping $prog: "
    sandbox_action stop
    success
    echo
  ;;
  status)
    sandbox_action status
  ;;
  *)
    echo $"Usage: $prog {start|stop|status}"
    exit 1
esac

exit 0
</code></pre>

<h3>Percona Toolkit(旧Maatkit)</h3>

<ul>
<li><p>Install</p>

<ul>
<li>Perconaからtarを落としてきて、perl Makefile.PL, make &amp;&amp; make install</li>
<li>rpmは依存関係がうるさいのでtarからのほうが良いと思う</li>
</ul></li>
<li><p>How to use</p>

<ul>
<li>pt-slave-delay -u msandbox -p msandbox --socket /tmp/mysql_sandbox11112.sock</li>
<li>--daemonize オプションもある</li>
</ul></li>
</ul>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.io/2012/11/03/20121103/</guid>
<pubDate>Sat, 03 Nov 2012 00:00:00 +0900</pubDate>
</item>
</channel>
</rss>
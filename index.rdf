<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
 xmlns:blogChannel="http://backend.userland.com/blogChannelModule"
>

<channel>
<title>萌えキャラとは何だったのか</title>
<link>http://mix3.github.com</link>
<description>ギークにも絵描きにもなれない者の末路</description>

<item>
<title>p5-JQueryPresentationHelper作ってみた</title>
<description>
<![CDATA[
<p>やりたかったこと。</p>

<ul>
<li>use Hoge でメソッドが生えるモジュールの習作が作りたかった</li>
<li><a href="http://code.google.com/p/jquery-presentation/">jquery-presentation</a>:<a href="http://dl.dropbox.com/u/268240/googleCode/jquery-presentation/index.html">demo</a>をmarkdownで書けるようにしたかった</li>
</ul>

<p>結果、良くわからないものが中途半端に出来てしまって、でも放置してもあれなのでとりあえずgithubにアップ。</p>

<p>git clone を前提としたもっとゆるい感じで作った方が良い感じにおさまった気がしてます。</p>

<p>jquery-presentationに依存したDSLモジュールとかcpanにあげるわけもないのだし。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2013/03/09/20120309/</guid>
<pubDate>Sat, 09 Mar 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>すぐにpixivのランキングイラストを見れるGoogleChromeの拡張を作った。</title>
<description>
<![CDATA[
<p>生きていればつらいことがある。
しかし、つらいからと言って簡単に投げ出す事は出来ないということも多い。</p>

<p>みなさんもつらまってる時、よくpixivを見ると思う。
当然のごとく僕もそうである。</p>

<p>最近つらい事がよくある。
そんな時のために、pixivのランキングイラストを素早く表示する必要があった。
なので、pixivのランキングイラストをすぐ見れるGoogle Chromeの拡張を作った。</p>

<p><a href="https://github.com/mix3/chrome-pixiv-illust-daily-ranking-redirect">mix3/chrome-pixiv-illust-daily-ranking-redirect - GitHub</a></p>

<p>「だめだ。もうやってらねー」って時は、空のtabを表示すればすぐpixivのランキングイラストが見れる。最高。自分も絵描きたい。</p>

<p><a href="/images/20130214/pixiv-illust-daily-ranking-redirect.png"><img src="/images/20130214/pixiv-illust-daily-ranking-redirect.png" width="300" /></a></p>

<p>参考</p>

<ul>
<li><a href="http://blog.hisaichi5518.com/entry/2013/02/01/003820">すぐに吉高由里子を見れるGoogle Chromeの拡張作った。 - パルカワ2</a></li>
<li><a href="http://soh335.hatenablog.com/entry/2013/02/10/011039">すぐに宮崎あおいを見れるGoogle Chromeの拡張作っ>た。 - soh335 memo</a></li>
<li><a href="http://mizzy.org/blog/2013/02/11/1/">すぐにハッブル宇宙望遠鏡撮影画像を見れるGoogle Chromeの拡張作った。 - Gosuke Miyashita</a></li>
</ul>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2013/02/14/20130214/</guid>
<pubDate>Thu, 14 Feb 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>あけおめ</title>
<description>
<![CDATA[
<p>ことよろ。なんか本当に久しぶりに落書きしたmix3です。</p>

<script src="http://source.pixiv.net/source/embed.js" data-id="32685756_6064c2b2416178ec058c322de47db89e" data-size="medium" data-border="on" charset="utf-8"></script>

<noscript><p><a href="http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=32685756" target="_blank">あけおめ</a> by <a href="http://www.pixiv.net/member.php?id=88339" target="_blank">mix3</a> on <a href="http://www.pixiv.net/" target="_blank">pixiv</a></p></noscript>

<p>年に1回の年賀絵ぐらい継続して描きたいものですね…</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2013/01/06/20130106/</guid>
<pubDate>Sun, 06 Jan 2013 00:00:00 +0900</pubDate>
</item>
<item>
<title>トランザクション</title>
<description>
<![CDATA[
<p>トランザクションってなーに？mix3です</p>

<h3>同時更新処理</h3>

<p><a href="http://mix3.github.com/2012/11/03/20121103/">スレーブ遅延</a>のときにSELECT > UPDATEで古い情報をもとにUPDATEしてしまうと不整合が発生すると書きましたが、</p>

<p>たとえば同じ行を複数で同時にSELECT > UPDATEすると同じように不整合が発生することがあります。</p>

<ol>
<li>AがT1からSELECT</li>
<li>BがT1からSELECT</li>
<li>AがT1をUPDATE</li>
<li>BがT1をUPDATE</li>
</ol>

<p>このような順序で更新がかかると、BがAの更新を上書きしてしまうため、実質Aの更新が無かった事になってしまいます。</p>

<p>これも更新がアトミックであれば発生しないので可能であればアトミックな更新にするのが良いですが、更新が複数ある場合はそういった変更も出来ません。</p>

<h3>そんなときこそトランザクション。そんなふうに考えていた時期が僕にもありました。</h3>

<p>で、そういうときはトランザクションを使う物だと思っていました。トランザクションは複数の処理を一つの処理としてまとめて成功するか失敗するか、どちらかを保証してくれます。</p>

<p>なので、SELECT > UPDATEをトランザクションでまとめてしまえば大丈夫だよね！と思っていたので、以下のようなコードを書いて確認しました。</p>

<script src="https://gist.github.com/4411441.js"></script>

<script src="https://gist.github.com/4411446.js"></script>

<p>scoreが更新回数になるので、'v' => '&lt;更新回数>' と揃えば不整合無く更新出来たことになるのですが、</p>

<p>見ての通りトランザクションを使った方は残念な結果になっています。で、すこしググッた結果トランザクションとロックは別で考えないと行けないことを知りました。</p>

<p><strong>トランザクションを使ったからといって勝手に行読み込みなどをロックして整合性を保証してくれるとかでは全然無いんですね。</strong></p>

<p>当たり前だろダラズ！と言われても仕方ないような勘違いですが、いやトランザクションを使わない世界でしばらく生きていたので…</p>

<p>で、SELECTにテーブルロックや行ロックが掛かってないためにSELECT > UPDATEの不整合が防げていないようなので、SELECT文にFOR UPDATE を付けてそれを防いでみました</p>

<script src="https://gist.github.com/4411474.js"></script>

<p>結果またしても残念な結果になりました…</p>

<h3>ちゃんとストレージエンジンを指定しましょう</h3>

<p>結果から言うとストレージエンジンを指定していなかったのでトランザクションの使えないMyISAMでテーブルが作られていたからでした。</p>

<script src="https://gist.github.com/4411511.js"></script>

<p>こんな感じでInnoDBを指定する事で期待通り、不整合なく更新されるようになりました。めでたしめでたし。</p>

<p>ちなみにSELECTのロックには共有ロックと排他ロックとあり、FOR UPDATEは排他ロックになります。LOCK IN SHARE MODEだと共有ロックになります。</p>

<p>今回の場合にLOCK IN SHARE MODEを使うと10ものプロセスが共有ロックを取り合って凄い勢いでデッドロックしました。</p>

<script src="https://gist.github.com/4411540.js"></script>

<p>ロックするということは同時にデッドロックする可能性もあるということなので、適切なロックを選択して使い、デッドロックの可能性を減らしながら上手く付き合っていきたいですね。</p>

<h3>まとめ</h3>

<ul>
<li>トランザクションはロックとはまた別問題
<ul>
<li>不整合を防ぎたいならちゃんとロックのことを考えてSQLを書く</li>
</ul></li>
<li>MySQLのデフォルトストレージエンジンはMyISAMだけど、それトランザクション使えないからね？</li>
<li>ロックにも種類はあり、デッドロックには気をつける</li>
</ul>

<h3>今年のブログはこれが最後な気がするので。</h3>

<p>来年はもっとブログをコードを書いてアウトプットを増やして行きたいです。</p>

<h3>それでは良いお年を！</h3>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2012/12/30/20121230/</guid>
<pubDate>Sun, 30 Dec 2012 00:00:00 +0900</pubDate>
</item>
<item>
<title>巨大ファイルの削除</title>
<description>
<![CDATA[
<p>DBサーバのslow_queryログがローテートされておらず単一ファイルで100G超えしていて辛いmix3です。</p>

<h3>巨大なファイルを rm するのは危険</h3>

<p>実際に試していないのでどうなるのか分からないですが、おそらく消し終わるまで間IOが占有されてDBのパフォーマンスに影響が出ちゃうのでしょう。</p>

<p>rm はやらないほうが良いねとなりました。</p>

<h3>: > /path/to/file</h3>

<p>じゃあどうすればという事で調べていたら</p>

<pre><code>
: > /path/to/file
</code></pre>

<p>を使ってはどうか？というようなものを見かけました</p>

<p><a href="http://serverfault.com/questions/336917/is-there-a-way-to-delete-100gb-file-on-linux-without-thrashing-io-load">Is there a way to delete 100GB file on Linux without thrashing IO / load?</a></p>

<p>容量に余裕のある別サーバで $ dd if=/dev/zero of=tempfile bs=1024000 count=100000 とかしてファイルを作って試したところ、readが発生するもののパフォーマンスにはあまり影響は無い感じで使えそうということに。</p>

<h3>ちなみに</h3>

<p>: > /path/to/file は空ファイルを作るときの方法のようで、<a href="http://d.hatena.ne.jp/japanrock_pg/20100212/1265972572">Linuxでファイルを空にする5つの方法</a> とかで見かけました</p>

<p>他のやり方だとまた違ってくるのでしょうか？</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2012/11/07/20121107/</guid>
<pubDate>Wed, 07 Nov 2012 00:00:00 +0900</pubDate>
</item>
<item>
<title>スレーブ遅延</title>
<description>
<![CDATA[
<p>今の案件に触れてからの自分の低能ぶりの凄まじさに自ら恐怖を禁じ得ず、椅子から転げ落ちて失禁しそうなmix3です。</p>

<h3>レプリケーション</h3>

<p>今の案件ではDBにMySQLを使いレプリケーションを使って負荷分散しております。（レプリケーション必要無いぐらいの負荷だよね、とかインフラの方に言われてまた失禁しそうです）</p>

<p>レプリケーションというのはリアルタイムに複製する技術のこと？上手く説明出来ませんが、まあWebサービスなんかだと書き込みより読み込みの方が圧倒的に割合が大きいらしく、マスターとその複製のスレーブにDBを分けて、書き込みはマスターへ、読み込みは複製のスレーブへ処理を振り分ける事で負荷を分散したりします。</p>

<h3>スレーブ遅延</h3>

<p>レプリケーションというのはリアルタイムな複製技術なので、基本的にはマスターとスレーブは同期が取れているハズですが、サーバの負荷状況によっては同期がとれていない状態になったりします。スレーブ遅延というものです。</p>

<h3>レプリケーション下での更新処理</h3>

<p>たとえばインクリメント的なアトミックな更新であればスレーブは関わらないので問題ないと思います。</p>

<pre><code>
UPDATE table SET column + 1 WHERE id = ?
</code></pre>

<p>そうではなくスレーブから読み込みをし、マスターに書き込みをするような処理をしてしまうと、スレーブが遅延していた場合に古い情報をもとに更新をしてしまい不整合が発生するなどあまりよろしくない状態になります</p>

<pre><code>
SELECT hoge FROM table_1 WHERE id = ?
スレーブから取ってきたhogeが古いものだと、その後のUPDATEでそのhogeを使うのは当然よろしくない

×UPDATE table_2 SET column = <hoge> WHERE id = ?
</code></pre>

<p>なので、そういったSELECT>UPDATEのような更新処理の場合は、SELECTもスレーブからではなくマスターからするようにしないといけせん。</p>

<h3>ようするにスレーブ遅延による不整合が発生したということ</h3>

<p>です。気をつけましょう。</p>

<h3>MySQL::Sandbox と Percona Toolkit(旧Maatkit)のpt-slave-delay</h3>

<p>こういうスレーブ遅延によるバグは開発環境では気づきにくかったりします。負荷の掛かっていない開発環境ではスレーブ遅延は発生しづらいでしょうし、そもそもDB構成が本番と違っていてレプリケーションされてなかったりすることも多いでしょう。</p>

<p>が、最近は便利になった物で、cpanに上がっているMySQL::SandboxとPercona Toolkit(旧Maatkit)なるツールを使うと割と簡単にレプリケーション環境とスレーブ遅延を再現出来ます。というかMySQL::SandboxもPercona Toolkit(旧Maatkit)結構前からあるので最初から使っておけという感じですね。（正月にデータが吹っ飛ぶ前は実は使ってたりしてたんですけどね...）</p>

<h3>MySQL::Sandbox</h3>

<ul>
<li><p>Install</p>

<ul>
<li>cpanm MySQL::Sandbox</li>
</ul></li>
<li><p>How to use</p>

<ul>
<li>SANDBOX_AS_ROOT=1 make_replication_sandbox -r master_data --how_many_slaves 1 --sandbox_base_port 11111 download/mysql-5.1.66-linux-x86_64-glibc23.tar.gz</li>
<li>rootで作業するとSANDBOX_AS_ROOT=1を使わないと怒られるけどそもそもrootで作業するなという話</li>
<li>sandboxes/master_data/以下にマスター(port: 11111, socket: /tmp/mysql_sandbox11111.sock)スレーブ(port: 11112, socket: /tmp/mysql_sandbox11112.sock)が出来る</li>
<li>perl -MDBI -e 'DBI->connect("dbi:mysql:test:mysql_socket=/tmp/mysql_sandbox11111.sock", "msandbox", "msandbox")'</li>
<li>port指定での接続方法は分からなかった。できなくは無いと思うけど</li>
</ul></li>
<li><p>init script</p>

<ul>
<li>以下のような感じで書いてみたがうまくいかん</li>
<li>落とし忘れるとsocketファイルが残って次回起動時に残念な事になるので出来ればなんとかしたい</li>
</ul></li>
</ul>

<pre><code>
#!/bin/sh

# chkconfig: 2345 65 35
# description: sandbox_action

# Source function library.
. /etc/rc.d/init.d/functions

# Get config.
. /etc/sysconfig/network

# Check that networking is up.
if [ ${NETWORKING} = "no" ]
then
  exit 0
fi

prog="sandbox_action"

case "$1" in
  start)
    echo -n "Starting $prog: "
    sandbox_action start
    success
    echo
  ;;
  stop)
    echo -n "Stopping $prog: "
    sandbox_action stop
    success
    echo
  ;;
  status)
    sandbox_action status
  ;;
  *)
    echo $"Usage: $prog {start|stop|status}"
    exit 1
esac

exit 0
</code></pre>

<h3>Percona Toolkit(旧Maatkit)</h3>

<ul>
<li><p>Install</p>

<ul>
<li>Perconaからtarを落としてきて、perl Makefile.PL, make &amp;&amp; make install</li>
<li>rpmは依存関係がうるさいのでtarからのほうが良いと思う</li>
</ul></li>
<li><p>How to use</p>

<ul>
<li>pt-slave-delay -u msandbox -p msandbox --socket /tmp/mysql_sandbox11112.sock</li>
<li>--daemonize オプションもある</li>
</ul></li>
</ul>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2012/11/03/20121103/</guid>
<pubDate>Sat, 03 Nov 2012 00:00:00 +0900</pubDate>
</item>
<item>
<title>そろそろ自分は本当に死んだ方が良い気がする件について</title>
<description>
<![CDATA[
<p>「バカジャネーノ」と言われてぐぅの根も出ないmix3です。</p>

<h3>死んだ方が良い事の概要その１</h3>

<p>今やってるサービスに諸事情により一つ機能を追加しなければならない必要に迫られ、その対応を自分がすることになったのですが、結果は盛大に燃やし散々な糞クオリティで納期に間に合わないという目も当てられない自体になってしまいました。
設計段階で詰んでいて（DB設計の時点で要件を満たせない）どう尻拭いしても物理的に納期に間に合わないということで、結局お尻を先延ばしにしてもらって先輩にヘルプ入ってもらい設計からやり直しとなりました。</p>

<h3>死んだ方が良い事の概要その２</h3>

<p>スケジュール再編からは先輩の手によって設計が組み直され、画面仕様から必要な機能を洗い出してコントローラとモデルのインタフェースを決めて行く（勝手にIDD[インタフェースドリブンデベロップメント]などと呼んでいる）やりかたで、仕様認識の齟齬を減らしつつ必要充分な機能を決めて行きました。このやり方は関わるプログラマ全員の時間を使ってしまうのでなかなか面倒ですが、仕様認識齟齬が減るのと機能の洗い出しで全員がチェックするので抜けが減るので危険な香りがする時は積極的にするようにしています。またインタフェースを決めてしまうので、分業しやすいというのも利点です。Javaのインタフェースベースの作り方を思い出してとても気分良く作れます。</p>

<p>ここまでは良いのですが、分業で自分がモデルを作って最後にコントローラと結合すると自分の糞クオリティを発揮して色々問題を起こしていました</p>

<ul>
<li>バリデート関数はエラーを返すだけというルールで決めたはずなのになぜかExceptionを投げてる</li>
<li>関数の返り値の形を変えてしまった</li>
<li>明らかにコピペしてる</li>
<li>関数名、変数名の意味が分からない</li>
<li>テスト書けていない（間に合ってない）</li>
</ul>

<p>時間も無いのに色々やらかして最終的に「バカジャネーノ」と言われて何も言えないmix3の姿がそこにはありました。</p>

<h3>こういう怒られ方はずっと前から続いている 今回は集中しただけで</h3>

<p>要するにプログラマとしては致命的なほど人から見て意味の通じるコードが書けないのだと思います。視野狭窄で自分しか見えてなくて、平気で他人から見て意味の分からないコードを書いてしまう。他人のコードを見て何がどう優れているか、このコードの何がだめか。変数、関数の意味は。怒られるたびに考えるようにしても、結局怒られる。良し悪しの判断がいつまでたっても改善されない。</p>

<p>自分は成長していないといつも感じているしいつも言っているけど、こういったことの成長が無いことも多く含んでいる。</p>

<h3>結局どうすれば良いのかは分からない</h3>

<p>これだけ怒られて改善しないといけないと思っていて、でもどうすれば良いのかは良くわからない。</p>

<p>ただ「他人が理解出来るコードを書けば良い」だけではあるけれども、それだけの事が出来ないということは、自分にはそれをするための何かが欠けてるということで、でもその何かを「何か」としか書けないということは全くその「何か」を理解していない。つまりどうしたら良いのか分からない。</p>

<p>いっぱいコード書いて怒られて判断出来るようになる以外にもう方法が思いつかないが、でもそのやり方をするには既に時間を使いすぎてる感があるし、そのせいで関わるいろんなひとに迷惑をかけていて、今回は特に他のスケージュルに大きく影響を与え、お金を消費している。大きさ的に自分が取れる責任を大きく上回っている。</p>

<p>だから最近はタイトルのようなことを良く考えている。自分が何かやらかすことで与える色々なな迷惑が大きすぎて、本音の本音では今すぐ逃げ出したい（逃げて人が減る事の方がとんでもない迷惑なのでしないけど）</p>

<h3>ということで</h3>

<ul>
<li>mix3は今すぐ死ぬべきである。</li>
<li>死なないのであれば迷惑を掛けないように生きるべきである</li>
</ul>

<p>どっちかを満たすためにmix3は頑張らなければならない。</p>

<p>そしてそんな事とは関係なく<a href="https://github.com/mix3/p5-SWFEditor">p5-SWFEditor</a>を更新してますYO。大本の<a href="http://d.hatena.ne.jp/yoya/20120808/swfed">swfed</a>のバージョンアップに追従しています。<a href="https://github.com/mix3/p5-SWFEditor">p5-SWFEditor</a>は可愛いね。イイコイイコ。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2012/08/12/20120812/</guid>
<pubDate>Sun, 12 Aug 2012 00:00:00 +0900</pubDate>
</item>
<item>
<title>修論で作ったなつかしのもの</title>
<description>
<![CDATA[
<p>若い子たちが優秀すぎて生きるのが辛い（迫真） mix3です。</p>

<p>新入社員の自己紹介としてネタが無い時に卒論、修論が鉄板として出てくるのか何かそういうのを聞く機会があったりなかったりして、懐かしいなぁとか思ったり思わなかったりしていました。みんな凄い事してて生きるのがどんどん辛くなります。ほんと自分は適当で不真面目で教授に迷惑ばかり掛けていました。今もそうです。ごめんなさい。猛省。</p>

<h3>プロトタイピング</h3>

<p>ソフトウェア開発の手法としてプロトタイピングというものがあります。「中身は無いが動く」ものを作り、早い段階から作るものに対しての評価、フィードバック得ることで、手戻りを減らすことを目的とした手法です。</p>

<p>このプロトタイピングという手法は手戻りを防ぐという点で、当たり前ではあるけれども重要な開発手法なのですが、プロトタイプの製作に時間が掛かったりすると意味が無かったり、プロトタイプを見せたらそれを完成品と勘違いされたり（もう完成しているということで、納期や費用を削られそうになったり）という笑い話のような本当の話があったりして、工夫しないとそのまま適用するのは難しい手法だったりします。</p>

<h3>mocketch</h3>

<p>と、プロトタイピングには手法そのものに派生があるほど色々あるのですが、そんな難しいことは自分のような阿呆には考えられないので、修論ではとにもかくにも「プロトタイプを早く作れられれば良いんだろ？」と思考を放棄して動くものを作ってました。それが<a href="https://github.com/mix3/mocketch">mocketch</a>です。ウェブアプリのプロトタイプとして作るものが「モックアップ」や「スケッチ」などと呼ばれているっぽいのでそれをガッチャンコしただけという。酷いですね。</p>

<p>具体的に何がしたかったかというと「HTMLを書くだけでそれがウェブアプリとして動くもの」を目指していました。HTMLで紙芝居だけでも十分というか実際そういう感じのようですが、それが実際に動くものだともっとイメージがしやすいしプロトタイプとしてより良いだろうという安易な考えでした。酷いですね。</p>

<p>何気にgithubから落としてきて mvn jetty:run するだけで動いて自分でビビってしまいました。maven 凄いです。java 可愛いよ。</p>

<p>以下実際に動かしてみたときのスクショ。さすがにサーバに上げて動かすのは怖いので。</p>

<p>１）以下のような感じでHTMLを書くと<br />
<a href="/images/20120422/mocketch1.png"><img src="/images/20120422/mocketch1.png" width="300" /></a></p>

<p>２）なんかフォームが表示されて<br />
<img src="/images/20120422/mocketch2.png" /></p>

<p>３）適当に入力する<br />
<img src="/images/20120422/mocketch3.png" /></p>

<p>４）なんんかそれっぽく入力内容が反映される<br />
<img src="/images/20120422/mocketch4.png" /></p>

<p>５）もう一回繰り返してみた<br />
<img src="/images/20120422/mocketch5.png" /></p>

<p>というものでした。</p>

<p>リスト表示のところに form を用意すると、掲示板のレスのような感じを表現出来たり、入力に対して必須項目や文字列長などのバリデートを入れたり、ページングを入れられたりもします。githubに上がってるものは少し古くて色々上手く動いていないですが。</p>

<p>内部的にはHTMLに属性として meta:table meta:column を書くとkey-valueで解釈して HashMap で保存、表示しているだけです。wicketがよしなにやってくれてます。</p>

<h3>ということで</h3>

<p>酷い修論の製作物でした。ほんとごめんなさい。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2012/04/22/20120422/</guid>
<pubDate>Sun, 22 Apr 2012 00:00:00 +0900</pubDate>
</item>
<item>
<title>Capture::Tiny</title>
<description>
<![CDATA[
<p>前回pixivブログは github pages のコピーだから大丈夫とか書いたけど、github pages で書き始める前のpixivブログはバックアップ取ってなかったのでほんとは大丈夫じゃなかった mix3 です。SSH+LDAP とか keepalived を試してみた記事が消えたのはちょっともったいなかったかな。まあ、Google検索でキャッシュ漁ればある程度は発掘出来そうではあるけれども。</p>

<h3>p5-SWFEditor</h3>

<p>アウトプットが無さ過ぎて良くないなぁということでひねり出してみる。</p>

<p>前の記事に書いたp5-SWFEditorですが、swf_info と print_tag_data はCが標準出力をしていて、これをテストしようとすると標準出力をキャプチャしないといけなくてちょっと困ってしまいました。Capture::Tiny というものを使うとキャプチャ出来るというのは<a href="https://twitter.com/#!/fujiwara">@fujiwara</a>さんから教わって試してみたけれどなぜか上手く行かず。言われて試してみたときは途中までしかキャプチャ出来ませんでした。</p>

<p>ただ、途中までしかキャプチャできないという時点で出力がバッファされているというのはピンと来ていて、実際その通りだったのですが、Perlでこれをどうこうする方法が分からず結局今もどうすれば良いのかというのは分かっていません。今はXSのほうでfflushするようにしてテストが出来るようにしています。</p>

<p>以下標準出力を捕まえる方法を探っていたときに書いたサンプルです。fflushしたときの標準出力とPerlIO_stdoutfを使った標準出力はキャプチャできていますが、素直にprintfしたときはキャプチャできず遅れてバッファに溜まっていたものが標準出力されてしまっています。</p>

<script src="https://gist.github.com/2384966.js"> </script>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2012/04/14/20120414/</guid>
<pubDate>Sat, 14 Apr 2012 00:00:00 +0900</pubDate>
</item>
<item>
<title>やったー cpan auhor になったよー＼(^o^)／</title>
<description>
<![CDATA[
<p>今年入ってからミスが多すぎてそろそろ本当に首になるか、潔く自分から辞めるかした方が良いんじゃないかと真剣に考えるmix3です。</p>

<h3><a href="http://pixiv.cc/mix3">pixivブログ消滅</a></h3>

<p>pixivブログで書いていた事は github の pages のコピーだったので、pixivブログのサービス終了には特にどうということは無かったのですが、本当にサービスが終了して見れなくなってしまったので、ようやっと github の方に完全に移行しました。</p>

<p>移行にあたって、ブログ生成スクリプトを改修（リファクタリング的には今も相当酷いが）して、Octpressのような感じでURLがそれっぽくなるようにしてみました。後はカテゴリかタグに対応してページング出来れば良いかなと思っています。</p>

<p>それにしても 元 pixiv ユーザ（本当は今もpixivユーザのつもりだけど今となってはまともに描いてないので…）として pixiv ブログ自体は気に入ってたのでちょっと残念です。</p>

<h3><a href="https://github.com/mix3/p5-SWFEditor">p5-SWFEditor</a></h3>

<p>タイトルに書いた通り、<a href="http://search.cpan.org/~himachoco/">cpan author</a> になりました。p5-SWFEditorという swf の画像置換やMovieClipの置換など、swf を perl から色々弄れるライブラリを作成してアップしました。</p>

<p>p5-SWFEditorの中身は <a href="https://twitter.com/#!/yoya">@yoya</a> さんの好意により <a href="https://twitter.com/#!/yoya">@yoya</a> さん作 <a href="http://sourceforge.jp/projects/swfed/">SWFEditor for PHP</a> をまるっとそのまま使わせてもらっています。自分がしたのは C で書かれている SWFEditor の機能を使うためのインタフェースを XS で書いた形になります。
（そもそも SWFEdito for PHP が移植性などを考慮してSWF操作のコア部分とそれを使うインタフェースに分離して作られているので非常に移植しやすくなっています。素晴らしいですね！）</p>

<p>SWFEditor の Perl バインディングの作成を快く許可して下さった <a href="https://twitter.com/#!/yoya">@yoya</a> さんに心から感謝致します。</p>

<h3>ということで</h3>

<p>ブログ移行にともないpixivブログからCSSを持ってきてそれっぽくしたのでそれのお知らせと、p5-SWFEditor を cpan にアップして cpan author になったよー というお知らせでした。</p>
]]>
</description>
<guid isPermaLink="true">http://mix3.github.com/2012/04/10/20120410/</guid>
<pubDate>Tue, 10 Apr 2012 00:00:00 +0900</pubDate>
</item>
</channel>
</rss>